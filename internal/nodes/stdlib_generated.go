// Code generated by cmd/genstdlib/main.go; DO NOT EDIT.
package nodes

import (
	i1 "archive/tar"
	i2 "archive/zip"
	i3 "bufio"
	i4 "bytes"
	i5 "compress/bzip2"
	i6 "compress/flate"
	i7 "compress/gzip"
	i8 "compress/lzw"
	i9 "compress/zlib"
	i10 "container/heap"
	i11 "container/list"
	i12 "container/ring"
	i13 "context"
	i14 "crypto"
	i15 "crypto/aes"
	i16 "crypto/cipher"
	i17 "crypto/des"
	i18 "crypto/dsa"
	i19 "crypto/ecdsa"
	i20 "crypto/ed25519"
	i21 "crypto/elliptic"
	i22 "crypto/hmac"
	i23 "crypto/md5"
	i24 "crypto/rand"
	i25 "crypto/rc4"
	i26 "crypto/rsa"
	i27 "crypto/sha1"
	i28 "crypto/sha256"
	i29 "crypto/sha512"
	i30 "crypto/subtle"
	i31 "crypto/tls"
	i32 "crypto/x509"
	i33 "database/sql"
	i34 "database/sql/driver"
	i35 "encoding/ascii85"
	i36 "encoding/asn1"
	i37 "encoding/base32"
	i38 "encoding/base64"
	i39 "encoding/binary"
	i40 "encoding/csv"
	i41 "encoding/gob"
	i42 "encoding/hex"
	i43 "encoding/json"
	i44 "encoding/pem"
	i45 "encoding/xml"
	i46 "errors"
	i47 "expvar"
	i48 "flag"
	i49 "fmt"
	i50 "go/ast"
	i51 "go/build"
	i52 "go/build/constraint"
	i53 "go/constant"
	i54 "go/doc"
	i55 "go/format"
	i56 "go/importer"
	i57 "go/parser"
	i58 "go/printer"
	i59 "go/scanner"
	i60 "go/token"
	i61 "go/types"
	i62 "hash/adler32"
	i63 "hash/crc32"
	i64 "hash/crc64"
	i65 "hash/fnv"
	i66 "hash/maphash"
	i67 "html"
	i68 "html/template"
	i69 "image"
	i70 "image/color"
	i71 "image/color/palette"
	i72 "image/draw"
	i73 "image/gif"
	i74 "image/jpeg"
	i75 "image/png"
	i76 "index/suffixarray"
	i77 "io"
	i78 "io/fs"
	i79 "io/ioutil"
	i80 "log"
	i81 "log/slog"
	i82 "log/syslog"
	i83 "math"
	i84 "math/big"
	i85 "math/bits"
	i86 "math/cmplx"
	i87 "math/rand"
	i88 "mime"
	i89 "mime/multipart"
	i90 "mime/quotedprintable"
	i91 "net"
	i92 "net/http"
	i93 "net/http/cgi"
	i94 "net/http/cookiejar"
	i95 "net/http/fcgi"
	i96 "net/http/httptest"
	i97 "net/http/httptrace"
	i98 "net/http/httputil"
	i99 "net/http/pprof"
	i100 "net/mail"
	i101 "net/rpc"
	i102 "net/rpc/jsonrpc"
	i103 "net/smtp"
	i104 "net/textproto"
	i105 "net/url"
	i106 "os"
	i107 "os/exec"
	i108 "os/signal"
	i109 "os/user"
	i110 "path"
	i111 "path/filepath"
	i112 "plugin"
	"reflect"
	i113 "regexp"
	i114 "regexp/syntax"
	i115 "sort"
	i116 "strconv"
	i117 "strings"
	i118 "sync"
	i119 "sync/atomic"
	i120 "syscall"
	i121 "text/scanner"
	i122 "text/tabwriter"
	i123 "text/template"
	i124 "text/template/parse"
	i125 "time"
	i126 "unicode"
	i127 "unicode/utf16"
	i128 "unicode/utf8"
)

func init() {
	stdpkg["archive/tar"] = map[string]reflect.Value{
		"ErrFieldTooLong":    reflect.ValueOf(i1.ErrFieldTooLong),
		"ErrHeader":          reflect.ValueOf(i1.ErrHeader),
		"ErrInsecurePath":    reflect.ValueOf(i1.ErrInsecurePath),
		"ErrWriteAfterClose": reflect.ValueOf(i1.ErrWriteAfterClose),
		"ErrWriteTooLong":    reflect.ValueOf(i1.ErrWriteTooLong),
		"FileInfoHeader":     reflect.ValueOf(i1.FileInfoHeader),
		"FormatGNU":          reflect.ValueOf(i1.FormatGNU),
		"FormatPAX":          reflect.ValueOf(i1.FormatPAX),
		"FormatUSTAR":        reflect.ValueOf(i1.FormatUSTAR),
		"FormatUnknown":      reflect.ValueOf(i1.FormatUnknown),
		"NewReader":          reflect.ValueOf(i1.NewReader),
		"NewWriter":          reflect.ValueOf(i1.NewWriter),
		"TypeBlock":          reflect.ValueOf(i1.TypeBlock),
		"TypeChar":           reflect.ValueOf(i1.TypeChar),
		"TypeCont":           reflect.ValueOf(i1.TypeCont),
		"TypeDir":            reflect.ValueOf(i1.TypeDir),
		"TypeFifo":           reflect.ValueOf(i1.TypeFifo),
		"TypeGNULongLink":    reflect.ValueOf(i1.TypeGNULongLink),
		"TypeGNULongName":    reflect.ValueOf(i1.TypeGNULongName),
		"TypeGNUSparse":      reflect.ValueOf(i1.TypeGNUSparse),
		"TypeLink":           reflect.ValueOf(i1.TypeLink),
		"TypeReg":            reflect.ValueOf(i1.TypeReg),
		"TypeRegA":           reflect.ValueOf(i1.TypeRegA),
		"TypeSymlink":        reflect.ValueOf(i1.TypeSymlink),
		"TypeXGlobalHeader":  reflect.ValueOf(i1.TypeXGlobalHeader),
		"TypeXHeader":        reflect.ValueOf(i1.TypeXHeader),
	}
	stdpkg["archive/zip"] = map[string]reflect.Value{
		"Deflate":              reflect.ValueOf(i2.Deflate),
		"ErrAlgorithm":         reflect.ValueOf(i2.ErrAlgorithm),
		"ErrChecksum":          reflect.ValueOf(i2.ErrChecksum),
		"ErrFormat":            reflect.ValueOf(i2.ErrFormat),
		"ErrInsecurePath":      reflect.ValueOf(i2.ErrInsecurePath),
		"FileInfoHeader":       reflect.ValueOf(i2.FileInfoHeader),
		"NewReader":            reflect.ValueOf(i2.NewReader),
		"NewWriter":            reflect.ValueOf(i2.NewWriter),
		"OpenReader":           reflect.ValueOf(i2.OpenReader),
		"RegisterCompressor":   reflect.ValueOf(i2.RegisterCompressor),
		"RegisterDecompressor": reflect.ValueOf(i2.RegisterDecompressor),
		"Store":                reflect.ValueOf(i2.Store),
	}
	stdpkg["bufio"] = map[string]reflect.Value{
		"ErrAdvanceTooFar":     reflect.ValueOf(i3.ErrAdvanceTooFar),
		"ErrBadReadCount":      reflect.ValueOf(i3.ErrBadReadCount),
		"ErrBufferFull":        reflect.ValueOf(i3.ErrBufferFull),
		"ErrFinalToken":        reflect.ValueOf(i3.ErrFinalToken),
		"ErrInvalidUnreadByte": reflect.ValueOf(i3.ErrInvalidUnreadByte),
		"ErrInvalidUnreadRune": reflect.ValueOf(i3.ErrInvalidUnreadRune),
		"ErrNegativeAdvance":   reflect.ValueOf(i3.ErrNegativeAdvance),
		"ErrNegativeCount":     reflect.ValueOf(i3.ErrNegativeCount),
		"ErrTooLong":           reflect.ValueOf(i3.ErrTooLong),
		"MaxScanTokenSize":     reflect.ValueOf(i3.MaxScanTokenSize),
		"NewReadWriter":        reflect.ValueOf(i3.NewReadWriter),
		"NewReader":            reflect.ValueOf(i3.NewReader),
		"NewReaderSize":        reflect.ValueOf(i3.NewReaderSize),
		"NewScanner":           reflect.ValueOf(i3.NewScanner),
		"NewWriter":            reflect.ValueOf(i3.NewWriter),
		"NewWriterSize":        reflect.ValueOf(i3.NewWriterSize),
		"ScanBytes":            reflect.ValueOf(i3.ScanBytes),
		"ScanLines":            reflect.ValueOf(i3.ScanLines),
		"ScanRunes":            reflect.ValueOf(i3.ScanRunes),
		"ScanWords":            reflect.ValueOf(i3.ScanWords),
	}
	stdpkg["bytes"] = map[string]reflect.Value{
		"Clone":           reflect.ValueOf(i4.Clone),
		"Compare":         reflect.ValueOf(i4.Compare),
		"Contains":        reflect.ValueOf(i4.Contains),
		"ContainsAny":     reflect.ValueOf(i4.ContainsAny),
		"ContainsFunc":    reflect.ValueOf(i4.ContainsFunc),
		"ContainsRune":    reflect.ValueOf(i4.ContainsRune),
		"Count":           reflect.ValueOf(i4.Count),
		"Cut":             reflect.ValueOf(i4.Cut),
		"CutPrefix":       reflect.ValueOf(i4.CutPrefix),
		"CutSuffix":       reflect.ValueOf(i4.CutSuffix),
		"Equal":           reflect.ValueOf(i4.Equal),
		"EqualFold":       reflect.ValueOf(i4.EqualFold),
		"ErrTooLarge":     reflect.ValueOf(i4.ErrTooLarge),
		"Fields":          reflect.ValueOf(i4.Fields),
		"FieldsFunc":      reflect.ValueOf(i4.FieldsFunc),
		"FieldsFuncSeq":   reflect.ValueOf(i4.FieldsFuncSeq),
		"FieldsSeq":       reflect.ValueOf(i4.FieldsSeq),
		"HasPrefix":       reflect.ValueOf(i4.HasPrefix),
		"HasSuffix":       reflect.ValueOf(i4.HasSuffix),
		"Index":           reflect.ValueOf(i4.Index),
		"IndexAny":        reflect.ValueOf(i4.IndexAny),
		"IndexByte":       reflect.ValueOf(i4.IndexByte),
		"IndexFunc":       reflect.ValueOf(i4.IndexFunc),
		"IndexRune":       reflect.ValueOf(i4.IndexRune),
		"Join":            reflect.ValueOf(i4.Join),
		"LastIndex":       reflect.ValueOf(i4.LastIndex),
		"LastIndexAny":    reflect.ValueOf(i4.LastIndexAny),
		"LastIndexByte":   reflect.ValueOf(i4.LastIndexByte),
		"LastIndexFunc":   reflect.ValueOf(i4.LastIndexFunc),
		"Lines":           reflect.ValueOf(i4.Lines),
		"Map":             reflect.ValueOf(i4.Map),
		"MinRead":         reflect.ValueOf(i4.MinRead),
		"NewBuffer":       reflect.ValueOf(i4.NewBuffer),
		"NewBufferString": reflect.ValueOf(i4.NewBufferString),
		"NewReader":       reflect.ValueOf(i4.NewReader),
		"Repeat":          reflect.ValueOf(i4.Repeat),
		"Replace":         reflect.ValueOf(i4.Replace),
		"ReplaceAll":      reflect.ValueOf(i4.ReplaceAll),
		"Runes":           reflect.ValueOf(i4.Runes),
		"Split":           reflect.ValueOf(i4.Split),
		"SplitAfter":      reflect.ValueOf(i4.SplitAfter),
		"SplitAfterN":     reflect.ValueOf(i4.SplitAfterN),
		"SplitAfterSeq":   reflect.ValueOf(i4.SplitAfterSeq),
		"SplitN":          reflect.ValueOf(i4.SplitN),
		"SplitSeq":        reflect.ValueOf(i4.SplitSeq),
		"Title":           reflect.ValueOf(i4.Title),
		"ToLower":         reflect.ValueOf(i4.ToLower),
		"ToLowerSpecial":  reflect.ValueOf(i4.ToLowerSpecial),
		"ToTitle":         reflect.ValueOf(i4.ToTitle),
		"ToTitleSpecial":  reflect.ValueOf(i4.ToTitleSpecial),
		"ToUpper":         reflect.ValueOf(i4.ToUpper),
		"ToUpperSpecial":  reflect.ValueOf(i4.ToUpperSpecial),
		"ToValidUTF8":     reflect.ValueOf(i4.ToValidUTF8),
		"Trim":            reflect.ValueOf(i4.Trim),
		"TrimFunc":        reflect.ValueOf(i4.TrimFunc),
		"TrimLeft":        reflect.ValueOf(i4.TrimLeft),
		"TrimLeftFunc":    reflect.ValueOf(i4.TrimLeftFunc),
		"TrimPrefix":      reflect.ValueOf(i4.TrimPrefix),
		"TrimRight":       reflect.ValueOf(i4.TrimRight),
		"TrimRightFunc":   reflect.ValueOf(i4.TrimRightFunc),
		"TrimSpace":       reflect.ValueOf(i4.TrimSpace),
		"TrimSuffix":      reflect.ValueOf(i4.TrimSuffix),
	}
	stdpkg["compress/bzip2"] = map[string]reflect.Value{
		"NewReader": reflect.ValueOf(i5.NewReader),
	}
	stdpkg["compress/flate"] = map[string]reflect.Value{
		"BestCompression":    reflect.ValueOf(i6.BestCompression),
		"BestSpeed":          reflect.ValueOf(i6.BestSpeed),
		"DefaultCompression": reflect.ValueOf(i6.DefaultCompression),
		"HuffmanOnly":        reflect.ValueOf(i6.HuffmanOnly),
		"NewReader":          reflect.ValueOf(i6.NewReader),
		"NewReaderDict":      reflect.ValueOf(i6.NewReaderDict),
		"NewWriter":          reflect.ValueOf(i6.NewWriter),
		"NewWriterDict":      reflect.ValueOf(i6.NewWriterDict),
		"NoCompression":      reflect.ValueOf(i6.NoCompression),
	}
	stdpkg["compress/gzip"] = map[string]reflect.Value{
		"BestCompression":    reflect.ValueOf(i7.BestCompression),
		"BestSpeed":          reflect.ValueOf(i7.BestSpeed),
		"DefaultCompression": reflect.ValueOf(i7.DefaultCompression),
		"ErrChecksum":        reflect.ValueOf(i7.ErrChecksum),
		"ErrHeader":          reflect.ValueOf(i7.ErrHeader),
		"HuffmanOnly":        reflect.ValueOf(i7.HuffmanOnly),
		"NewReader":          reflect.ValueOf(i7.NewReader),
		"NewWriter":          reflect.ValueOf(i7.NewWriter),
		"NewWriterLevel":     reflect.ValueOf(i7.NewWriterLevel),
		"NoCompression":      reflect.ValueOf(i7.NoCompression),
	}
	stdpkg["compress/lzw"] = map[string]reflect.Value{
		"LSB":       reflect.ValueOf(i8.LSB),
		"MSB":       reflect.ValueOf(i8.MSB),
		"NewReader": reflect.ValueOf(i8.NewReader),
		"NewWriter": reflect.ValueOf(i8.NewWriter),
	}
	stdpkg["compress/zlib"] = map[string]reflect.Value{
		"BestCompression":    reflect.ValueOf(i9.BestCompression),
		"BestSpeed":          reflect.ValueOf(i9.BestSpeed),
		"DefaultCompression": reflect.ValueOf(i9.DefaultCompression),
		"ErrChecksum":        reflect.ValueOf(i9.ErrChecksum),
		"ErrDictionary":      reflect.ValueOf(i9.ErrDictionary),
		"ErrHeader":          reflect.ValueOf(i9.ErrHeader),
		"HuffmanOnly":        reflect.ValueOf(i9.HuffmanOnly),
		"NewReader":          reflect.ValueOf(i9.NewReader),
		"NewReaderDict":      reflect.ValueOf(i9.NewReaderDict),
		"NewWriter":          reflect.ValueOf(i9.NewWriter),
		"NewWriterLevel":     reflect.ValueOf(i9.NewWriterLevel),
		"NewWriterLevelDict": reflect.ValueOf(i9.NewWriterLevelDict),
		"NoCompression":      reflect.ValueOf(i9.NoCompression),
	}
	stdpkg["container/heap"] = map[string]reflect.Value{
		"Fix":    reflect.ValueOf(i10.Fix),
		"Init":   reflect.ValueOf(i10.Init),
		"Pop":    reflect.ValueOf(i10.Pop),
		"Push":   reflect.ValueOf(i10.Push),
		"Remove": reflect.ValueOf(i10.Remove),
	}
	stdpkg["container/list"] = map[string]reflect.Value{
		"New": reflect.ValueOf(i11.New),
	}
	stdpkg["container/ring"] = map[string]reflect.Value{
		"New": reflect.ValueOf(i12.New),
	}
	stdpkg["context"] = map[string]reflect.Value{
		"AfterFunc":         reflect.ValueOf(i13.AfterFunc),
		"Background":        reflect.ValueOf(i13.Background),
		"Canceled":          reflect.ValueOf(i13.Canceled),
		"Cause":             reflect.ValueOf(i13.Cause),
		"DeadlineExceeded":  reflect.ValueOf(i13.DeadlineExceeded),
		"TODO":              reflect.ValueOf(i13.TODO),
		"WithCancel":        reflect.ValueOf(i13.WithCancel),
		"WithCancelCause":   reflect.ValueOf(i13.WithCancelCause),
		"WithDeadline":      reflect.ValueOf(i13.WithDeadline),
		"WithDeadlineCause": reflect.ValueOf(i13.WithDeadlineCause),
		"WithTimeout":       reflect.ValueOf(i13.WithTimeout),
		"WithTimeoutCause":  reflect.ValueOf(i13.WithTimeoutCause),
		"WithValue":         reflect.ValueOf(i13.WithValue),
		"WithoutCancel":     reflect.ValueOf(i13.WithoutCancel),
	}
	stdpkg["crypto"] = map[string]reflect.Value{
		"BLAKE2b_256":  reflect.ValueOf(i14.BLAKE2b_256),
		"BLAKE2b_384":  reflect.ValueOf(i14.BLAKE2b_384),
		"BLAKE2b_512":  reflect.ValueOf(i14.BLAKE2b_512),
		"BLAKE2s_256":  reflect.ValueOf(i14.BLAKE2s_256),
		"MD4":          reflect.ValueOf(i14.MD4),
		"MD5":          reflect.ValueOf(i14.MD5),
		"MD5SHA1":      reflect.ValueOf(i14.MD5SHA1),
		"RIPEMD160":    reflect.ValueOf(i14.RIPEMD160),
		"RegisterHash": reflect.ValueOf(i14.RegisterHash),
		"SHA1":         reflect.ValueOf(i14.SHA1),
		"SHA224":       reflect.ValueOf(i14.SHA224),
		"SHA256":       reflect.ValueOf(i14.SHA256),
		"SHA384":       reflect.ValueOf(i14.SHA384),
		"SHA3_224":     reflect.ValueOf(i14.SHA3_224),
		"SHA3_256":     reflect.ValueOf(i14.SHA3_256),
		"SHA3_384":     reflect.ValueOf(i14.SHA3_384),
		"SHA3_512":     reflect.ValueOf(i14.SHA3_512),
		"SHA512":       reflect.ValueOf(i14.SHA512),
		"SHA512_224":   reflect.ValueOf(i14.SHA512_224),
		"SHA512_256":   reflect.ValueOf(i14.SHA512_256),
		"SignMessage":  reflect.ValueOf(i14.SignMessage),
	}
	stdpkg["crypto/aes"] = map[string]reflect.Value{
		"BlockSize": reflect.ValueOf(i15.BlockSize),
		"NewCipher": reflect.ValueOf(i15.NewCipher),
	}
	stdpkg["crypto/cipher"] = map[string]reflect.Value{
		"NewCBCDecrypter":       reflect.ValueOf(i16.NewCBCDecrypter),
		"NewCBCEncrypter":       reflect.ValueOf(i16.NewCBCEncrypter),
		"NewCFBDecrypter":       reflect.ValueOf(i16.NewCFBDecrypter),
		"NewCFBEncrypter":       reflect.ValueOf(i16.NewCFBEncrypter),
		"NewCTR":                reflect.ValueOf(i16.NewCTR),
		"NewGCM":                reflect.ValueOf(i16.NewGCM),
		"NewGCMWithNonceSize":   reflect.ValueOf(i16.NewGCMWithNonceSize),
		"NewGCMWithRandomNonce": reflect.ValueOf(i16.NewGCMWithRandomNonce),
		"NewGCMWithTagSize":     reflect.ValueOf(i16.NewGCMWithTagSize),
		"NewOFB":                reflect.ValueOf(i16.NewOFB),
	}
	stdpkg["crypto/des"] = map[string]reflect.Value{
		"BlockSize":          reflect.ValueOf(i17.BlockSize),
		"NewCipher":          reflect.ValueOf(i17.NewCipher),
		"NewTripleDESCipher": reflect.ValueOf(i17.NewTripleDESCipher),
	}
	stdpkg["crypto/dsa"] = map[string]reflect.Value{
		"ErrInvalidPublicKey": reflect.ValueOf(i18.ErrInvalidPublicKey),
		"GenerateKey":         reflect.ValueOf(i18.GenerateKey),
		"GenerateParameters":  reflect.ValueOf(i18.GenerateParameters),
		"L1024N160":           reflect.ValueOf(i18.L1024N160),
		"L2048N224":           reflect.ValueOf(i18.L2048N224),
		"L2048N256":           reflect.ValueOf(i18.L2048N256),
		"L3072N256":           reflect.ValueOf(i18.L3072N256),
		"Sign":                reflect.ValueOf(i18.Sign),
		"Verify":              reflect.ValueOf(i18.Verify),
	}
	stdpkg["crypto/ecdsa"] = map[string]reflect.Value{
		"GenerateKey":                reflect.ValueOf(i19.GenerateKey),
		"ParseRawPrivateKey":         reflect.ValueOf(i19.ParseRawPrivateKey),
		"ParseUncompressedPublicKey": reflect.ValueOf(i19.ParseUncompressedPublicKey),
		"Sign":                       reflect.ValueOf(i19.Sign),
		"SignASN1":                   reflect.ValueOf(i19.SignASN1),
		"Verify":                     reflect.ValueOf(i19.Verify),
		"VerifyASN1":                 reflect.ValueOf(i19.VerifyASN1),
	}
	stdpkg["crypto/ed25519"] = map[string]reflect.Value{
		"GenerateKey":       reflect.ValueOf(i20.GenerateKey),
		"NewKeyFromSeed":    reflect.ValueOf(i20.NewKeyFromSeed),
		"PrivateKeySize":    reflect.ValueOf(i20.PrivateKeySize),
		"PublicKeySize":     reflect.ValueOf(i20.PublicKeySize),
		"SeedSize":          reflect.ValueOf(i20.SeedSize),
		"Sign":              reflect.ValueOf(i20.Sign),
		"SignatureSize":     reflect.ValueOf(i20.SignatureSize),
		"Verify":            reflect.ValueOf(i20.Verify),
		"VerifyWithOptions": reflect.ValueOf(i20.VerifyWithOptions),
	}
	stdpkg["crypto/elliptic"] = map[string]reflect.Value{
		"GenerateKey":         reflect.ValueOf(i21.GenerateKey),
		"Marshal":             reflect.ValueOf(i21.Marshal),
		"MarshalCompressed":   reflect.ValueOf(i21.MarshalCompressed),
		"P224":                reflect.ValueOf(i21.P224),
		"P256":                reflect.ValueOf(i21.P256),
		"P384":                reflect.ValueOf(i21.P384),
		"P521":                reflect.ValueOf(i21.P521),
		"Unmarshal":           reflect.ValueOf(i21.Unmarshal),
		"UnmarshalCompressed": reflect.ValueOf(i21.UnmarshalCompressed),
	}
	stdpkg["crypto/hmac"] = map[string]reflect.Value{
		"Equal": reflect.ValueOf(i22.Equal),
		"New":   reflect.ValueOf(i22.New),
	}
	stdpkg["crypto/md5"] = map[string]reflect.Value{
		"BlockSize": reflect.ValueOf(i23.BlockSize),
		"New":       reflect.ValueOf(i23.New),
		"Size":      reflect.ValueOf(i23.Size),
		"Sum":       reflect.ValueOf(i23.Sum),
	}
	stdpkg["crypto/rand"] = map[string]reflect.Value{
		"Int":    reflect.ValueOf(i24.Int),
		"Prime":  reflect.ValueOf(i24.Prime),
		"Read":   reflect.ValueOf(i24.Read),
		"Reader": reflect.ValueOf(i24.Reader),
		"Text":   reflect.ValueOf(i24.Text),
	}
	stdpkg["crypto/rc4"] = map[string]reflect.Value{
		"NewCipher": reflect.ValueOf(i25.NewCipher),
	}
	stdpkg["crypto/rsa"] = map[string]reflect.Value{
		"DecryptOAEP":               reflect.ValueOf(i26.DecryptOAEP),
		"DecryptPKCS1v15":           reflect.ValueOf(i26.DecryptPKCS1v15),
		"DecryptPKCS1v15SessionKey": reflect.ValueOf(i26.DecryptPKCS1v15SessionKey),
		"EncryptOAEP":               reflect.ValueOf(i26.EncryptOAEP),
		"EncryptPKCS1v15":           reflect.ValueOf(i26.EncryptPKCS1v15),
		"ErrDecryption":             reflect.ValueOf(i26.ErrDecryption),
		"ErrMessageTooLong":         reflect.ValueOf(i26.ErrMessageTooLong),
		"ErrVerification":           reflect.ValueOf(i26.ErrVerification),
		"GenerateKey":               reflect.ValueOf(i26.GenerateKey),
		"GenerateMultiPrimeKey":     reflect.ValueOf(i26.GenerateMultiPrimeKey),
		"PSSSaltLengthAuto":         reflect.ValueOf(i26.PSSSaltLengthAuto),
		"PSSSaltLengthEqualsHash":   reflect.ValueOf(i26.PSSSaltLengthEqualsHash),
		"SignPKCS1v15":              reflect.ValueOf(i26.SignPKCS1v15),
		"SignPSS":                   reflect.ValueOf(i26.SignPSS),
		"VerifyPKCS1v15":            reflect.ValueOf(i26.VerifyPKCS1v15),
		"VerifyPSS":                 reflect.ValueOf(i26.VerifyPSS),
	}
	stdpkg["crypto/sha1"] = map[string]reflect.Value{
		"BlockSize": reflect.ValueOf(i27.BlockSize),
		"New":       reflect.ValueOf(i27.New),
		"Size":      reflect.ValueOf(i27.Size),
		"Sum":       reflect.ValueOf(i27.Sum),
	}
	stdpkg["crypto/sha256"] = map[string]reflect.Value{
		"BlockSize": reflect.ValueOf(i28.BlockSize),
		"New":       reflect.ValueOf(i28.New),
		"New224":    reflect.ValueOf(i28.New224),
		"Size":      reflect.ValueOf(i28.Size),
		"Size224":   reflect.ValueOf(i28.Size224),
		"Sum224":    reflect.ValueOf(i28.Sum224),
		"Sum256":    reflect.ValueOf(i28.Sum256),
	}
	stdpkg["crypto/sha512"] = map[string]reflect.Value{
		"BlockSize":  reflect.ValueOf(i29.BlockSize),
		"New":        reflect.ValueOf(i29.New),
		"New384":     reflect.ValueOf(i29.New384),
		"New512_224": reflect.ValueOf(i29.New512_224),
		"New512_256": reflect.ValueOf(i29.New512_256),
		"Size":       reflect.ValueOf(i29.Size),
		"Size224":    reflect.ValueOf(i29.Size224),
		"Size256":    reflect.ValueOf(i29.Size256),
		"Size384":    reflect.ValueOf(i29.Size384),
		"Sum384":     reflect.ValueOf(i29.Sum384),
		"Sum512":     reflect.ValueOf(i29.Sum512),
		"Sum512_224": reflect.ValueOf(i29.Sum512_224),
		"Sum512_256": reflect.ValueOf(i29.Sum512_256),
	}
	stdpkg["crypto/subtle"] = map[string]reflect.Value{
		"ConstantTimeByteEq":        reflect.ValueOf(i30.ConstantTimeByteEq),
		"ConstantTimeCompare":       reflect.ValueOf(i30.ConstantTimeCompare),
		"ConstantTimeCopy":          reflect.ValueOf(i30.ConstantTimeCopy),
		"ConstantTimeEq":            reflect.ValueOf(i30.ConstantTimeEq),
		"ConstantTimeLessOrEq":      reflect.ValueOf(i30.ConstantTimeLessOrEq),
		"ConstantTimeSelect":        reflect.ValueOf(i30.ConstantTimeSelect),
		"WithDataIndependentTiming": reflect.ValueOf(i30.WithDataIndependentTiming),
		"XORBytes":                  reflect.ValueOf(i30.XORBytes),
	}
	stdpkg["crypto/tls"] = map[string]reflect.Value{
		"CipherSuiteName":                               reflect.ValueOf(i31.CipherSuiteName),
		"CipherSuites":                                  reflect.ValueOf(i31.CipherSuites),
		"Client":                                        reflect.ValueOf(i31.Client),
		"CurveP256":                                     reflect.ValueOf(i31.CurveP256),
		"CurveP384":                                     reflect.ValueOf(i31.CurveP384),
		"CurveP521":                                     reflect.ValueOf(i31.CurveP521),
		"Dial":                                          reflect.ValueOf(i31.Dial),
		"DialWithDialer":                                reflect.ValueOf(i31.DialWithDialer),
		"ECDSAWithP256AndSHA256":                        reflect.ValueOf(i31.ECDSAWithP256AndSHA256),
		"ECDSAWithP384AndSHA384":                        reflect.ValueOf(i31.ECDSAWithP384AndSHA384),
		"ECDSAWithP521AndSHA512":                        reflect.ValueOf(i31.ECDSAWithP521AndSHA512),
		"ECDSAWithSHA1":                                 reflect.ValueOf(i31.ECDSAWithSHA1),
		"Ed25519":                                       reflect.ValueOf(i31.Ed25519),
		"InsecureCipherSuites":                          reflect.ValueOf(i31.InsecureCipherSuites),
		"Listen":                                        reflect.ValueOf(i31.Listen),
		"LoadX509KeyPair":                               reflect.ValueOf(i31.LoadX509KeyPair),
		"NewLRUClientSessionCache":                      reflect.ValueOf(i31.NewLRUClientSessionCache),
		"NewListener":                                   reflect.ValueOf(i31.NewListener),
		"NewResumptionState":                            reflect.ValueOf(i31.NewResumptionState),
		"NoClientCert":                                  reflect.ValueOf(i31.NoClientCert),
		"PKCS1WithSHA1":                                 reflect.ValueOf(i31.PKCS1WithSHA1),
		"PKCS1WithSHA256":                               reflect.ValueOf(i31.PKCS1WithSHA256),
		"PKCS1WithSHA384":                               reflect.ValueOf(i31.PKCS1WithSHA384),
		"PKCS1WithSHA512":                               reflect.ValueOf(i31.PKCS1WithSHA512),
		"PSSWithSHA256":                                 reflect.ValueOf(i31.PSSWithSHA256),
		"PSSWithSHA384":                                 reflect.ValueOf(i31.PSSWithSHA384),
		"PSSWithSHA512":                                 reflect.ValueOf(i31.PSSWithSHA512),
		"ParseSessionState":                             reflect.ValueOf(i31.ParseSessionState),
		"QUICClient":                                    reflect.ValueOf(i31.QUICClient),
		"QUICEncryptionLevelApplication":                reflect.ValueOf(i31.QUICEncryptionLevelApplication),
		"QUICEncryptionLevelEarly":                      reflect.ValueOf(i31.QUICEncryptionLevelEarly),
		"QUICEncryptionLevelHandshake":                  reflect.ValueOf(i31.QUICEncryptionLevelHandshake),
		"QUICEncryptionLevelInitial":                    reflect.ValueOf(i31.QUICEncryptionLevelInitial),
		"QUICHandshakeDone":                             reflect.ValueOf(i31.QUICHandshakeDone),
		"QUICNoEvent":                                   reflect.ValueOf(i31.QUICNoEvent),
		"QUICRejectedEarlyData":                         reflect.ValueOf(i31.QUICRejectedEarlyData),
		"QUICResumeSession":                             reflect.ValueOf(i31.QUICResumeSession),
		"QUICServer":                                    reflect.ValueOf(i31.QUICServer),
		"QUICSetReadSecret":                             reflect.ValueOf(i31.QUICSetReadSecret),
		"QUICSetWriteSecret":                            reflect.ValueOf(i31.QUICSetWriteSecret),
		"QUICStoreSession":                              reflect.ValueOf(i31.QUICStoreSession),
		"QUICTransportParameters":                       reflect.ValueOf(i31.QUICTransportParameters),
		"QUICTransportParametersRequired":               reflect.ValueOf(i31.QUICTransportParametersRequired),
		"QUICWriteData":                                 reflect.ValueOf(i31.QUICWriteData),
		"RenegotiateFreelyAsClient":                     reflect.ValueOf(i31.RenegotiateFreelyAsClient),
		"RenegotiateNever":                              reflect.ValueOf(i31.RenegotiateNever),
		"RenegotiateOnceAsClient":                       reflect.ValueOf(i31.RenegotiateOnceAsClient),
		"RequestClientCert":                             reflect.ValueOf(i31.RequestClientCert),
		"RequireAndVerifyClientCert":                    reflect.ValueOf(i31.RequireAndVerifyClientCert),
		"RequireAnyClientCert":                          reflect.ValueOf(i31.RequireAnyClientCert),
		"Server":                                        reflect.ValueOf(i31.Server),
		"TLS_AES_128_GCM_SHA256":                        reflect.ValueOf(i31.TLS_AES_128_GCM_SHA256),
		"TLS_AES_256_GCM_SHA384":                        reflect.ValueOf(i31.TLS_AES_256_GCM_SHA384),
		"TLS_CHACHA20_POLY1305_SHA256":                  reflect.ValueOf(i31.TLS_CHACHA20_POLY1305_SHA256),
		"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA":          reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA),
		"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256":       reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256),
		"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256":       reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256),
		"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA":          reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA),
		"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384":       reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384),
		"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305":        reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305),
		"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256": reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256),
		"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA":              reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA),
		"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA":           reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA),
		"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA":            reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA),
		"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256":         reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256),
		"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256":         reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256),
		"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA":            reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA),
		"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384":         reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384),
		"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305":          reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305),
		"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256":   reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256),
		"TLS_ECDHE_RSA_WITH_RC4_128_SHA":                reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_RC4_128_SHA),
		"TLS_FALLBACK_SCSV":                             reflect.ValueOf(i31.TLS_FALLBACK_SCSV),
		"TLS_RSA_WITH_3DES_EDE_CBC_SHA":                 reflect.ValueOf(i31.TLS_RSA_WITH_3DES_EDE_CBC_SHA),
		"TLS_RSA_WITH_AES_128_CBC_SHA":                  reflect.ValueOf(i31.TLS_RSA_WITH_AES_128_CBC_SHA),
		"TLS_RSA_WITH_AES_128_CBC_SHA256":               reflect.ValueOf(i31.TLS_RSA_WITH_AES_128_CBC_SHA256),
		"TLS_RSA_WITH_AES_128_GCM_SHA256":               reflect.ValueOf(i31.TLS_RSA_WITH_AES_128_GCM_SHA256),
		"TLS_RSA_WITH_AES_256_CBC_SHA":                  reflect.ValueOf(i31.TLS_RSA_WITH_AES_256_CBC_SHA),
		"TLS_RSA_WITH_AES_256_GCM_SHA384":               reflect.ValueOf(i31.TLS_RSA_WITH_AES_256_GCM_SHA384),
		"TLS_RSA_WITH_RC4_128_SHA":                      reflect.ValueOf(i31.TLS_RSA_WITH_RC4_128_SHA),
		"VerifyClientCertIfGiven":                       reflect.ValueOf(i31.VerifyClientCertIfGiven),
		"VersionName":                                   reflect.ValueOf(i31.VersionName),
		"VersionSSL30":                                  reflect.ValueOf(i31.VersionSSL30),
		"VersionTLS10":                                  reflect.ValueOf(i31.VersionTLS10),
		"VersionTLS11":                                  reflect.ValueOf(i31.VersionTLS11),
		"VersionTLS12":                                  reflect.ValueOf(i31.VersionTLS12),
		"VersionTLS13":                                  reflect.ValueOf(i31.VersionTLS13),
		"X25519":                                        reflect.ValueOf(i31.X25519),
		"X25519MLKEM768":                                reflect.ValueOf(i31.X25519MLKEM768),
		"X509KeyPair":                                   reflect.ValueOf(i31.X509KeyPair),
	}
	stdpkg["crypto/x509"] = map[string]reflect.Value{
		"CANotAuthorizedForExtKeyUsage":             reflect.ValueOf(i32.CANotAuthorizedForExtKeyUsage),
		"CANotAuthorizedForThisName":                reflect.ValueOf(i32.CANotAuthorizedForThisName),
		"CreateCertificate":                         reflect.ValueOf(i32.CreateCertificate),
		"CreateCertificateRequest":                  reflect.ValueOf(i32.CreateCertificateRequest),
		"CreateRevocationList":                      reflect.ValueOf(i32.CreateRevocationList),
		"DSA":                                       reflect.ValueOf(i32.DSA),
		"DSAWithSHA1":                               reflect.ValueOf(i32.DSAWithSHA1),
		"DSAWithSHA256":                             reflect.ValueOf(i32.DSAWithSHA256),
		"DecryptPEMBlock":                           reflect.ValueOf(i32.DecryptPEMBlock),
		"ECDSA":                                     reflect.ValueOf(i32.ECDSA),
		"ECDSAWithSHA1":                             reflect.ValueOf(i32.ECDSAWithSHA1),
		"ECDSAWithSHA256":                           reflect.ValueOf(i32.ECDSAWithSHA256),
		"ECDSAWithSHA384":                           reflect.ValueOf(i32.ECDSAWithSHA384),
		"ECDSAWithSHA512":                           reflect.ValueOf(i32.ECDSAWithSHA512),
		"Ed25519":                                   reflect.ValueOf(i32.Ed25519),
		"EncryptPEMBlock":                           reflect.ValueOf(i32.EncryptPEMBlock),
		"ErrUnsupportedAlgorithm":                   reflect.ValueOf(i32.ErrUnsupportedAlgorithm),
		"Expired":                                   reflect.ValueOf(i32.Expired),
		"ExtKeyUsageAny":                            reflect.ValueOf(i32.ExtKeyUsageAny),
		"ExtKeyUsageClientAuth":                     reflect.ValueOf(i32.ExtKeyUsageClientAuth),
		"ExtKeyUsageCodeSigning":                    reflect.ValueOf(i32.ExtKeyUsageCodeSigning),
		"ExtKeyUsageEmailProtection":                reflect.ValueOf(i32.ExtKeyUsageEmailProtection),
		"ExtKeyUsageIPSECEndSystem":                 reflect.ValueOf(i32.ExtKeyUsageIPSECEndSystem),
		"ExtKeyUsageIPSECTunnel":                    reflect.ValueOf(i32.ExtKeyUsageIPSECTunnel),
		"ExtKeyUsageIPSECUser":                      reflect.ValueOf(i32.ExtKeyUsageIPSECUser),
		"ExtKeyUsageMicrosoftCommercialCodeSigning": reflect.ValueOf(i32.ExtKeyUsageMicrosoftCommercialCodeSigning),
		"ExtKeyUsageMicrosoftKernelCodeSigning":     reflect.ValueOf(i32.ExtKeyUsageMicrosoftKernelCodeSigning),
		"ExtKeyUsageMicrosoftServerGatedCrypto":     reflect.ValueOf(i32.ExtKeyUsageMicrosoftServerGatedCrypto),
		"ExtKeyUsageNetscapeServerGatedCrypto":      reflect.ValueOf(i32.ExtKeyUsageNetscapeServerGatedCrypto),
		"ExtKeyUsageOCSPSigning":                    reflect.ValueOf(i32.ExtKeyUsageOCSPSigning),
		"ExtKeyUsageServerAuth":                     reflect.ValueOf(i32.ExtKeyUsageServerAuth),
		"ExtKeyUsageTimeStamping":                   reflect.ValueOf(i32.ExtKeyUsageTimeStamping),
		"IncompatibleUsage":                         reflect.ValueOf(i32.IncompatibleUsage),
		"IncorrectPasswordError":                    reflect.ValueOf(i32.IncorrectPasswordError),
		"IsEncryptedPEMBlock":                       reflect.ValueOf(i32.IsEncryptedPEMBlock),
		"KeyUsageCRLSign":                           reflect.ValueOf(i32.KeyUsageCRLSign),
		"KeyUsageCertSign":                          reflect.ValueOf(i32.KeyUsageCertSign),
		"KeyUsageContentCommitment":                 reflect.ValueOf(i32.KeyUsageContentCommitment),
		"KeyUsageDataEncipherment":                  reflect.ValueOf(i32.KeyUsageDataEncipherment),
		"KeyUsageDecipherOnly":                      reflect.ValueOf(i32.KeyUsageDecipherOnly),
		"KeyUsageDigitalSignature":                  reflect.ValueOf(i32.KeyUsageDigitalSignature),
		"KeyUsageEncipherOnly":                      reflect.ValueOf(i32.KeyUsageEncipherOnly),
		"KeyUsageKeyAgreement":                      reflect.ValueOf(i32.KeyUsageKeyAgreement),
		"KeyUsageKeyEncipherment":                   reflect.ValueOf(i32.KeyUsageKeyEncipherment),
		"MD2WithRSA":                                reflect.ValueOf(i32.MD2WithRSA),
		"MD5WithRSA":                                reflect.ValueOf(i32.MD5WithRSA),
		"MarshalECPrivateKey":                       reflect.ValueOf(i32.MarshalECPrivateKey),
		"MarshalPKCS1PrivateKey":                    reflect.ValueOf(i32.MarshalPKCS1PrivateKey),
		"MarshalPKCS1PublicKey":                     reflect.ValueOf(i32.MarshalPKCS1PublicKey),
		"MarshalPKCS8PrivateKey":                    reflect.ValueOf(i32.MarshalPKCS8PrivateKey),
		"MarshalPKIXPublicKey":                      reflect.ValueOf(i32.MarshalPKIXPublicKey),
		"NameConstraintsWithoutSANs":                reflect.ValueOf(i32.NameConstraintsWithoutSANs),
		"NameMismatch":                              reflect.ValueOf(i32.NameMismatch),
		"NewCertPool":                               reflect.ValueOf(i32.NewCertPool),
		"NoValidChains":                             reflect.ValueOf(i32.NoValidChains),
		"NotAuthorizedToSign":                       reflect.ValueOf(i32.NotAuthorizedToSign),
		"OIDFromInts":                               reflect.ValueOf(i32.OIDFromInts),
		"PEMCipher3DES":                             reflect.ValueOf(i32.PEMCipher3DES),
		"PEMCipherAES128":                           reflect.ValueOf(i32.PEMCipherAES128),
		"PEMCipherAES192":                           reflect.ValueOf(i32.PEMCipherAES192),
		"PEMCipherAES256":                           reflect.ValueOf(i32.PEMCipherAES256),
		"PEMCipherDES":                              reflect.ValueOf(i32.PEMCipherDES),
		"ParseCRL":                                  reflect.ValueOf(i32.ParseCRL),
		"ParseCertificate":                          reflect.ValueOf(i32.ParseCertificate),
		"ParseCertificateRequest":                   reflect.ValueOf(i32.ParseCertificateRequest),
		"ParseCertificates":                         reflect.ValueOf(i32.ParseCertificates),
		"ParseDERCRL":                               reflect.ValueOf(i32.ParseDERCRL),
		"ParseECPrivateKey":                         reflect.ValueOf(i32.ParseECPrivateKey),
		"ParseOID":                                  reflect.ValueOf(i32.ParseOID),
		"ParsePKCS1PrivateKey":                      reflect.ValueOf(i32.ParsePKCS1PrivateKey),
		"ParsePKCS1PublicKey":                       reflect.ValueOf(i32.ParsePKCS1PublicKey),
		"ParsePKCS8PrivateKey":                      reflect.ValueOf(i32.ParsePKCS8PrivateKey),
		"ParsePKIXPublicKey":                        reflect.ValueOf(i32.ParsePKIXPublicKey),
		"ParseRevocationList":                       reflect.ValueOf(i32.ParseRevocationList),
		"PureEd25519":                               reflect.ValueOf(i32.PureEd25519),
		"RSA":                                       reflect.ValueOf(i32.RSA),
		"SHA1WithRSA":                               reflect.ValueOf(i32.SHA1WithRSA),
		"SHA256WithRSA":                             reflect.ValueOf(i32.SHA256WithRSA),
		"SHA256WithRSAPSS":                          reflect.ValueOf(i32.SHA256WithRSAPSS),
		"SHA384WithRSA":                             reflect.ValueOf(i32.SHA384WithRSA),
		"SHA384WithRSAPSS":                          reflect.ValueOf(i32.SHA384WithRSAPSS),
		"SHA512WithRSA":                             reflect.ValueOf(i32.SHA512WithRSA),
		"SHA512WithRSAPSS":                          reflect.ValueOf(i32.SHA512WithRSAPSS),
		"SetFallbackRoots":                          reflect.ValueOf(i32.SetFallbackRoots),
		"SystemCertPool":                            reflect.ValueOf(i32.SystemCertPool),
		"TooManyConstraints":                        reflect.ValueOf(i32.TooManyConstraints),
		"TooManyIntermediates":                      reflect.ValueOf(i32.TooManyIntermediates),
		"UnconstrainedName":                         reflect.ValueOf(i32.UnconstrainedName),
		"UnknownPublicKeyAlgorithm":                 reflect.ValueOf(i32.UnknownPublicKeyAlgorithm),
		"UnknownSignatureAlgorithm":                 reflect.ValueOf(i32.UnknownSignatureAlgorithm),
	}
	stdpkg["database/sql"] = map[string]reflect.Value{
		"Drivers":              reflect.ValueOf(i33.Drivers),
		"ErrConnDone":          reflect.ValueOf(i33.ErrConnDone),
		"ErrNoRows":            reflect.ValueOf(i33.ErrNoRows),
		"ErrTxDone":            reflect.ValueOf(i33.ErrTxDone),
		"LevelDefault":         reflect.ValueOf(i33.LevelDefault),
		"LevelLinearizable":    reflect.ValueOf(i33.LevelLinearizable),
		"LevelReadCommitted":   reflect.ValueOf(i33.LevelReadCommitted),
		"LevelReadUncommitted": reflect.ValueOf(i33.LevelReadUncommitted),
		"LevelRepeatableRead":  reflect.ValueOf(i33.LevelRepeatableRead),
		"LevelSerializable":    reflect.ValueOf(i33.LevelSerializable),
		"LevelSnapshot":        reflect.ValueOf(i33.LevelSnapshot),
		"LevelWriteCommitted":  reflect.ValueOf(i33.LevelWriteCommitted),
		"Named":                reflect.ValueOf(i33.Named),
		"Open":                 reflect.ValueOf(i33.Open),
		"OpenDB":               reflect.ValueOf(i33.OpenDB),
		"Register":             reflect.ValueOf(i33.Register),
	}
	stdpkg["database/sql/driver"] = map[string]reflect.Value{
		"Bool":                      reflect.ValueOf(i34.Bool),
		"DefaultParameterConverter": reflect.ValueOf(i34.DefaultParameterConverter),
		"ErrBadConn":                reflect.ValueOf(i34.ErrBadConn),
		"ErrRemoveArgument":         reflect.ValueOf(i34.ErrRemoveArgument),
		"ErrSkip":                   reflect.ValueOf(i34.ErrSkip),
		"Int32":                     reflect.ValueOf(i34.Int32),
		"IsScanValue":               reflect.ValueOf(i34.IsScanValue),
		"IsValue":                   reflect.ValueOf(i34.IsValue),
		"ResultNoRows":              reflect.ValueOf(i34.ResultNoRows),
		"String":                    reflect.ValueOf(i34.String),
	}
	stdpkg["encoding/ascii85"] = map[string]reflect.Value{
		"Decode":        reflect.ValueOf(i35.Decode),
		"Encode":        reflect.ValueOf(i35.Encode),
		"MaxEncodedLen": reflect.ValueOf(i35.MaxEncodedLen),
		"NewDecoder":    reflect.ValueOf(i35.NewDecoder),
		"NewEncoder":    reflect.ValueOf(i35.NewEncoder),
	}
	stdpkg["encoding/asn1"] = map[string]reflect.Value{
		"ClassApplication":     reflect.ValueOf(i36.ClassApplication),
		"ClassContextSpecific": reflect.ValueOf(i36.ClassContextSpecific),
		"ClassPrivate":         reflect.ValueOf(i36.ClassPrivate),
		"ClassUniversal":       reflect.ValueOf(i36.ClassUniversal),
		"Marshal":              reflect.ValueOf(i36.Marshal),
		"MarshalWithParams":    reflect.ValueOf(i36.MarshalWithParams),
		"NullBytes":            reflect.ValueOf(i36.NullBytes),
		"NullRawValue":         reflect.ValueOf(i36.NullRawValue),
		"TagBMPString":         reflect.ValueOf(i36.TagBMPString),
		"TagBitString":         reflect.ValueOf(i36.TagBitString),
		"TagBoolean":           reflect.ValueOf(i36.TagBoolean),
		"TagEnum":              reflect.ValueOf(i36.TagEnum),
		"TagGeneralString":     reflect.ValueOf(i36.TagGeneralString),
		"TagGeneralizedTime":   reflect.ValueOf(i36.TagGeneralizedTime),
		"TagIA5String":         reflect.ValueOf(i36.TagIA5String),
		"TagInteger":           reflect.ValueOf(i36.TagInteger),
		"TagNull":              reflect.ValueOf(i36.TagNull),
		"TagNumericString":     reflect.ValueOf(i36.TagNumericString),
		"TagOID":               reflect.ValueOf(i36.TagOID),
		"TagOctetString":       reflect.ValueOf(i36.TagOctetString),
		"TagPrintableString":   reflect.ValueOf(i36.TagPrintableString),
		"TagSequence":          reflect.ValueOf(i36.TagSequence),
		"TagSet":               reflect.ValueOf(i36.TagSet),
		"TagT61String":         reflect.ValueOf(i36.TagT61String),
		"TagUTCTime":           reflect.ValueOf(i36.TagUTCTime),
		"TagUTF8String":        reflect.ValueOf(i36.TagUTF8String),
		"Unmarshal":            reflect.ValueOf(i36.Unmarshal),
		"UnmarshalWithParams":  reflect.ValueOf(i36.UnmarshalWithParams),
	}
	stdpkg["encoding/base32"] = map[string]reflect.Value{
		"HexEncoding": reflect.ValueOf(i37.HexEncoding),
		"NewDecoder":  reflect.ValueOf(i37.NewDecoder),
		"NewEncoder":  reflect.ValueOf(i37.NewEncoder),
		"NewEncoding": reflect.ValueOf(i37.NewEncoding),
		"NoPadding":   reflect.ValueOf(i37.NoPadding),
		"StdEncoding": reflect.ValueOf(i37.StdEncoding),
		"StdPadding":  reflect.ValueOf(i37.StdPadding),
	}
	stdpkg["encoding/base64"] = map[string]reflect.Value{
		"NewDecoder":     reflect.ValueOf(i38.NewDecoder),
		"NewEncoder":     reflect.ValueOf(i38.NewEncoder),
		"NewEncoding":    reflect.ValueOf(i38.NewEncoding),
		"NoPadding":      reflect.ValueOf(i38.NoPadding),
		"RawStdEncoding": reflect.ValueOf(i38.RawStdEncoding),
		"RawURLEncoding": reflect.ValueOf(i38.RawURLEncoding),
		"StdEncoding":    reflect.ValueOf(i38.StdEncoding),
		"StdPadding":     reflect.ValueOf(i38.StdPadding),
		"URLEncoding":    reflect.ValueOf(i38.URLEncoding),
	}
	stdpkg["encoding/binary"] = map[string]reflect.Value{
		"Append":         reflect.ValueOf(i39.Append),
		"AppendUvarint":  reflect.ValueOf(i39.AppendUvarint),
		"AppendVarint":   reflect.ValueOf(i39.AppendVarint),
		"BigEndian":      reflect.ValueOf(i39.BigEndian),
		"Decode":         reflect.ValueOf(i39.Decode),
		"Encode":         reflect.ValueOf(i39.Encode),
		"LittleEndian":   reflect.ValueOf(i39.LittleEndian),
		"MaxVarintLen16": reflect.ValueOf(i39.MaxVarintLen16),
		"MaxVarintLen32": reflect.ValueOf(i39.MaxVarintLen32),
		"MaxVarintLen64": reflect.ValueOf(i39.MaxVarintLen64),
		"NativeEndian":   reflect.ValueOf(i39.NativeEndian),
		"PutUvarint":     reflect.ValueOf(i39.PutUvarint),
		"PutVarint":      reflect.ValueOf(i39.PutVarint),
		"Read":           reflect.ValueOf(i39.Read),
		"ReadUvarint":    reflect.ValueOf(i39.ReadUvarint),
		"ReadVarint":     reflect.ValueOf(i39.ReadVarint),
		"Size":           reflect.ValueOf(i39.Size),
		"Uvarint":        reflect.ValueOf(i39.Uvarint),
		"Varint":         reflect.ValueOf(i39.Varint),
		"Write":          reflect.ValueOf(i39.Write),
	}
	stdpkg["encoding/csv"] = map[string]reflect.Value{
		"ErrBareQuote":     reflect.ValueOf(i40.ErrBareQuote),
		"ErrFieldCount":    reflect.ValueOf(i40.ErrFieldCount),
		"ErrQuote":         reflect.ValueOf(i40.ErrQuote),
		"ErrTrailingComma": reflect.ValueOf(i40.ErrTrailingComma),
		"NewReader":        reflect.ValueOf(i40.NewReader),
		"NewWriter":        reflect.ValueOf(i40.NewWriter),
	}
	stdpkg["encoding/gob"] = map[string]reflect.Value{
		"NewDecoder":   reflect.ValueOf(i41.NewDecoder),
		"NewEncoder":   reflect.ValueOf(i41.NewEncoder),
		"Register":     reflect.ValueOf(i41.Register),
		"RegisterName": reflect.ValueOf(i41.RegisterName),
	}
	stdpkg["encoding/hex"] = map[string]reflect.Value{
		"AppendDecode":   reflect.ValueOf(i42.AppendDecode),
		"AppendEncode":   reflect.ValueOf(i42.AppendEncode),
		"Decode":         reflect.ValueOf(i42.Decode),
		"DecodeString":   reflect.ValueOf(i42.DecodeString),
		"DecodedLen":     reflect.ValueOf(i42.DecodedLen),
		"Dump":           reflect.ValueOf(i42.Dump),
		"Dumper":         reflect.ValueOf(i42.Dumper),
		"Encode":         reflect.ValueOf(i42.Encode),
		"EncodeToString": reflect.ValueOf(i42.EncodeToString),
		"EncodedLen":     reflect.ValueOf(i42.EncodedLen),
		"ErrLength":      reflect.ValueOf(i42.ErrLength),
		"NewDecoder":     reflect.ValueOf(i42.NewDecoder),
		"NewEncoder":     reflect.ValueOf(i42.NewEncoder),
	}
	stdpkg["encoding/json"] = map[string]reflect.Value{
		"Compact":       reflect.ValueOf(i43.Compact),
		"HTMLEscape":    reflect.ValueOf(i43.HTMLEscape),
		"Indent":        reflect.ValueOf(i43.Indent),
		"Marshal":       reflect.ValueOf(i43.Marshal),
		"MarshalIndent": reflect.ValueOf(i43.MarshalIndent),
		"NewDecoder":    reflect.ValueOf(i43.NewDecoder),
		"NewEncoder":    reflect.ValueOf(i43.NewEncoder),
		"Unmarshal":     reflect.ValueOf(i43.Unmarshal),
		"Valid":         reflect.ValueOf(i43.Valid),
	}
	stdpkg["encoding/pem"] = map[string]reflect.Value{
		"Decode":         reflect.ValueOf(i44.Decode),
		"Encode":         reflect.ValueOf(i44.Encode),
		"EncodeToMemory": reflect.ValueOf(i44.EncodeToMemory),
	}
	stdpkg["encoding/xml"] = map[string]reflect.Value{
		"CopyToken":       reflect.ValueOf(i45.CopyToken),
		"Escape":          reflect.ValueOf(i45.Escape),
		"EscapeText":      reflect.ValueOf(i45.EscapeText),
		"HTMLAutoClose":   reflect.ValueOf(i45.HTMLAutoClose),
		"HTMLEntity":      reflect.ValueOf(i45.HTMLEntity),
		"Header":          reflect.ValueOf(i45.Header),
		"Marshal":         reflect.ValueOf(i45.Marshal),
		"MarshalIndent":   reflect.ValueOf(i45.MarshalIndent),
		"NewDecoder":      reflect.ValueOf(i45.NewDecoder),
		"NewEncoder":      reflect.ValueOf(i45.NewEncoder),
		"NewTokenDecoder": reflect.ValueOf(i45.NewTokenDecoder),
		"Unmarshal":       reflect.ValueOf(i45.Unmarshal),
	}
	stdpkg["errors"] = map[string]reflect.Value{
		"As":             reflect.ValueOf(i46.As),
		"ErrUnsupported": reflect.ValueOf(i46.ErrUnsupported),
		"Is":             reflect.ValueOf(i46.Is),
		"Join":           reflect.ValueOf(i46.Join),
		"New":            reflect.ValueOf(i46.New),
		"Unwrap":         reflect.ValueOf(i46.Unwrap),
	}
	stdpkg["expvar"] = map[string]reflect.Value{
		"Do":        reflect.ValueOf(i47.Do),
		"Get":       reflect.ValueOf(i47.Get),
		"Handler":   reflect.ValueOf(i47.Handler),
		"NewFloat":  reflect.ValueOf(i47.NewFloat),
		"NewInt":    reflect.ValueOf(i47.NewInt),
		"NewMap":    reflect.ValueOf(i47.NewMap),
		"NewString": reflect.ValueOf(i47.NewString),
		"Publish":   reflect.ValueOf(i47.Publish),
	}
	stdpkg["flag"] = map[string]reflect.Value{
		"Arg":             reflect.ValueOf(i48.Arg),
		"Args":            reflect.ValueOf(i48.Args),
		"Bool":            reflect.ValueOf(i48.Bool),
		"BoolFunc":        reflect.ValueOf(i48.BoolFunc),
		"BoolVar":         reflect.ValueOf(i48.BoolVar),
		"CommandLine":     reflect.ValueOf(i48.CommandLine),
		"ContinueOnError": reflect.ValueOf(i48.ContinueOnError),
		"Duration":        reflect.ValueOf(i48.Duration),
		"DurationVar":     reflect.ValueOf(i48.DurationVar),
		"ErrHelp":         reflect.ValueOf(i48.ErrHelp),
		"ExitOnError":     reflect.ValueOf(i48.ExitOnError),
		"Float64":         reflect.ValueOf(i48.Float64),
		"Float64Var":      reflect.ValueOf(i48.Float64Var),
		"Func":            reflect.ValueOf(i48.Func),
		"Int":             reflect.ValueOf(i48.Int),
		"Int64":           reflect.ValueOf(i48.Int64),
		"Int64Var":        reflect.ValueOf(i48.Int64Var),
		"IntVar":          reflect.ValueOf(i48.IntVar),
		"Lookup":          reflect.ValueOf(i48.Lookup),
		"NArg":            reflect.ValueOf(i48.NArg),
		"NFlag":           reflect.ValueOf(i48.NFlag),
		"NewFlagSet":      reflect.ValueOf(i48.NewFlagSet),
		"PanicOnError":    reflect.ValueOf(i48.PanicOnError),
		"Parse":           reflect.ValueOf(i48.Parse),
		"Parsed":          reflect.ValueOf(i48.Parsed),
		"PrintDefaults":   reflect.ValueOf(i48.PrintDefaults),
		"Set":             reflect.ValueOf(i48.Set),
		"String":          reflect.ValueOf(i48.String),
		"StringVar":       reflect.ValueOf(i48.StringVar),
		"TextVar":         reflect.ValueOf(i48.TextVar),
		"Uint":            reflect.ValueOf(i48.Uint),
		"Uint64":          reflect.ValueOf(i48.Uint64),
		"Uint64Var":       reflect.ValueOf(i48.Uint64Var),
		"UintVar":         reflect.ValueOf(i48.UintVar),
		"UnquoteUsage":    reflect.ValueOf(i48.UnquoteUsage),
		"Usage":           reflect.ValueOf(i48.Usage),
		"Var":             reflect.ValueOf(i48.Var),
		"Visit":           reflect.ValueOf(i48.Visit),
		"VisitAll":        reflect.ValueOf(i48.VisitAll),
	}
	stdpkg["fmt"] = map[string]reflect.Value{
		"Append":       reflect.ValueOf(i49.Append),
		"Appendf":      reflect.ValueOf(i49.Appendf),
		"Appendln":     reflect.ValueOf(i49.Appendln),
		"Errorf":       reflect.ValueOf(i49.Errorf),
		"FormatString": reflect.ValueOf(i49.FormatString),
		"Fprint":       reflect.ValueOf(i49.Fprint),
		"Fprintf":      reflect.ValueOf(i49.Fprintf),
		"Fprintln":     reflect.ValueOf(i49.Fprintln),
		"Fscan":        reflect.ValueOf(i49.Fscan),
		"Fscanf":       reflect.ValueOf(i49.Fscanf),
		"Fscanln":      reflect.ValueOf(i49.Fscanln),
		"Print":        reflect.ValueOf(i49.Print),
		"Printf":       reflect.ValueOf(i49.Printf),
		"Println":      reflect.ValueOf(i49.Println),
		"Scan":         reflect.ValueOf(i49.Scan),
		"Scanf":        reflect.ValueOf(i49.Scanf),
		"Scanln":       reflect.ValueOf(i49.Scanln),
		"Sprint":       reflect.ValueOf(i49.Sprint),
		"Sprintf":      reflect.ValueOf(i49.Sprintf),
		"Sprintln":     reflect.ValueOf(i49.Sprintln),
		"Sscan":        reflect.ValueOf(i49.Sscan),
		"Sscanf":       reflect.ValueOf(i49.Sscanf),
		"Sscanln":      reflect.ValueOf(i49.Sscanln),
	}
	stdpkg["go/ast"] = map[string]reflect.Value{
		"Bad":                        reflect.ValueOf(i50.Bad),
		"Con":                        reflect.ValueOf(i50.Con),
		"FileExports":                reflect.ValueOf(i50.FileExports),
		"FilterDecl":                 reflect.ValueOf(i50.FilterDecl),
		"FilterFile":                 reflect.ValueOf(i50.FilterFile),
		"FilterFuncDuplicates":       reflect.ValueOf(i50.FilterFuncDuplicates),
		"FilterImportDuplicates":     reflect.ValueOf(i50.FilterImportDuplicates),
		"FilterPackage":              reflect.ValueOf(i50.FilterPackage),
		"FilterUnassociatedComments": reflect.ValueOf(i50.FilterUnassociatedComments),
		"Fprint":                     reflect.ValueOf(i50.Fprint),
		"Fun":                        reflect.ValueOf(i50.Fun),
		"Inspect":                    reflect.ValueOf(i50.Inspect),
		"IsExported":                 reflect.ValueOf(i50.IsExported),
		"IsGenerated":                reflect.ValueOf(i50.IsGenerated),
		"Lbl":                        reflect.ValueOf(i50.Lbl),
		"MergePackageFiles":          reflect.ValueOf(i50.MergePackageFiles),
		"NewCommentMap":              reflect.ValueOf(i50.NewCommentMap),
		"NewIdent":                   reflect.ValueOf(i50.NewIdent),
		"NewObj":                     reflect.ValueOf(i50.NewObj),
		"NewPackage":                 reflect.ValueOf(i50.NewPackage),
		"NewScope":                   reflect.ValueOf(i50.NewScope),
		"NotNilFilter":               reflect.ValueOf(i50.NotNilFilter),
		"PackageExports":             reflect.ValueOf(i50.PackageExports),
		"Pkg":                        reflect.ValueOf(i50.Pkg),
		"Preorder":                   reflect.ValueOf(i50.Preorder),
		"PreorderStack":              reflect.ValueOf(i50.PreorderStack),
		"Print":                      reflect.ValueOf(i50.Print),
		"RECV":                       reflect.ValueOf(i50.RECV),
		"SEND":                       reflect.ValueOf(i50.SEND),
		"SortImports":                reflect.ValueOf(i50.SortImports),
		"Typ":                        reflect.ValueOf(i50.Typ),
		"Unparen":                    reflect.ValueOf(i50.Unparen),
		"Var":                        reflect.ValueOf(i50.Var),
		"Walk":                       reflect.ValueOf(i50.Walk),
	}
	stdpkg["go/build"] = map[string]reflect.Value{
		"AllowBinary":   reflect.ValueOf(i51.AllowBinary),
		"ArchChar":      reflect.ValueOf(i51.ArchChar),
		"Default":       reflect.ValueOf(i51.Default),
		"FindOnly":      reflect.ValueOf(i51.FindOnly),
		"IgnoreVendor":  reflect.ValueOf(i51.IgnoreVendor),
		"Import":        reflect.ValueOf(i51.Import),
		"ImportComment": reflect.ValueOf(i51.ImportComment),
		"ImportDir":     reflect.ValueOf(i51.ImportDir),
		"IsLocalImport": reflect.ValueOf(i51.IsLocalImport),
		"ToolDir":       reflect.ValueOf(i51.ToolDir),
	}
	stdpkg["go/build/constraint"] = map[string]reflect.Value{
		"GoVersion":      reflect.ValueOf(i52.GoVersion),
		"IsGoBuild":      reflect.ValueOf(i52.IsGoBuild),
		"IsPlusBuild":    reflect.ValueOf(i52.IsPlusBuild),
		"Parse":          reflect.ValueOf(i52.Parse),
		"PlusBuildLines": reflect.ValueOf(i52.PlusBuildLines),
	}
	stdpkg["go/constant"] = map[string]reflect.Value{
		"BinaryOp":        reflect.ValueOf(i53.BinaryOp),
		"BitLen":          reflect.ValueOf(i53.BitLen),
		"Bool":            reflect.ValueOf(i53.Bool),
		"BoolVal":         reflect.ValueOf(i53.BoolVal),
		"Bytes":           reflect.ValueOf(i53.Bytes),
		"Compare":         reflect.ValueOf(i53.Compare),
		"Complex":         reflect.ValueOf(i53.Complex),
		"Denom":           reflect.ValueOf(i53.Denom),
		"Float":           reflect.ValueOf(i53.Float),
		"Float32Val":      reflect.ValueOf(i53.Float32Val),
		"Float64Val":      reflect.ValueOf(i53.Float64Val),
		"Imag":            reflect.ValueOf(i53.Imag),
		"Int":             reflect.ValueOf(i53.Int),
		"Int64Val":        reflect.ValueOf(i53.Int64Val),
		"Make":            reflect.ValueOf(i53.Make),
		"MakeBool":        reflect.ValueOf(i53.MakeBool),
		"MakeFloat64":     reflect.ValueOf(i53.MakeFloat64),
		"MakeFromBytes":   reflect.ValueOf(i53.MakeFromBytes),
		"MakeFromLiteral": reflect.ValueOf(i53.MakeFromLiteral),
		"MakeImag":        reflect.ValueOf(i53.MakeImag),
		"MakeInt64":       reflect.ValueOf(i53.MakeInt64),
		"MakeString":      reflect.ValueOf(i53.MakeString),
		"MakeUint64":      reflect.ValueOf(i53.MakeUint64),
		"MakeUnknown":     reflect.ValueOf(i53.MakeUnknown),
		"Num":             reflect.ValueOf(i53.Num),
		"Real":            reflect.ValueOf(i53.Real),
		"Shift":           reflect.ValueOf(i53.Shift),
		"Sign":            reflect.ValueOf(i53.Sign),
		"String":          reflect.ValueOf(i53.String),
		"StringVal":       reflect.ValueOf(i53.StringVal),
		"ToComplex":       reflect.ValueOf(i53.ToComplex),
		"ToFloat":         reflect.ValueOf(i53.ToFloat),
		"ToInt":           reflect.ValueOf(i53.ToInt),
		"Uint64Val":       reflect.ValueOf(i53.Uint64Val),
		"UnaryOp":         reflect.ValueOf(i53.UnaryOp),
		"Unknown":         reflect.ValueOf(i53.Unknown),
		"Val":             reflect.ValueOf(i53.Val),
	}
	stdpkg["go/doc"] = map[string]reflect.Value{
		"AllDecls":        reflect.ValueOf(i54.AllDecls),
		"AllMethods":      reflect.ValueOf(i54.AllMethods),
		"IllegalPrefixes": reflect.ValueOf(i54.IllegalPrefixes),
		"IsPredeclared":   reflect.ValueOf(i54.IsPredeclared),
		"New":             reflect.ValueOf(i54.New),
		"NewFromFiles":    reflect.ValueOf(i54.NewFromFiles),
		"PreserveAST":     reflect.ValueOf(i54.PreserveAST),
		"Synopsis":        reflect.ValueOf(i54.Synopsis),
		"ToHTML":          reflect.ValueOf(i54.ToHTML),
		"ToText":          reflect.ValueOf(i54.ToText),
	}
	stdpkg["go/format"] = map[string]reflect.Value{
		"Node":   reflect.ValueOf(i55.Node),
		"Source": reflect.ValueOf(i55.Source),
	}
	stdpkg["go/importer"] = map[string]reflect.Value{
		"Default":     reflect.ValueOf(i56.Default),
		"For":         reflect.ValueOf(i56.For),
		"ForCompiler": reflect.ValueOf(i56.ForCompiler),
	}
	stdpkg["go/parser"] = map[string]reflect.Value{
		"AllErrors":            reflect.ValueOf(i57.AllErrors),
		"DeclarationErrors":    reflect.ValueOf(i57.DeclarationErrors),
		"ImportsOnly":          reflect.ValueOf(i57.ImportsOnly),
		"PackageClauseOnly":    reflect.ValueOf(i57.PackageClauseOnly),
		"ParseComments":        reflect.ValueOf(i57.ParseComments),
		"ParseDir":             reflect.ValueOf(i57.ParseDir),
		"ParseExpr":            reflect.ValueOf(i57.ParseExpr),
		"ParseExprFrom":        reflect.ValueOf(i57.ParseExprFrom),
		"ParseFile":            reflect.ValueOf(i57.ParseFile),
		"SkipObjectResolution": reflect.ValueOf(i57.SkipObjectResolution),
		"SpuriousErrors":       reflect.ValueOf(i57.SpuriousErrors),
		"Trace":                reflect.ValueOf(i57.Trace),
	}
	stdpkg["go/printer"] = map[string]reflect.Value{
		"Fprint":    reflect.ValueOf(i58.Fprint),
		"RawFormat": reflect.ValueOf(i58.RawFormat),
		"SourcePos": reflect.ValueOf(i58.SourcePos),
		"TabIndent": reflect.ValueOf(i58.TabIndent),
		"UseSpaces": reflect.ValueOf(i58.UseSpaces),
	}
	stdpkg["go/scanner"] = map[string]reflect.Value{
		"PrintError":   reflect.ValueOf(i59.PrintError),
		"ScanComments": reflect.ValueOf(i59.ScanComments),
	}
	stdpkg["go/token"] = map[string]reflect.Value{
		"ADD":            reflect.ValueOf(i60.ADD),
		"ADD_ASSIGN":     reflect.ValueOf(i60.ADD_ASSIGN),
		"AND":            reflect.ValueOf(i60.AND),
		"AND_ASSIGN":     reflect.ValueOf(i60.AND_ASSIGN),
		"AND_NOT":        reflect.ValueOf(i60.AND_NOT),
		"AND_NOT_ASSIGN": reflect.ValueOf(i60.AND_NOT_ASSIGN),
		"ARROW":          reflect.ValueOf(i60.ARROW),
		"ASSIGN":         reflect.ValueOf(i60.ASSIGN),
		"BREAK":          reflect.ValueOf(i60.BREAK),
		"CASE":           reflect.ValueOf(i60.CASE),
		"CHAN":           reflect.ValueOf(i60.CHAN),
		"CHAR":           reflect.ValueOf(i60.CHAR),
		"COLON":          reflect.ValueOf(i60.COLON),
		"COMMA":          reflect.ValueOf(i60.COMMA),
		"COMMENT":        reflect.ValueOf(i60.COMMENT),
		"CONST":          reflect.ValueOf(i60.CONST),
		"CONTINUE":       reflect.ValueOf(i60.CONTINUE),
		"DEC":            reflect.ValueOf(i60.DEC),
		"DEFAULT":        reflect.ValueOf(i60.DEFAULT),
		"DEFER":          reflect.ValueOf(i60.DEFER),
		"DEFINE":         reflect.ValueOf(i60.DEFINE),
		"ELLIPSIS":       reflect.ValueOf(i60.ELLIPSIS),
		"ELSE":           reflect.ValueOf(i60.ELSE),
		"EOF":            reflect.ValueOf(i60.EOF),
		"EQL":            reflect.ValueOf(i60.EQL),
		"FALLTHROUGH":    reflect.ValueOf(i60.FALLTHROUGH),
		"FLOAT":          reflect.ValueOf(i60.FLOAT),
		"FOR":            reflect.ValueOf(i60.FOR),
		"FUNC":           reflect.ValueOf(i60.FUNC),
		"GEQ":            reflect.ValueOf(i60.GEQ),
		"GO":             reflect.ValueOf(i60.GO),
		"GOTO":           reflect.ValueOf(i60.GOTO),
		"GTR":            reflect.ValueOf(i60.GTR),
		"HighestPrec":    reflect.ValueOf(i60.HighestPrec),
		"IDENT":          reflect.ValueOf(i60.IDENT),
		"IF":             reflect.ValueOf(i60.IF),
		"ILLEGAL":        reflect.ValueOf(i60.ILLEGAL),
		"IMAG":           reflect.ValueOf(i60.IMAG),
		"IMPORT":         reflect.ValueOf(i60.IMPORT),
		"INC":            reflect.ValueOf(i60.INC),
		"INT":            reflect.ValueOf(i60.INT),
		"INTERFACE":      reflect.ValueOf(i60.INTERFACE),
		"IsExported":     reflect.ValueOf(i60.IsExported),
		"IsIdentifier":   reflect.ValueOf(i60.IsIdentifier),
		"IsKeyword":      reflect.ValueOf(i60.IsKeyword),
		"LAND":           reflect.ValueOf(i60.LAND),
		"LBRACE":         reflect.ValueOf(i60.LBRACE),
		"LBRACK":         reflect.ValueOf(i60.LBRACK),
		"LEQ":            reflect.ValueOf(i60.LEQ),
		"LOR":            reflect.ValueOf(i60.LOR),
		"LPAREN":         reflect.ValueOf(i60.LPAREN),
		"LSS":            reflect.ValueOf(i60.LSS),
		"Lookup":         reflect.ValueOf(i60.Lookup),
		"LowestPrec":     reflect.ValueOf(i60.LowestPrec),
		"MAP":            reflect.ValueOf(i60.MAP),
		"MUL":            reflect.ValueOf(i60.MUL),
		"MUL_ASSIGN":     reflect.ValueOf(i60.MUL_ASSIGN),
		"NEQ":            reflect.ValueOf(i60.NEQ),
		"NOT":            reflect.ValueOf(i60.NOT),
		"NewFileSet":     reflect.ValueOf(i60.NewFileSet),
		"NoPos":          reflect.ValueOf(i60.NoPos),
		"OR":             reflect.ValueOf(i60.OR),
		"OR_ASSIGN":      reflect.ValueOf(i60.OR_ASSIGN),
		"PACKAGE":        reflect.ValueOf(i60.PACKAGE),
		"PERIOD":         reflect.ValueOf(i60.PERIOD),
		"QUO":            reflect.ValueOf(i60.QUO),
		"QUO_ASSIGN":     reflect.ValueOf(i60.QUO_ASSIGN),
		"RANGE":          reflect.ValueOf(i60.RANGE),
		"RBRACE":         reflect.ValueOf(i60.RBRACE),
		"RBRACK":         reflect.ValueOf(i60.RBRACK),
		"REM":            reflect.ValueOf(i60.REM),
		"REM_ASSIGN":     reflect.ValueOf(i60.REM_ASSIGN),
		"RETURN":         reflect.ValueOf(i60.RETURN),
		"RPAREN":         reflect.ValueOf(i60.RPAREN),
		"SELECT":         reflect.ValueOf(i60.SELECT),
		"SEMICOLON":      reflect.ValueOf(i60.SEMICOLON),
		"SHL":            reflect.ValueOf(i60.SHL),
		"SHL_ASSIGN":     reflect.ValueOf(i60.SHL_ASSIGN),
		"SHR":            reflect.ValueOf(i60.SHR),
		"SHR_ASSIGN":     reflect.ValueOf(i60.SHR_ASSIGN),
		"STRING":         reflect.ValueOf(i60.STRING),
		"STRUCT":         reflect.ValueOf(i60.STRUCT),
		"SUB":            reflect.ValueOf(i60.SUB),
		"SUB_ASSIGN":     reflect.ValueOf(i60.SUB_ASSIGN),
		"SWITCH":         reflect.ValueOf(i60.SWITCH),
		"TILDE":          reflect.ValueOf(i60.TILDE),
		"TYPE":           reflect.ValueOf(i60.TYPE),
		"UnaryPrec":      reflect.ValueOf(i60.UnaryPrec),
		"VAR":            reflect.ValueOf(i60.VAR),
		"XOR":            reflect.ValueOf(i60.XOR),
		"XOR_ASSIGN":     reflect.ValueOf(i60.XOR_ASSIGN),
	}
	stdpkg["go/types"] = map[string]reflect.Value{
		"AssertableTo":            reflect.ValueOf(i61.AssertableTo),
		"AssignableTo":            reflect.ValueOf(i61.AssignableTo),
		"Bool":                    reflect.ValueOf(i61.Bool),
		"Byte":                    reflect.ValueOf(i61.Byte),
		"CheckExpr":               reflect.ValueOf(i61.CheckExpr),
		"Comparable":              reflect.ValueOf(i61.Comparable),
		"Complex128":              reflect.ValueOf(i61.Complex128),
		"Complex64":               reflect.ValueOf(i61.Complex64),
		"ConvertibleTo":           reflect.ValueOf(i61.ConvertibleTo),
		"DefPredeclaredTestFuncs": reflect.ValueOf(i61.DefPredeclaredTestFuncs),
		"Default":                 reflect.ValueOf(i61.Default),
		"Eval":                    reflect.ValueOf(i61.Eval),
		"ExprString":              reflect.ValueOf(i61.ExprString),
		"FieldVal":                reflect.ValueOf(i61.FieldVal),
		"FieldVar":                reflect.ValueOf(i61.FieldVar),
		"Float32":                 reflect.ValueOf(i61.Float32),
		"Float64":                 reflect.ValueOf(i61.Float64),
		"Id":                      reflect.ValueOf(i61.Id),
		"Identical":               reflect.ValueOf(i61.Identical),
		"IdenticalIgnoreTags":     reflect.ValueOf(i61.IdenticalIgnoreTags),
		"Implements":              reflect.ValueOf(i61.Implements),
		"Instantiate":             reflect.ValueOf(i61.Instantiate),
		"Int":                     reflect.ValueOf(i61.Int),
		"Int16":                   reflect.ValueOf(i61.Int16),
		"Int32":                   reflect.ValueOf(i61.Int32),
		"Int64":                   reflect.ValueOf(i61.Int64),
		"Int8":                    reflect.ValueOf(i61.Int8),
		"Invalid":                 reflect.ValueOf(i61.Invalid),
		"IsBoolean":               reflect.ValueOf(i61.IsBoolean),
		"IsComplex":               reflect.ValueOf(i61.IsComplex),
		"IsConstType":             reflect.ValueOf(i61.IsConstType),
		"IsFloat":                 reflect.ValueOf(i61.IsFloat),
		"IsInteger":               reflect.ValueOf(i61.IsInteger),
		"IsInterface":             reflect.ValueOf(i61.IsInterface),
		"IsNumeric":               reflect.ValueOf(i61.IsNumeric),
		"IsOrdered":               reflect.ValueOf(i61.IsOrdered),
		"IsString":                reflect.ValueOf(i61.IsString),
		"IsUnsigned":              reflect.ValueOf(i61.IsUnsigned),
		"IsUntyped":               reflect.ValueOf(i61.IsUntyped),
		"LocalVar":                reflect.ValueOf(i61.LocalVar),
		"LookupFieldOrMethod":     reflect.ValueOf(i61.LookupFieldOrMethod),
		"LookupSelection":         reflect.ValueOf(i61.LookupSelection),
		"MethodExpr":              reflect.ValueOf(i61.MethodExpr),
		"MethodVal":               reflect.ValueOf(i61.MethodVal),
		"MissingMethod":           reflect.ValueOf(i61.MissingMethod),
		"NewAlias":                reflect.ValueOf(i61.NewAlias),
		"NewArray":                reflect.ValueOf(i61.NewArray),
		"NewChan":                 reflect.ValueOf(i61.NewChan),
		"NewChecker":              reflect.ValueOf(i61.NewChecker),
		"NewConst":                reflect.ValueOf(i61.NewConst),
		"NewContext":              reflect.ValueOf(i61.NewContext),
		"NewField":                reflect.ValueOf(i61.NewField),
		"NewFunc":                 reflect.ValueOf(i61.NewFunc),
		"NewInterface":            reflect.ValueOf(i61.NewInterface),
		"NewInterfaceType":        reflect.ValueOf(i61.NewInterfaceType),
		"NewLabel":                reflect.ValueOf(i61.NewLabel),
		"NewMap":                  reflect.ValueOf(i61.NewMap),
		"NewMethodSet":            reflect.ValueOf(i61.NewMethodSet),
		"NewNamed":                reflect.ValueOf(i61.NewNamed),
		"NewPackage":              reflect.ValueOf(i61.NewPackage),
		"NewParam":                reflect.ValueOf(i61.NewParam),
		"NewPkgName":              reflect.ValueOf(i61.NewPkgName),
		"NewPointer":              reflect.ValueOf(i61.NewPointer),
		"NewScope":                reflect.ValueOf(i61.NewScope),
		"NewSignature":            reflect.ValueOf(i61.NewSignature),
		"NewSignatureType":        reflect.ValueOf(i61.NewSignatureType),
		"NewSlice":                reflect.ValueOf(i61.NewSlice),
		"NewStruct":               reflect.ValueOf(i61.NewStruct),
		"NewTerm":                 reflect.ValueOf(i61.NewTerm),
		"NewTuple":                reflect.ValueOf(i61.NewTuple),
		"NewTypeName":             reflect.ValueOf(i61.NewTypeName),
		"NewTypeParam":            reflect.ValueOf(i61.NewTypeParam),
		"NewUnion":                reflect.ValueOf(i61.NewUnion),
		"NewVar":                  reflect.ValueOf(i61.NewVar),
		"ObjectString":            reflect.ValueOf(i61.ObjectString),
		"PackageVar":              reflect.ValueOf(i61.PackageVar),
		"ParamVar":                reflect.ValueOf(i61.ParamVar),
		"RecvOnly":                reflect.ValueOf(i61.RecvOnly),
		"RecvVar":                 reflect.ValueOf(i61.RecvVar),
		"RelativeTo":              reflect.ValueOf(i61.RelativeTo),
		"ResultVar":               reflect.ValueOf(i61.ResultVar),
		"Rune":                    reflect.ValueOf(i61.Rune),
		"Satisfies":               reflect.ValueOf(i61.Satisfies),
		"SelectionString":         reflect.ValueOf(i61.SelectionString),
		"SendOnly":                reflect.ValueOf(i61.SendOnly),
		"SendRecv":                reflect.ValueOf(i61.SendRecv),
		"SizesFor":                reflect.ValueOf(i61.SizesFor),
		"String":                  reflect.ValueOf(i61.String),
		"Typ":                     reflect.ValueOf(i61.Typ),
		"TypeString":              reflect.ValueOf(i61.TypeString),
		"Uint":                    reflect.ValueOf(i61.Uint),
		"Uint16":                  reflect.ValueOf(i61.Uint16),
		"Uint32":                  reflect.ValueOf(i61.Uint32),
		"Uint64":                  reflect.ValueOf(i61.Uint64),
		"Uint8":                   reflect.ValueOf(i61.Uint8),
		"Uintptr":                 reflect.ValueOf(i61.Uintptr),
		"Unalias":                 reflect.ValueOf(i61.Unalias),
		"Universe":                reflect.ValueOf(i61.Universe),
		"Unsafe":                  reflect.ValueOf(i61.Unsafe),
		"UnsafePointer":           reflect.ValueOf(i61.UnsafePointer),
		"UntypedBool":             reflect.ValueOf(i61.UntypedBool),
		"UntypedComplex":          reflect.ValueOf(i61.UntypedComplex),
		"UntypedFloat":            reflect.ValueOf(i61.UntypedFloat),
		"UntypedInt":              reflect.ValueOf(i61.UntypedInt),
		"UntypedNil":              reflect.ValueOf(i61.UntypedNil),
		"UntypedRune":             reflect.ValueOf(i61.UntypedRune),
		"UntypedString":           reflect.ValueOf(i61.UntypedString),
		"WriteExpr":               reflect.ValueOf(i61.WriteExpr),
		"WriteSignature":          reflect.ValueOf(i61.WriteSignature),
		"WriteType":               reflect.ValueOf(i61.WriteType),
	}
	stdpkg["hash/adler32"] = map[string]reflect.Value{
		"Checksum": reflect.ValueOf(i62.Checksum),
		"New":      reflect.ValueOf(i62.New),
		"Size":     reflect.ValueOf(i62.Size),
	}
	stdpkg["hash/crc32"] = map[string]reflect.Value{
		"Castagnoli":   reflect.ValueOf(i63.Castagnoli),
		"Checksum":     reflect.ValueOf(i63.Checksum),
		"ChecksumIEEE": reflect.ValueOf(i63.ChecksumIEEE),
		"IEEE":         reflect.ValueOf(i63.IEEE),
		"IEEETable":    reflect.ValueOf(i63.IEEETable),
		"Koopman":      reflect.ValueOf(i63.Koopman),
		"MakeTable":    reflect.ValueOf(i63.MakeTable),
		"New":          reflect.ValueOf(i63.New),
		"NewIEEE":      reflect.ValueOf(i63.NewIEEE),
		"Size":         reflect.ValueOf(i63.Size),
		"Update":       reflect.ValueOf(i63.Update),
	}
	stdpkg["hash/crc64"] = map[string]reflect.Value{
		"Checksum":  reflect.ValueOf(i64.Checksum),
		"ECMA":      reflect.ValueOf(int(i64.ECMA)),
		"ISO":       reflect.ValueOf(i64.ISO),
		"MakeTable": reflect.ValueOf(i64.MakeTable),
		"New":       reflect.ValueOf(i64.New),
		"Size":      reflect.ValueOf(i64.Size),
		"Update":    reflect.ValueOf(i64.Update),
	}
	stdpkg["hash/fnv"] = map[string]reflect.Value{
		"New128":  reflect.ValueOf(i65.New128),
		"New128a": reflect.ValueOf(i65.New128a),
		"New32":   reflect.ValueOf(i65.New32),
		"New32a":  reflect.ValueOf(i65.New32a),
		"New64":   reflect.ValueOf(i65.New64),
		"New64a":  reflect.ValueOf(i65.New64a),
	}
	stdpkg["hash/maphash"] = map[string]reflect.Value{
		"Bytes":           reflect.ValueOf(i66.Bytes),
		"Comparable":      reflect.ValueOf(i66.Comparable),
		"MakeSeed":        reflect.ValueOf(i66.MakeSeed),
		"String":          reflect.ValueOf(i66.String),
		"WriteComparable": reflect.ValueOf(i66.WriteComparable),
	}
	stdpkg["html"] = map[string]reflect.Value{
		"EscapeString":   reflect.ValueOf(i67.EscapeString),
		"UnescapeString": reflect.ValueOf(i67.UnescapeString),
	}
	stdpkg["html/template"] = map[string]reflect.Value{
		"ErrAmbigContext":      reflect.ValueOf(i68.ErrAmbigContext),
		"ErrBadHTML":           reflect.ValueOf(i68.ErrBadHTML),
		"ErrBranchEnd":         reflect.ValueOf(i68.ErrBranchEnd),
		"ErrEndContext":        reflect.ValueOf(i68.ErrEndContext),
		"ErrJSTemplate":        reflect.ValueOf(i68.ErrJSTemplate),
		"ErrNoSuchTemplate":    reflect.ValueOf(i68.ErrNoSuchTemplate),
		"ErrOutputContext":     reflect.ValueOf(i68.ErrOutputContext),
		"ErrPartialCharset":    reflect.ValueOf(i68.ErrPartialCharset),
		"ErrPartialEscape":     reflect.ValueOf(i68.ErrPartialEscape),
		"ErrPredefinedEscaper": reflect.ValueOf(i68.ErrPredefinedEscaper),
		"ErrRangeLoopReentry":  reflect.ValueOf(i68.ErrRangeLoopReentry),
		"ErrSlashAmbig":        reflect.ValueOf(i68.ErrSlashAmbig),
		"HTMLEscape":           reflect.ValueOf(i68.HTMLEscape),
		"HTMLEscapeString":     reflect.ValueOf(i68.HTMLEscapeString),
		"HTMLEscaper":          reflect.ValueOf(i68.HTMLEscaper),
		"IsTrue":               reflect.ValueOf(i68.IsTrue),
		"JSEscape":             reflect.ValueOf(i68.JSEscape),
		"JSEscapeString":       reflect.ValueOf(i68.JSEscapeString),
		"JSEscaper":            reflect.ValueOf(i68.JSEscaper),
		"Must":                 reflect.ValueOf(i68.Must),
		"New":                  reflect.ValueOf(i68.New),
		"OK":                   reflect.ValueOf(i68.OK),
		"ParseFS":              reflect.ValueOf(i68.ParseFS),
		"ParseFiles":           reflect.ValueOf(i68.ParseFiles),
		"ParseGlob":            reflect.ValueOf(i68.ParseGlob),
		"URLQueryEscaper":      reflect.ValueOf(i68.URLQueryEscaper),
	}
	stdpkg["image"] = map[string]reflect.Value{
		"Black":                  reflect.ValueOf(i69.Black),
		"Decode":                 reflect.ValueOf(i69.Decode),
		"DecodeConfig":           reflect.ValueOf(i69.DecodeConfig),
		"ErrFormat":              reflect.ValueOf(i69.ErrFormat),
		"NewAlpha":               reflect.ValueOf(i69.NewAlpha),
		"NewAlpha16":             reflect.ValueOf(i69.NewAlpha16),
		"NewCMYK":                reflect.ValueOf(i69.NewCMYK),
		"NewGray":                reflect.ValueOf(i69.NewGray),
		"NewGray16":              reflect.ValueOf(i69.NewGray16),
		"NewNRGBA":               reflect.ValueOf(i69.NewNRGBA),
		"NewNRGBA64":             reflect.ValueOf(i69.NewNRGBA64),
		"NewNYCbCrA":             reflect.ValueOf(i69.NewNYCbCrA),
		"NewPaletted":            reflect.ValueOf(i69.NewPaletted),
		"NewRGBA":                reflect.ValueOf(i69.NewRGBA),
		"NewRGBA64":              reflect.ValueOf(i69.NewRGBA64),
		"NewUniform":             reflect.ValueOf(i69.NewUniform),
		"NewYCbCr":               reflect.ValueOf(i69.NewYCbCr),
		"Opaque":                 reflect.ValueOf(i69.Opaque),
		"Pt":                     reflect.ValueOf(i69.Pt),
		"Rect":                   reflect.ValueOf(i69.Rect),
		"RegisterFormat":         reflect.ValueOf(i69.RegisterFormat),
		"Transparent":            reflect.ValueOf(i69.Transparent),
		"White":                  reflect.ValueOf(i69.White),
		"YCbCrSubsampleRatio410": reflect.ValueOf(i69.YCbCrSubsampleRatio410),
		"YCbCrSubsampleRatio411": reflect.ValueOf(i69.YCbCrSubsampleRatio411),
		"YCbCrSubsampleRatio420": reflect.ValueOf(i69.YCbCrSubsampleRatio420),
		"YCbCrSubsampleRatio422": reflect.ValueOf(i69.YCbCrSubsampleRatio422),
		"YCbCrSubsampleRatio440": reflect.ValueOf(i69.YCbCrSubsampleRatio440),
		"YCbCrSubsampleRatio444": reflect.ValueOf(i69.YCbCrSubsampleRatio444),
		"ZP":                     reflect.ValueOf(i69.ZP),
		"ZR":                     reflect.ValueOf(i69.ZR),
	}
	stdpkg["image/color"] = map[string]reflect.Value{
		"Alpha16Model": reflect.ValueOf(i70.Alpha16Model),
		"AlphaModel":   reflect.ValueOf(i70.AlphaModel),
		"Black":        reflect.ValueOf(i70.Black),
		"CMYKModel":    reflect.ValueOf(i70.CMYKModel),
		"CMYKToRGB":    reflect.ValueOf(i70.CMYKToRGB),
		"Gray16Model":  reflect.ValueOf(i70.Gray16Model),
		"GrayModel":    reflect.ValueOf(i70.GrayModel),
		"ModelFunc":    reflect.ValueOf(i70.ModelFunc),
		"NRGBA64Model": reflect.ValueOf(i70.NRGBA64Model),
		"NRGBAModel":   reflect.ValueOf(i70.NRGBAModel),
		"NYCbCrAModel": reflect.ValueOf(i70.NYCbCrAModel),
		"Opaque":       reflect.ValueOf(i70.Opaque),
		"RGBA64Model":  reflect.ValueOf(i70.RGBA64Model),
		"RGBAModel":    reflect.ValueOf(i70.RGBAModel),
		"RGBToCMYK":    reflect.ValueOf(i70.RGBToCMYK),
		"RGBToYCbCr":   reflect.ValueOf(i70.RGBToYCbCr),
		"Transparent":  reflect.ValueOf(i70.Transparent),
		"White":        reflect.ValueOf(i70.White),
		"YCbCrModel":   reflect.ValueOf(i70.YCbCrModel),
		"YCbCrToRGB":   reflect.ValueOf(i70.YCbCrToRGB),
	}
	stdpkg["image/color/palette"] = map[string]reflect.Value{
		"Plan9":   reflect.ValueOf(i71.Plan9),
		"WebSafe": reflect.ValueOf(i71.WebSafe),
	}
	stdpkg["image/draw"] = map[string]reflect.Value{
		"Draw":           reflect.ValueOf(i72.Draw),
		"DrawMask":       reflect.ValueOf(i72.DrawMask),
		"FloydSteinberg": reflect.ValueOf(i72.FloydSteinberg),
		"Over":           reflect.ValueOf(i72.Over),
		"Src":            reflect.ValueOf(i72.Src),
	}
	stdpkg["image/gif"] = map[string]reflect.Value{
		"Decode":             reflect.ValueOf(i73.Decode),
		"DecodeAll":          reflect.ValueOf(i73.DecodeAll),
		"DecodeConfig":       reflect.ValueOf(i73.DecodeConfig),
		"DisposalBackground": reflect.ValueOf(i73.DisposalBackground),
		"DisposalNone":       reflect.ValueOf(i73.DisposalNone),
		"DisposalPrevious":   reflect.ValueOf(i73.DisposalPrevious),
		"Encode":             reflect.ValueOf(i73.Encode),
		"EncodeAll":          reflect.ValueOf(i73.EncodeAll),
	}
	stdpkg["image/jpeg"] = map[string]reflect.Value{
		"Decode":         reflect.ValueOf(i74.Decode),
		"DecodeConfig":   reflect.ValueOf(i74.DecodeConfig),
		"DefaultQuality": reflect.ValueOf(i74.DefaultQuality),
		"Encode":         reflect.ValueOf(i74.Encode),
	}
	stdpkg["image/png"] = map[string]reflect.Value{
		"BestCompression":    reflect.ValueOf(i75.BestCompression),
		"BestSpeed":          reflect.ValueOf(i75.BestSpeed),
		"Decode":             reflect.ValueOf(i75.Decode),
		"DecodeConfig":       reflect.ValueOf(i75.DecodeConfig),
		"DefaultCompression": reflect.ValueOf(i75.DefaultCompression),
		"Encode":             reflect.ValueOf(i75.Encode),
		"NoCompression":      reflect.ValueOf(i75.NoCompression),
	}
	stdpkg["index/suffixarray"] = map[string]reflect.Value{
		"New": reflect.ValueOf(i76.New),
	}
	stdpkg["io"] = map[string]reflect.Value{
		"Copy":             reflect.ValueOf(i77.Copy),
		"CopyBuffer":       reflect.ValueOf(i77.CopyBuffer),
		"CopyN":            reflect.ValueOf(i77.CopyN),
		"Discard":          reflect.ValueOf(i77.Discard),
		"EOF":              reflect.ValueOf(i77.EOF),
		"ErrClosedPipe":    reflect.ValueOf(i77.ErrClosedPipe),
		"ErrNoProgress":    reflect.ValueOf(i77.ErrNoProgress),
		"ErrShortBuffer":   reflect.ValueOf(i77.ErrShortBuffer),
		"ErrShortWrite":    reflect.ValueOf(i77.ErrShortWrite),
		"ErrUnexpectedEOF": reflect.ValueOf(i77.ErrUnexpectedEOF),
		"LimitReader":      reflect.ValueOf(i77.LimitReader),
		"MultiReader":      reflect.ValueOf(i77.MultiReader),
		"MultiWriter":      reflect.ValueOf(i77.MultiWriter),
		"NewOffsetWriter":  reflect.ValueOf(i77.NewOffsetWriter),
		"NewSectionReader": reflect.ValueOf(i77.NewSectionReader),
		"NopCloser":        reflect.ValueOf(i77.NopCloser),
		"Pipe":             reflect.ValueOf(i77.Pipe),
		"ReadAll":          reflect.ValueOf(i77.ReadAll),
		"ReadAtLeast":      reflect.ValueOf(i77.ReadAtLeast),
		"ReadFull":         reflect.ValueOf(i77.ReadFull),
		"SeekCurrent":      reflect.ValueOf(i77.SeekCurrent),
		"SeekEnd":          reflect.ValueOf(i77.SeekEnd),
		"SeekStart":        reflect.ValueOf(i77.SeekStart),
		"TeeReader":        reflect.ValueOf(i77.TeeReader),
		"WriteString":      reflect.ValueOf(i77.WriteString),
	}
	stdpkg["io/fs"] = map[string]reflect.Value{
		"ErrClosed":          reflect.ValueOf(i78.ErrClosed),
		"ErrExist":           reflect.ValueOf(i78.ErrExist),
		"ErrInvalid":         reflect.ValueOf(i78.ErrInvalid),
		"ErrNotExist":        reflect.ValueOf(i78.ErrNotExist),
		"ErrPermission":      reflect.ValueOf(i78.ErrPermission),
		"FileInfoToDirEntry": reflect.ValueOf(i78.FileInfoToDirEntry),
		"FormatDirEntry":     reflect.ValueOf(i78.FormatDirEntry),
		"FormatFileInfo":     reflect.ValueOf(i78.FormatFileInfo),
		"Glob":               reflect.ValueOf(i78.Glob),
		"Lstat":              reflect.ValueOf(i78.Lstat),
		"ModeAppend":         reflect.ValueOf(i78.ModeAppend),
		"ModeCharDevice":     reflect.ValueOf(i78.ModeCharDevice),
		"ModeDevice":         reflect.ValueOf(i78.ModeDevice),
		"ModeDir":            reflect.ValueOf(i78.ModeDir),
		"ModeExclusive":      reflect.ValueOf(i78.ModeExclusive),
		"ModeIrregular":      reflect.ValueOf(i78.ModeIrregular),
		"ModeNamedPipe":      reflect.ValueOf(i78.ModeNamedPipe),
		"ModePerm":           reflect.ValueOf(i78.ModePerm),
		"ModeSetgid":         reflect.ValueOf(i78.ModeSetgid),
		"ModeSetuid":         reflect.ValueOf(i78.ModeSetuid),
		"ModeSocket":         reflect.ValueOf(i78.ModeSocket),
		"ModeSticky":         reflect.ValueOf(i78.ModeSticky),
		"ModeSymlink":        reflect.ValueOf(i78.ModeSymlink),
		"ModeTemporary":      reflect.ValueOf(i78.ModeTemporary),
		"ModeType":           reflect.ValueOf(i78.ModeType),
		"ReadDir":            reflect.ValueOf(i78.ReadDir),
		"ReadFile":           reflect.ValueOf(i78.ReadFile),
		"ReadLink":           reflect.ValueOf(i78.ReadLink),
		"SkipAll":            reflect.ValueOf(i78.SkipAll),
		"SkipDir":            reflect.ValueOf(i78.SkipDir),
		"Stat":               reflect.ValueOf(i78.Stat),
		"Sub":                reflect.ValueOf(i78.Sub),
		"ValidPath":          reflect.ValueOf(i78.ValidPath),
		"WalkDir":            reflect.ValueOf(i78.WalkDir),
	}
	stdpkg["io/ioutil"] = map[string]reflect.Value{
		"Discard":   reflect.ValueOf(i79.Discard),
		"NopCloser": reflect.ValueOf(i79.NopCloser),
		"ReadAll":   reflect.ValueOf(i79.ReadAll),
		"ReadDir":   reflect.ValueOf(i79.ReadDir),
		"ReadFile":  reflect.ValueOf(i79.ReadFile),
		"TempDir":   reflect.ValueOf(i79.TempDir),
		"TempFile":  reflect.ValueOf(i79.TempFile),
		"WriteFile": reflect.ValueOf(i79.WriteFile),
	}
	stdpkg["log"] = map[string]reflect.Value{
		"Default":       reflect.ValueOf(i80.Default),
		"Fatal":         reflect.ValueOf(i80.Fatal),
		"Fatalf":        reflect.ValueOf(i80.Fatalf),
		"Fatalln":       reflect.ValueOf(i80.Fatalln),
		"Flags":         reflect.ValueOf(i80.Flags),
		"LUTC":          reflect.ValueOf(i80.LUTC),
		"Ldate":         reflect.ValueOf(i80.Ldate),
		"Llongfile":     reflect.ValueOf(i80.Llongfile),
		"Lmicroseconds": reflect.ValueOf(i80.Lmicroseconds),
		"Lmsgprefix":    reflect.ValueOf(i80.Lmsgprefix),
		"Lshortfile":    reflect.ValueOf(i80.Lshortfile),
		"LstdFlags":     reflect.ValueOf(i80.LstdFlags),
		"Ltime":         reflect.ValueOf(i80.Ltime),
		"New":           reflect.ValueOf(i80.New),
		"Output":        reflect.ValueOf(i80.Output),
		"Panic":         reflect.ValueOf(i80.Panic),
		"Panicf":        reflect.ValueOf(i80.Panicf),
		"Panicln":       reflect.ValueOf(i80.Panicln),
		"Prefix":        reflect.ValueOf(i80.Prefix),
		"Print":         reflect.ValueOf(i80.Print),
		"Printf":        reflect.ValueOf(i80.Printf),
		"Println":       reflect.ValueOf(i80.Println),
		"SetFlags":      reflect.ValueOf(i80.SetFlags),
		"SetOutput":     reflect.ValueOf(i80.SetOutput),
		"SetPrefix":     reflect.ValueOf(i80.SetPrefix),
		"Writer":        reflect.ValueOf(i80.Writer),
	}
	stdpkg["log/slog"] = map[string]reflect.Value{
		"Any":               reflect.ValueOf(i81.Any),
		"AnyValue":          reflect.ValueOf(i81.AnyValue),
		"Bool":              reflect.ValueOf(i81.Bool),
		"BoolValue":         reflect.ValueOf(i81.BoolValue),
		"Debug":             reflect.ValueOf(i81.Debug),
		"DebugContext":      reflect.ValueOf(i81.DebugContext),
		"Default":           reflect.ValueOf(i81.Default),
		"DiscardHandler":    reflect.ValueOf(i81.DiscardHandler),
		"Duration":          reflect.ValueOf(i81.Duration),
		"DurationValue":     reflect.ValueOf(i81.DurationValue),
		"Error":             reflect.ValueOf(i81.Error),
		"ErrorContext":      reflect.ValueOf(i81.ErrorContext),
		"Float64":           reflect.ValueOf(i81.Float64),
		"Float64Value":      reflect.ValueOf(i81.Float64Value),
		"Group":             reflect.ValueOf(i81.Group),
		"GroupAttrs":        reflect.ValueOf(i81.GroupAttrs),
		"GroupValue":        reflect.ValueOf(i81.GroupValue),
		"Info":              reflect.ValueOf(i81.Info),
		"InfoContext":       reflect.ValueOf(i81.InfoContext),
		"Int":               reflect.ValueOf(i81.Int),
		"Int64":             reflect.ValueOf(i81.Int64),
		"Int64Value":        reflect.ValueOf(i81.Int64Value),
		"IntValue":          reflect.ValueOf(i81.IntValue),
		"KindAny":           reflect.ValueOf(i81.KindAny),
		"KindBool":          reflect.ValueOf(i81.KindBool),
		"KindDuration":      reflect.ValueOf(i81.KindDuration),
		"KindFloat64":       reflect.ValueOf(i81.KindFloat64),
		"KindGroup":         reflect.ValueOf(i81.KindGroup),
		"KindInt64":         reflect.ValueOf(i81.KindInt64),
		"KindLogValuer":     reflect.ValueOf(i81.KindLogValuer),
		"KindString":        reflect.ValueOf(i81.KindString),
		"KindTime":          reflect.ValueOf(i81.KindTime),
		"KindUint64":        reflect.ValueOf(i81.KindUint64),
		"LevelDebug":        reflect.ValueOf(i81.LevelDebug),
		"LevelError":        reflect.ValueOf(i81.LevelError),
		"LevelInfo":         reflect.ValueOf(i81.LevelInfo),
		"LevelKey":          reflect.ValueOf(i81.LevelKey),
		"LevelWarn":         reflect.ValueOf(i81.LevelWarn),
		"Log":               reflect.ValueOf(i81.Log),
		"LogAttrs":          reflect.ValueOf(i81.LogAttrs),
		"MessageKey":        reflect.ValueOf(i81.MessageKey),
		"New":               reflect.ValueOf(i81.New),
		"NewJSONHandler":    reflect.ValueOf(i81.NewJSONHandler),
		"NewLogLogger":      reflect.ValueOf(i81.NewLogLogger),
		"NewRecord":         reflect.ValueOf(i81.NewRecord),
		"NewTextHandler":    reflect.ValueOf(i81.NewTextHandler),
		"SetDefault":        reflect.ValueOf(i81.SetDefault),
		"SetLogLoggerLevel": reflect.ValueOf(i81.SetLogLoggerLevel),
		"SourceKey":         reflect.ValueOf(i81.SourceKey),
		"String":            reflect.ValueOf(i81.String),
		"StringValue":       reflect.ValueOf(i81.StringValue),
		"Time":              reflect.ValueOf(i81.Time),
		"TimeKey":           reflect.ValueOf(i81.TimeKey),
		"TimeValue":         reflect.ValueOf(i81.TimeValue),
		"Uint64":            reflect.ValueOf(i81.Uint64),
		"Uint64Value":       reflect.ValueOf(i81.Uint64Value),
		"Warn":              reflect.ValueOf(i81.Warn),
		"WarnContext":       reflect.ValueOf(i81.WarnContext),
		"With":              reflect.ValueOf(i81.With),
	}
	stdpkg["log/syslog"] = map[string]reflect.Value{
		"Dial":         reflect.ValueOf(i82.Dial),
		"LOG_ALERT":    reflect.ValueOf(i82.LOG_ALERT),
		"LOG_AUTH":     reflect.ValueOf(i82.LOG_AUTH),
		"LOG_AUTHPRIV": reflect.ValueOf(i82.LOG_AUTHPRIV),
		"LOG_CRIT":     reflect.ValueOf(i82.LOG_CRIT),
		"LOG_CRON":     reflect.ValueOf(i82.LOG_CRON),
		"LOG_DAEMON":   reflect.ValueOf(i82.LOG_DAEMON),
		"LOG_DEBUG":    reflect.ValueOf(i82.LOG_DEBUG),
		"LOG_EMERG":    reflect.ValueOf(i82.LOG_EMERG),
		"LOG_ERR":      reflect.ValueOf(i82.LOG_ERR),
		"LOG_FTP":      reflect.ValueOf(i82.LOG_FTP),
		"LOG_INFO":     reflect.ValueOf(i82.LOG_INFO),
		"LOG_KERN":     reflect.ValueOf(i82.LOG_KERN),
		"LOG_LOCAL0":   reflect.ValueOf(i82.LOG_LOCAL0),
		"LOG_LOCAL1":   reflect.ValueOf(i82.LOG_LOCAL1),
		"LOG_LOCAL2":   reflect.ValueOf(i82.LOG_LOCAL2),
		"LOG_LOCAL3":   reflect.ValueOf(i82.LOG_LOCAL3),
		"LOG_LOCAL4":   reflect.ValueOf(i82.LOG_LOCAL4),
		"LOG_LOCAL5":   reflect.ValueOf(i82.LOG_LOCAL5),
		"LOG_LOCAL6":   reflect.ValueOf(i82.LOG_LOCAL6),
		"LOG_LOCAL7":   reflect.ValueOf(i82.LOG_LOCAL7),
		"LOG_LPR":      reflect.ValueOf(i82.LOG_LPR),
		"LOG_MAIL":     reflect.ValueOf(i82.LOG_MAIL),
		"LOG_NEWS":     reflect.ValueOf(i82.LOG_NEWS),
		"LOG_NOTICE":   reflect.ValueOf(i82.LOG_NOTICE),
		"LOG_SYSLOG":   reflect.ValueOf(i82.LOG_SYSLOG),
		"LOG_USER":     reflect.ValueOf(i82.LOG_USER),
		"LOG_UUCP":     reflect.ValueOf(i82.LOG_UUCP),
		"LOG_WARNING":  reflect.ValueOf(i82.LOG_WARNING),
		"New":          reflect.ValueOf(i82.New),
		"NewLogger":    reflect.ValueOf(i82.NewLogger),
	}
	stdpkg["math"] = map[string]reflect.Value{
		"Abs":                    reflect.ValueOf(i83.Abs),
		"Acos":                   reflect.ValueOf(i83.Acos),
		"Acosh":                  reflect.ValueOf(i83.Acosh),
		"Asin":                   reflect.ValueOf(i83.Asin),
		"Asinh":                  reflect.ValueOf(i83.Asinh),
		"Atan":                   reflect.ValueOf(i83.Atan),
		"Atan2":                  reflect.ValueOf(i83.Atan2),
		"Atanh":                  reflect.ValueOf(i83.Atanh),
		"Cbrt":                   reflect.ValueOf(i83.Cbrt),
		"Ceil":                   reflect.ValueOf(i83.Ceil),
		"Copysign":               reflect.ValueOf(i83.Copysign),
		"Cos":                    reflect.ValueOf(i83.Cos),
		"Cosh":                   reflect.ValueOf(i83.Cosh),
		"Dim":                    reflect.ValueOf(i83.Dim),
		"E":                      reflect.ValueOf(i83.E),
		"Erf":                    reflect.ValueOf(i83.Erf),
		"Erfc":                   reflect.ValueOf(i83.Erfc),
		"Erfcinv":                reflect.ValueOf(i83.Erfcinv),
		"Erfinv":                 reflect.ValueOf(i83.Erfinv),
		"Exp":                    reflect.ValueOf(i83.Exp),
		"Exp2":                   reflect.ValueOf(i83.Exp2),
		"Expm1":                  reflect.ValueOf(i83.Expm1),
		"FMA":                    reflect.ValueOf(i83.FMA),
		"Float32bits":            reflect.ValueOf(i83.Float32bits),
		"Float32frombits":        reflect.ValueOf(i83.Float32frombits),
		"Float64bits":            reflect.ValueOf(i83.Float64bits),
		"Float64frombits":        reflect.ValueOf(i83.Float64frombits),
		"Floor":                  reflect.ValueOf(i83.Floor),
		"Frexp":                  reflect.ValueOf(i83.Frexp),
		"Gamma":                  reflect.ValueOf(i83.Gamma),
		"Hypot":                  reflect.ValueOf(i83.Hypot),
		"Ilogb":                  reflect.ValueOf(i83.Ilogb),
		"Inf":                    reflect.ValueOf(i83.Inf),
		"IsInf":                  reflect.ValueOf(i83.IsInf),
		"IsNaN":                  reflect.ValueOf(i83.IsNaN),
		"J0":                     reflect.ValueOf(i83.J0),
		"J1":                     reflect.ValueOf(i83.J1),
		"Jn":                     reflect.ValueOf(i83.Jn),
		"Ldexp":                  reflect.ValueOf(i83.Ldexp),
		"Lgamma":                 reflect.ValueOf(i83.Lgamma),
		"Ln10":                   reflect.ValueOf(i83.Ln10),
		"Ln2":                    reflect.ValueOf(i83.Ln2),
		"Log":                    reflect.ValueOf(i83.Log),
		"Log10":                  reflect.ValueOf(i83.Log10),
		"Log10E":                 reflect.ValueOf(i83.Log10E),
		"Log1p":                  reflect.ValueOf(i83.Log1p),
		"Log2":                   reflect.ValueOf(i83.Log2),
		"Log2E":                  reflect.ValueOf(i83.Log2E),
		"Logb":                   reflect.ValueOf(i83.Logb),
		"Max":                    reflect.ValueOf(i83.Max),
		"MaxFloat32":             reflect.ValueOf(i83.MaxFloat32),
		"MaxFloat64":             reflect.ValueOf(i83.MaxFloat64),
		"MaxInt":                 reflect.ValueOf(i83.MaxInt),
		"MaxInt16":               reflect.ValueOf(i83.MaxInt16),
		"MaxInt32":               reflect.ValueOf(i83.MaxInt32),
		"MaxInt64":               reflect.ValueOf(i83.MaxInt64),
		"MaxInt8":                reflect.ValueOf(i83.MaxInt8),
		"MaxUint":                reflect.ValueOf(i83.MaxUint),
		"MaxUint16":              reflect.ValueOf(i83.MaxUint16),
		"MaxUint32":              reflect.ValueOf(i83.MaxUint32),
		"MaxUint64":              reflect.ValueOf(i83.MaxUint64),
		"MaxUint8":               reflect.ValueOf(i83.MaxUint8),
		"Min":                    reflect.ValueOf(i83.Min),
		"MinInt":                 reflect.ValueOf(i83.MinInt),
		"MinInt16":               reflect.ValueOf(i83.MinInt16),
		"MinInt32":               reflect.ValueOf(i83.MinInt32),
		"MinInt64":               reflect.ValueOf(i83.MinInt64),
		"MinInt8":                reflect.ValueOf(i83.MinInt8),
		"Mod":                    reflect.ValueOf(i83.Mod),
		"Modf":                   reflect.ValueOf(i83.Modf),
		"NaN":                    reflect.ValueOf(i83.NaN),
		"Nextafter":              reflect.ValueOf(i83.Nextafter),
		"Nextafter32":            reflect.ValueOf(i83.Nextafter32),
		"Phi":                    reflect.ValueOf(i83.Phi),
		"Pi":                     reflect.ValueOf(i83.Pi),
		"Pow":                    reflect.ValueOf(i83.Pow),
		"Pow10":                  reflect.ValueOf(i83.Pow10),
		"Remainder":              reflect.ValueOf(i83.Remainder),
		"Round":                  reflect.ValueOf(i83.Round),
		"RoundToEven":            reflect.ValueOf(i83.RoundToEven),
		"Signbit":                reflect.ValueOf(i83.Signbit),
		"Sin":                    reflect.ValueOf(i83.Sin),
		"Sincos":                 reflect.ValueOf(i83.Sincos),
		"Sinh":                   reflect.ValueOf(i83.Sinh),
		"SmallestNonzeroFloat32": reflect.ValueOf(i83.SmallestNonzeroFloat32),
		"SmallestNonzeroFloat64": reflect.ValueOf(i83.SmallestNonzeroFloat64),
		"Sqrt":                   reflect.ValueOf(i83.Sqrt),
		"Sqrt2":                  reflect.ValueOf(i83.Sqrt2),
		"SqrtE":                  reflect.ValueOf(i83.SqrtE),
		"SqrtPhi":                reflect.ValueOf(i83.SqrtPhi),
		"SqrtPi":                 reflect.ValueOf(i83.SqrtPi),
		"Tan":                    reflect.ValueOf(i83.Tan),
		"Tanh":                   reflect.ValueOf(i83.Tanh),
		"Trunc":                  reflect.ValueOf(i83.Trunc),
		"Y0":                     reflect.ValueOf(i83.Y0),
		"Y1":                     reflect.ValueOf(i83.Y1),
		"Yn":                     reflect.ValueOf(i83.Yn),
	}
	stdpkg["math/big"] = map[string]reflect.Value{
		"Above":         reflect.ValueOf(i84.Above),
		"AwayFromZero":  reflect.ValueOf(i84.AwayFromZero),
		"Below":         reflect.ValueOf(i84.Below),
		"Exact":         reflect.ValueOf(i84.Exact),
		"Jacobi":        reflect.ValueOf(i84.Jacobi),
		"MaxBase":       reflect.ValueOf(i84.MaxBase),
		"MaxExp":        reflect.ValueOf(i84.MaxExp),
		"MaxPrec":       reflect.ValueOf(i84.MaxPrec),
		"MinExp":        reflect.ValueOf(i84.MinExp),
		"NewFloat":      reflect.ValueOf(i84.NewFloat),
		"NewInt":        reflect.ValueOf(i84.NewInt),
		"NewRat":        reflect.ValueOf(i84.NewRat),
		"ParseFloat":    reflect.ValueOf(i84.ParseFloat),
		"ToNearestAway": reflect.ValueOf(i84.ToNearestAway),
		"ToNearestEven": reflect.ValueOf(i84.ToNearestEven),
		"ToNegativeInf": reflect.ValueOf(i84.ToNegativeInf),
		"ToPositiveInf": reflect.ValueOf(i84.ToPositiveInf),
		"ToZero":        reflect.ValueOf(i84.ToZero),
	}
	stdpkg["math/bits"] = map[string]reflect.Value{
		"Add":             reflect.ValueOf(i85.Add),
		"Add32":           reflect.ValueOf(i85.Add32),
		"Add64":           reflect.ValueOf(i85.Add64),
		"Div":             reflect.ValueOf(i85.Div),
		"Div32":           reflect.ValueOf(i85.Div32),
		"Div64":           reflect.ValueOf(i85.Div64),
		"LeadingZeros":    reflect.ValueOf(i85.LeadingZeros),
		"LeadingZeros16":  reflect.ValueOf(i85.LeadingZeros16),
		"LeadingZeros32":  reflect.ValueOf(i85.LeadingZeros32),
		"LeadingZeros64":  reflect.ValueOf(i85.LeadingZeros64),
		"LeadingZeros8":   reflect.ValueOf(i85.LeadingZeros8),
		"Len":             reflect.ValueOf(i85.Len),
		"Len16":           reflect.ValueOf(i85.Len16),
		"Len32":           reflect.ValueOf(i85.Len32),
		"Len64":           reflect.ValueOf(i85.Len64),
		"Len8":            reflect.ValueOf(i85.Len8),
		"Mul":             reflect.ValueOf(i85.Mul),
		"Mul32":           reflect.ValueOf(i85.Mul32),
		"Mul64":           reflect.ValueOf(i85.Mul64),
		"OnesCount":       reflect.ValueOf(i85.OnesCount),
		"OnesCount16":     reflect.ValueOf(i85.OnesCount16),
		"OnesCount32":     reflect.ValueOf(i85.OnesCount32),
		"OnesCount64":     reflect.ValueOf(i85.OnesCount64),
		"OnesCount8":      reflect.ValueOf(i85.OnesCount8),
		"Rem":             reflect.ValueOf(i85.Rem),
		"Rem32":           reflect.ValueOf(i85.Rem32),
		"Rem64":           reflect.ValueOf(i85.Rem64),
		"Reverse":         reflect.ValueOf(i85.Reverse),
		"Reverse16":       reflect.ValueOf(i85.Reverse16),
		"Reverse32":       reflect.ValueOf(i85.Reverse32),
		"Reverse64":       reflect.ValueOf(i85.Reverse64),
		"Reverse8":        reflect.ValueOf(i85.Reverse8),
		"ReverseBytes":    reflect.ValueOf(i85.ReverseBytes),
		"ReverseBytes16":  reflect.ValueOf(i85.ReverseBytes16),
		"ReverseBytes32":  reflect.ValueOf(i85.ReverseBytes32),
		"ReverseBytes64":  reflect.ValueOf(i85.ReverseBytes64),
		"RotateLeft":      reflect.ValueOf(i85.RotateLeft),
		"RotateLeft16":    reflect.ValueOf(i85.RotateLeft16),
		"RotateLeft32":    reflect.ValueOf(i85.RotateLeft32),
		"RotateLeft64":    reflect.ValueOf(i85.RotateLeft64),
		"RotateLeft8":     reflect.ValueOf(i85.RotateLeft8),
		"Sub":             reflect.ValueOf(i85.Sub),
		"Sub32":           reflect.ValueOf(i85.Sub32),
		"Sub64":           reflect.ValueOf(i85.Sub64),
		"TrailingZeros":   reflect.ValueOf(i85.TrailingZeros),
		"TrailingZeros16": reflect.ValueOf(i85.TrailingZeros16),
		"TrailingZeros32": reflect.ValueOf(i85.TrailingZeros32),
		"TrailingZeros64": reflect.ValueOf(i85.TrailingZeros64),
		"TrailingZeros8":  reflect.ValueOf(i85.TrailingZeros8),
		"UintSize":        reflect.ValueOf(i85.UintSize),
	}
	stdpkg["math/cmplx"] = map[string]reflect.Value{
		"Abs":   reflect.ValueOf(i86.Abs),
		"Acos":  reflect.ValueOf(i86.Acos),
		"Acosh": reflect.ValueOf(i86.Acosh),
		"Asin":  reflect.ValueOf(i86.Asin),
		"Asinh": reflect.ValueOf(i86.Asinh),
		"Atan":  reflect.ValueOf(i86.Atan),
		"Atanh": reflect.ValueOf(i86.Atanh),
		"Conj":  reflect.ValueOf(i86.Conj),
		"Cos":   reflect.ValueOf(i86.Cos),
		"Cosh":  reflect.ValueOf(i86.Cosh),
		"Cot":   reflect.ValueOf(i86.Cot),
		"Exp":   reflect.ValueOf(i86.Exp),
		"Inf":   reflect.ValueOf(i86.Inf),
		"IsInf": reflect.ValueOf(i86.IsInf),
		"IsNaN": reflect.ValueOf(i86.IsNaN),
		"Log":   reflect.ValueOf(i86.Log),
		"Log10": reflect.ValueOf(i86.Log10),
		"NaN":   reflect.ValueOf(i86.NaN),
		"Phase": reflect.ValueOf(i86.Phase),
		"Polar": reflect.ValueOf(i86.Polar),
		"Pow":   reflect.ValueOf(i86.Pow),
		"Rect":  reflect.ValueOf(i86.Rect),
		"Sin":   reflect.ValueOf(i86.Sin),
		"Sinh":  reflect.ValueOf(i86.Sinh),
		"Sqrt":  reflect.ValueOf(i86.Sqrt),
		"Tan":   reflect.ValueOf(i86.Tan),
		"Tanh":  reflect.ValueOf(i86.Tanh),
	}
	stdpkg["math/rand"] = map[string]reflect.Value{
		"ExpFloat64":  reflect.ValueOf(i87.ExpFloat64),
		"Float32":     reflect.ValueOf(i87.Float32),
		"Float64":     reflect.ValueOf(i87.Float64),
		"Int":         reflect.ValueOf(i87.Int),
		"Int31":       reflect.ValueOf(i87.Int31),
		"Int31n":      reflect.ValueOf(i87.Int31n),
		"Int63":       reflect.ValueOf(i87.Int63),
		"Int63n":      reflect.ValueOf(i87.Int63n),
		"Intn":        reflect.ValueOf(i87.Intn),
		"New":         reflect.ValueOf(i87.New),
		"NewSource":   reflect.ValueOf(i87.NewSource),
		"NewZipf":     reflect.ValueOf(i87.NewZipf),
		"NormFloat64": reflect.ValueOf(i87.NormFloat64),
		"Perm":        reflect.ValueOf(i87.Perm),
		"Read":        reflect.ValueOf(i87.Read),
		"Seed":        reflect.ValueOf(i87.Seed),
		"Shuffle":     reflect.ValueOf(i87.Shuffle),
		"Uint32":      reflect.ValueOf(i87.Uint32),
		"Uint64":      reflect.ValueOf(i87.Uint64),
	}
	stdpkg["mime"] = map[string]reflect.Value{
		"AddExtensionType":         reflect.ValueOf(i88.AddExtensionType),
		"BEncoding":                reflect.ValueOf(i88.BEncoding),
		"ErrInvalidMediaParameter": reflect.ValueOf(i88.ErrInvalidMediaParameter),
		"ExtensionsByType":         reflect.ValueOf(i88.ExtensionsByType),
		"FormatMediaType":          reflect.ValueOf(i88.FormatMediaType),
		"ParseMediaType":           reflect.ValueOf(i88.ParseMediaType),
		"QEncoding":                reflect.ValueOf(i88.QEncoding),
		"TypeByExtension":          reflect.ValueOf(i88.TypeByExtension),
	}
	stdpkg["mime/multipart"] = map[string]reflect.Value{
		"ErrMessageTooLarge":     reflect.ValueOf(i89.ErrMessageTooLarge),
		"FileContentDisposition": reflect.ValueOf(i89.FileContentDisposition),
		"NewReader":              reflect.ValueOf(i89.NewReader),
		"NewWriter":              reflect.ValueOf(i89.NewWriter),
	}
	stdpkg["mime/quotedprintable"] = map[string]reflect.Value{
		"NewReader": reflect.ValueOf(i90.NewReader),
		"NewWriter": reflect.ValueOf(i90.NewWriter),
	}
	stdpkg["net"] = map[string]reflect.Value{
		"CIDRMask":                   reflect.ValueOf(i91.CIDRMask),
		"DefaultResolver":            reflect.ValueOf(i91.DefaultResolver),
		"Dial":                       reflect.ValueOf(i91.Dial),
		"DialIP":                     reflect.ValueOf(i91.DialIP),
		"DialTCP":                    reflect.ValueOf(i91.DialTCP),
		"DialTimeout":                reflect.ValueOf(i91.DialTimeout),
		"DialUDP":                    reflect.ValueOf(i91.DialUDP),
		"DialUnix":                   reflect.ValueOf(i91.DialUnix),
		"ErrClosed":                  reflect.ValueOf(i91.ErrClosed),
		"ErrWriteToConnected":        reflect.ValueOf(i91.ErrWriteToConnected),
		"FileConn":                   reflect.ValueOf(i91.FileConn),
		"FileListener":               reflect.ValueOf(i91.FileListener),
		"FilePacketConn":             reflect.ValueOf(i91.FilePacketConn),
		"FlagBroadcast":              reflect.ValueOf(i91.FlagBroadcast),
		"FlagLoopback":               reflect.ValueOf(i91.FlagLoopback),
		"FlagMulticast":              reflect.ValueOf(i91.FlagMulticast),
		"FlagPointToPoint":           reflect.ValueOf(i91.FlagPointToPoint),
		"FlagRunning":                reflect.ValueOf(i91.FlagRunning),
		"FlagUp":                     reflect.ValueOf(i91.FlagUp),
		"IPv4":                       reflect.ValueOf(i91.IPv4),
		"IPv4Mask":                   reflect.ValueOf(i91.IPv4Mask),
		"IPv4allrouter":              reflect.ValueOf(i91.IPv4allrouter),
		"IPv4allsys":                 reflect.ValueOf(i91.IPv4allsys),
		"IPv4bcast":                  reflect.ValueOf(i91.IPv4bcast),
		"IPv4len":                    reflect.ValueOf(i91.IPv4len),
		"IPv4zero":                   reflect.ValueOf(i91.IPv4zero),
		"IPv6interfacelocalallnodes": reflect.ValueOf(i91.IPv6interfacelocalallnodes),
		"IPv6len":                    reflect.ValueOf(i91.IPv6len),
		"IPv6linklocalallnodes":      reflect.ValueOf(i91.IPv6linklocalallnodes),
		"IPv6linklocalallrouters":    reflect.ValueOf(i91.IPv6linklocalallrouters),
		"IPv6loopback":               reflect.ValueOf(i91.IPv6loopback),
		"IPv6unspecified":            reflect.ValueOf(i91.IPv6unspecified),
		"IPv6zero":                   reflect.ValueOf(i91.IPv6zero),
		"InterfaceAddrs":             reflect.ValueOf(i91.InterfaceAddrs),
		"InterfaceByIndex":           reflect.ValueOf(i91.InterfaceByIndex),
		"InterfaceByName":            reflect.ValueOf(i91.InterfaceByName),
		"Interfaces":                 reflect.ValueOf(i91.Interfaces),
		"JoinHostPort":               reflect.ValueOf(i91.JoinHostPort),
		"Listen":                     reflect.ValueOf(i91.Listen),
		"ListenIP":                   reflect.ValueOf(i91.ListenIP),
		"ListenMulticastUDP":         reflect.ValueOf(i91.ListenMulticastUDP),
		"ListenPacket":               reflect.ValueOf(i91.ListenPacket),
		"ListenTCP":                  reflect.ValueOf(i91.ListenTCP),
		"ListenUDP":                  reflect.ValueOf(i91.ListenUDP),
		"ListenUnix":                 reflect.ValueOf(i91.ListenUnix),
		"ListenUnixgram":             reflect.ValueOf(i91.ListenUnixgram),
		"LookupAddr":                 reflect.ValueOf(i91.LookupAddr),
		"LookupCNAME":                reflect.ValueOf(i91.LookupCNAME),
		"LookupHost":                 reflect.ValueOf(i91.LookupHost),
		"LookupIP":                   reflect.ValueOf(i91.LookupIP),
		"LookupMX":                   reflect.ValueOf(i91.LookupMX),
		"LookupNS":                   reflect.ValueOf(i91.LookupNS),
		"LookupPort":                 reflect.ValueOf(i91.LookupPort),
		"LookupSRV":                  reflect.ValueOf(i91.LookupSRV),
		"LookupTXT":                  reflect.ValueOf(i91.LookupTXT),
		"ParseCIDR":                  reflect.ValueOf(i91.ParseCIDR),
		"ParseIP":                    reflect.ValueOf(i91.ParseIP),
		"ParseMAC":                   reflect.ValueOf(i91.ParseMAC),
		"Pipe":                       reflect.ValueOf(i91.Pipe),
		"ResolveIPAddr":              reflect.ValueOf(i91.ResolveIPAddr),
		"ResolveTCPAddr":             reflect.ValueOf(i91.ResolveTCPAddr),
		"ResolveUDPAddr":             reflect.ValueOf(i91.ResolveUDPAddr),
		"ResolveUnixAddr":            reflect.ValueOf(i91.ResolveUnixAddr),
		"SplitHostPort":              reflect.ValueOf(i91.SplitHostPort),
		"TCPAddrFromAddrPort":        reflect.ValueOf(i91.TCPAddrFromAddrPort),
		"UDPAddrFromAddrPort":        reflect.ValueOf(i91.UDPAddrFromAddrPort),
	}
	stdpkg["net/http"] = map[string]reflect.Value{
		"AllowQuerySemicolons":                reflect.ValueOf(i92.AllowQuerySemicolons),
		"CanonicalHeaderKey":                  reflect.ValueOf(i92.CanonicalHeaderKey),
		"DefaultClient":                       reflect.ValueOf(i92.DefaultClient),
		"DefaultMaxHeaderBytes":               reflect.ValueOf(i92.DefaultMaxHeaderBytes),
		"DefaultMaxIdleConnsPerHost":          reflect.ValueOf(i92.DefaultMaxIdleConnsPerHost),
		"DefaultServeMux":                     reflect.ValueOf(i92.DefaultServeMux),
		"DefaultTransport":                    reflect.ValueOf(i92.DefaultTransport),
		"DetectContentType":                   reflect.ValueOf(i92.DetectContentType),
		"ErrAbortHandler":                     reflect.ValueOf(i92.ErrAbortHandler),
		"ErrBodyNotAllowed":                   reflect.ValueOf(i92.ErrBodyNotAllowed),
		"ErrBodyReadAfterClose":               reflect.ValueOf(i92.ErrBodyReadAfterClose),
		"ErrContentLength":                    reflect.ValueOf(i92.ErrContentLength),
		"ErrHandlerTimeout":                   reflect.ValueOf(i92.ErrHandlerTimeout),
		"ErrHeaderTooLong":                    reflect.ValueOf(i92.ErrHeaderTooLong),
		"ErrHijacked":                         reflect.ValueOf(i92.ErrHijacked),
		"ErrLineTooLong":                      reflect.ValueOf(i92.ErrLineTooLong),
		"ErrMissingBoundary":                  reflect.ValueOf(i92.ErrMissingBoundary),
		"ErrMissingContentLength":             reflect.ValueOf(i92.ErrMissingContentLength),
		"ErrMissingFile":                      reflect.ValueOf(i92.ErrMissingFile),
		"ErrNoCookie":                         reflect.ValueOf(i92.ErrNoCookie),
		"ErrNoLocation":                       reflect.ValueOf(i92.ErrNoLocation),
		"ErrNotMultipart":                     reflect.ValueOf(i92.ErrNotMultipart),
		"ErrNotSupported":                     reflect.ValueOf(i92.ErrNotSupported),
		"ErrSchemeMismatch":                   reflect.ValueOf(i92.ErrSchemeMismatch),
		"ErrServerClosed":                     reflect.ValueOf(i92.ErrServerClosed),
		"ErrShortBody":                        reflect.ValueOf(i92.ErrShortBody),
		"ErrSkipAltProtocol":                  reflect.ValueOf(i92.ErrSkipAltProtocol),
		"ErrUnexpectedTrailer":                reflect.ValueOf(i92.ErrUnexpectedTrailer),
		"ErrUseLastResponse":                  reflect.ValueOf(i92.ErrUseLastResponse),
		"ErrWriteAfterFlush":                  reflect.ValueOf(i92.ErrWriteAfterFlush),
		"Error":                               reflect.ValueOf(i92.Error),
		"FS":                                  reflect.ValueOf(i92.FS),
		"FileServer":                          reflect.ValueOf(i92.FileServer),
		"FileServerFS":                        reflect.ValueOf(i92.FileServerFS),
		"Get":                                 reflect.ValueOf(i92.Get),
		"Handle":                              reflect.ValueOf(i92.Handle),
		"HandleFunc":                          reflect.ValueOf(i92.HandleFunc),
		"Head":                                reflect.ValueOf(i92.Head),
		"ListenAndServe":                      reflect.ValueOf(i92.ListenAndServe),
		"ListenAndServeTLS":                   reflect.ValueOf(i92.ListenAndServeTLS),
		"LocalAddrContextKey":                 reflect.ValueOf(i92.LocalAddrContextKey),
		"MaxBytesHandler":                     reflect.ValueOf(i92.MaxBytesHandler),
		"MaxBytesReader":                      reflect.ValueOf(i92.MaxBytesReader),
		"MethodConnect":                       reflect.ValueOf(i92.MethodConnect),
		"MethodDelete":                        reflect.ValueOf(i92.MethodDelete),
		"MethodGet":                           reflect.ValueOf(i92.MethodGet),
		"MethodHead":                          reflect.ValueOf(i92.MethodHead),
		"MethodOptions":                       reflect.ValueOf(i92.MethodOptions),
		"MethodPatch":                         reflect.ValueOf(i92.MethodPatch),
		"MethodPost":                          reflect.ValueOf(i92.MethodPost),
		"MethodPut":                           reflect.ValueOf(i92.MethodPut),
		"MethodTrace":                         reflect.ValueOf(i92.MethodTrace),
		"NewCrossOriginProtection":            reflect.ValueOf(i92.NewCrossOriginProtection),
		"NewFileTransport":                    reflect.ValueOf(i92.NewFileTransport),
		"NewFileTransportFS":                  reflect.ValueOf(i92.NewFileTransportFS),
		"NewRequest":                          reflect.ValueOf(i92.NewRequest),
		"NewRequestWithContext":               reflect.ValueOf(i92.NewRequestWithContext),
		"NewResponseController":               reflect.ValueOf(i92.NewResponseController),
		"NewServeMux":                         reflect.ValueOf(i92.NewServeMux),
		"NoBody":                              reflect.ValueOf(i92.NoBody),
		"NotFound":                            reflect.ValueOf(i92.NotFound),
		"NotFoundHandler":                     reflect.ValueOf(i92.NotFoundHandler),
		"ParseCookie":                         reflect.ValueOf(i92.ParseCookie),
		"ParseHTTPVersion":                    reflect.ValueOf(i92.ParseHTTPVersion),
		"ParseSetCookie":                      reflect.ValueOf(i92.ParseSetCookie),
		"ParseTime":                           reflect.ValueOf(i92.ParseTime),
		"Post":                                reflect.ValueOf(i92.Post),
		"PostForm":                            reflect.ValueOf(i92.PostForm),
		"ProxyFromEnvironment":                reflect.ValueOf(i92.ProxyFromEnvironment),
		"ProxyURL":                            reflect.ValueOf(i92.ProxyURL),
		"ReadRequest":                         reflect.ValueOf(i92.ReadRequest),
		"ReadResponse":                        reflect.ValueOf(i92.ReadResponse),
		"Redirect":                            reflect.ValueOf(i92.Redirect),
		"RedirectHandler":                     reflect.ValueOf(i92.RedirectHandler),
		"SameSiteDefaultMode":                 reflect.ValueOf(i92.SameSiteDefaultMode),
		"SameSiteLaxMode":                     reflect.ValueOf(i92.SameSiteLaxMode),
		"SameSiteNoneMode":                    reflect.ValueOf(i92.SameSiteNoneMode),
		"SameSiteStrictMode":                  reflect.ValueOf(i92.SameSiteStrictMode),
		"Serve":                               reflect.ValueOf(i92.Serve),
		"ServeContent":                        reflect.ValueOf(i92.ServeContent),
		"ServeFile":                           reflect.ValueOf(i92.ServeFile),
		"ServeFileFS":                         reflect.ValueOf(i92.ServeFileFS),
		"ServeTLS":                            reflect.ValueOf(i92.ServeTLS),
		"ServerContextKey":                    reflect.ValueOf(i92.ServerContextKey),
		"SetCookie":                           reflect.ValueOf(i92.SetCookie),
		"StateActive":                         reflect.ValueOf(i92.StateActive),
		"StateClosed":                         reflect.ValueOf(i92.StateClosed),
		"StateHijacked":                       reflect.ValueOf(i92.StateHijacked),
		"StateIdle":                           reflect.ValueOf(i92.StateIdle),
		"StateNew":                            reflect.ValueOf(i92.StateNew),
		"StatusAccepted":                      reflect.ValueOf(i92.StatusAccepted),
		"StatusAlreadyReported":               reflect.ValueOf(i92.StatusAlreadyReported),
		"StatusBadGateway":                    reflect.ValueOf(i92.StatusBadGateway),
		"StatusBadRequest":                    reflect.ValueOf(i92.StatusBadRequest),
		"StatusConflict":                      reflect.ValueOf(i92.StatusConflict),
		"StatusContinue":                      reflect.ValueOf(i92.StatusContinue),
		"StatusCreated":                       reflect.ValueOf(i92.StatusCreated),
		"StatusEarlyHints":                    reflect.ValueOf(i92.StatusEarlyHints),
		"StatusExpectationFailed":             reflect.ValueOf(i92.StatusExpectationFailed),
		"StatusFailedDependency":              reflect.ValueOf(i92.StatusFailedDependency),
		"StatusForbidden":                     reflect.ValueOf(i92.StatusForbidden),
		"StatusFound":                         reflect.ValueOf(i92.StatusFound),
		"StatusGatewayTimeout":                reflect.ValueOf(i92.StatusGatewayTimeout),
		"StatusGone":                          reflect.ValueOf(i92.StatusGone),
		"StatusHTTPVersionNotSupported":       reflect.ValueOf(i92.StatusHTTPVersionNotSupported),
		"StatusIMUsed":                        reflect.ValueOf(i92.StatusIMUsed),
		"StatusInsufficientStorage":           reflect.ValueOf(i92.StatusInsufficientStorage),
		"StatusInternalServerError":           reflect.ValueOf(i92.StatusInternalServerError),
		"StatusLengthRequired":                reflect.ValueOf(i92.StatusLengthRequired),
		"StatusLocked":                        reflect.ValueOf(i92.StatusLocked),
		"StatusLoopDetected":                  reflect.ValueOf(i92.StatusLoopDetected),
		"StatusMethodNotAllowed":              reflect.ValueOf(i92.StatusMethodNotAllowed),
		"StatusMisdirectedRequest":            reflect.ValueOf(i92.StatusMisdirectedRequest),
		"StatusMovedPermanently":              reflect.ValueOf(i92.StatusMovedPermanently),
		"StatusMultiStatus":                   reflect.ValueOf(i92.StatusMultiStatus),
		"StatusMultipleChoices":               reflect.ValueOf(i92.StatusMultipleChoices),
		"StatusNetworkAuthenticationRequired": reflect.ValueOf(i92.StatusNetworkAuthenticationRequired),
		"StatusNoContent":                     reflect.ValueOf(i92.StatusNoContent),
		"StatusNonAuthoritativeInfo":          reflect.ValueOf(i92.StatusNonAuthoritativeInfo),
		"StatusNotAcceptable":                 reflect.ValueOf(i92.StatusNotAcceptable),
		"StatusNotExtended":                   reflect.ValueOf(i92.StatusNotExtended),
		"StatusNotFound":                      reflect.ValueOf(i92.StatusNotFound),
		"StatusNotImplemented":                reflect.ValueOf(i92.StatusNotImplemented),
		"StatusNotModified":                   reflect.ValueOf(i92.StatusNotModified),
		"StatusOK":                            reflect.ValueOf(i92.StatusOK),
		"StatusPartialContent":                reflect.ValueOf(i92.StatusPartialContent),
		"StatusPaymentRequired":               reflect.ValueOf(i92.StatusPaymentRequired),
		"StatusPermanentRedirect":             reflect.ValueOf(i92.StatusPermanentRedirect),
		"StatusPreconditionFailed":            reflect.ValueOf(i92.StatusPreconditionFailed),
		"StatusPreconditionRequired":          reflect.ValueOf(i92.StatusPreconditionRequired),
		"StatusProcessing":                    reflect.ValueOf(i92.StatusProcessing),
		"StatusProxyAuthRequired":             reflect.ValueOf(i92.StatusProxyAuthRequired),
		"StatusRequestEntityTooLarge":         reflect.ValueOf(i92.StatusRequestEntityTooLarge),
		"StatusRequestHeaderFieldsTooLarge":   reflect.ValueOf(i92.StatusRequestHeaderFieldsTooLarge),
		"StatusRequestTimeout":                reflect.ValueOf(i92.StatusRequestTimeout),
		"StatusRequestURITooLong":             reflect.ValueOf(i92.StatusRequestURITooLong),
		"StatusRequestedRangeNotSatisfiable":  reflect.ValueOf(i92.StatusRequestedRangeNotSatisfiable),
		"StatusResetContent":                  reflect.ValueOf(i92.StatusResetContent),
		"StatusSeeOther":                      reflect.ValueOf(i92.StatusSeeOther),
		"StatusServiceUnavailable":            reflect.ValueOf(i92.StatusServiceUnavailable),
		"StatusSwitchingProtocols":            reflect.ValueOf(i92.StatusSwitchingProtocols),
		"StatusTeapot":                        reflect.ValueOf(i92.StatusTeapot),
		"StatusTemporaryRedirect":             reflect.ValueOf(i92.StatusTemporaryRedirect),
		"StatusText":                          reflect.ValueOf(i92.StatusText),
		"StatusTooEarly":                      reflect.ValueOf(i92.StatusTooEarly),
		"StatusTooManyRequests":               reflect.ValueOf(i92.StatusTooManyRequests),
		"StatusUnauthorized":                  reflect.ValueOf(i92.StatusUnauthorized),
		"StatusUnavailableForLegalReasons":    reflect.ValueOf(i92.StatusUnavailableForLegalReasons),
		"StatusUnprocessableEntity":           reflect.ValueOf(i92.StatusUnprocessableEntity),
		"StatusUnsupportedMediaType":          reflect.ValueOf(i92.StatusUnsupportedMediaType),
		"StatusUpgradeRequired":               reflect.ValueOf(i92.StatusUpgradeRequired),
		"StatusUseProxy":                      reflect.ValueOf(i92.StatusUseProxy),
		"StatusVariantAlsoNegotiates":         reflect.ValueOf(i92.StatusVariantAlsoNegotiates),
		"StripPrefix":                         reflect.ValueOf(i92.StripPrefix),
		"TimeFormat":                          reflect.ValueOf(i92.TimeFormat),
		"TimeoutHandler":                      reflect.ValueOf(i92.TimeoutHandler),
		"TrailerPrefix":                       reflect.ValueOf(i92.TrailerPrefix),
	}
	stdpkg["net/http/cgi"] = map[string]reflect.Value{
		"Request":        reflect.ValueOf(i93.Request),
		"RequestFromMap": reflect.ValueOf(i93.RequestFromMap),
		"Serve":          reflect.ValueOf(i93.Serve),
	}
	stdpkg["net/http/cookiejar"] = map[string]reflect.Value{
		"New": reflect.ValueOf(i94.New),
	}
	stdpkg["net/http/fcgi"] = map[string]reflect.Value{
		"ErrConnClosed":     reflect.ValueOf(i95.ErrConnClosed),
		"ErrRequestAborted": reflect.ValueOf(i95.ErrRequestAborted),
		"ProcessEnv":        reflect.ValueOf(i95.ProcessEnv),
		"Serve":             reflect.ValueOf(i95.Serve),
	}
	stdpkg["net/http/httptest"] = map[string]reflect.Value{
		"DefaultRemoteAddr":     reflect.ValueOf(i96.DefaultRemoteAddr),
		"NewRecorder":           reflect.ValueOf(i96.NewRecorder),
		"NewRequest":            reflect.ValueOf(i96.NewRequest),
		"NewRequestWithContext": reflect.ValueOf(i96.NewRequestWithContext),
		"NewServer":             reflect.ValueOf(i96.NewServer),
		"NewTLSServer":          reflect.ValueOf(i96.NewTLSServer),
		"NewUnstartedServer":    reflect.ValueOf(i96.NewUnstartedServer),
	}
	stdpkg["net/http/httptrace"] = map[string]reflect.Value{
		"ContextClientTrace": reflect.ValueOf(i97.ContextClientTrace),
		"WithClientTrace":    reflect.ValueOf(i97.WithClientTrace),
	}
	stdpkg["net/http/httputil"] = map[string]reflect.Value{
		"DumpRequest":               reflect.ValueOf(i98.DumpRequest),
		"DumpRequestOut":            reflect.ValueOf(i98.DumpRequestOut),
		"DumpResponse":              reflect.ValueOf(i98.DumpResponse),
		"ErrClosed":                 reflect.ValueOf(i98.ErrClosed),
		"ErrLineTooLong":            reflect.ValueOf(i98.ErrLineTooLong),
		"ErrPersistEOF":             reflect.ValueOf(i98.ErrPersistEOF),
		"ErrPipeline":               reflect.ValueOf(i98.ErrPipeline),
		"NewChunkedReader":          reflect.ValueOf(i98.NewChunkedReader),
		"NewChunkedWriter":          reflect.ValueOf(i98.NewChunkedWriter),
		"NewClientConn":             reflect.ValueOf(i98.NewClientConn),
		"NewProxyClientConn":        reflect.ValueOf(i98.NewProxyClientConn),
		"NewServerConn":             reflect.ValueOf(i98.NewServerConn),
		"NewSingleHostReverseProxy": reflect.ValueOf(i98.NewSingleHostReverseProxy),
	}
	stdpkg["net/http/pprof"] = map[string]reflect.Value{
		"Cmdline": reflect.ValueOf(i99.Cmdline),
		"Handler": reflect.ValueOf(i99.Handler),
		"Index":   reflect.ValueOf(i99.Index),
		"Profile": reflect.ValueOf(i99.Profile),
		"Symbol":  reflect.ValueOf(i99.Symbol),
		"Trace":   reflect.ValueOf(i99.Trace),
	}
	stdpkg["net/mail"] = map[string]reflect.Value{
		"ErrHeaderNotPresent": reflect.ValueOf(i100.ErrHeaderNotPresent),
		"ParseAddress":        reflect.ValueOf(i100.ParseAddress),
		"ParseAddressList":    reflect.ValueOf(i100.ParseAddressList),
		"ParseDate":           reflect.ValueOf(i100.ParseDate),
		"ReadMessage":         reflect.ValueOf(i100.ReadMessage),
	}
	stdpkg["net/rpc"] = map[string]reflect.Value{
		"Accept":             reflect.ValueOf(i101.Accept),
		"DefaultDebugPath":   reflect.ValueOf(i101.DefaultDebugPath),
		"DefaultRPCPath":     reflect.ValueOf(i101.DefaultRPCPath),
		"DefaultServer":      reflect.ValueOf(i101.DefaultServer),
		"Dial":               reflect.ValueOf(i101.Dial),
		"DialHTTP":           reflect.ValueOf(i101.DialHTTP),
		"DialHTTPPath":       reflect.ValueOf(i101.DialHTTPPath),
		"ErrShutdown":        reflect.ValueOf(i101.ErrShutdown),
		"HandleHTTP":         reflect.ValueOf(i101.HandleHTTP),
		"NewClient":          reflect.ValueOf(i101.NewClient),
		"NewClientWithCodec": reflect.ValueOf(i101.NewClientWithCodec),
		"NewServer":          reflect.ValueOf(i101.NewServer),
		"Register":           reflect.ValueOf(i101.Register),
		"RegisterName":       reflect.ValueOf(i101.RegisterName),
		"ServeCodec":         reflect.ValueOf(i101.ServeCodec),
		"ServeConn":          reflect.ValueOf(i101.ServeConn),
		"ServeRequest":       reflect.ValueOf(i101.ServeRequest),
	}
	stdpkg["net/rpc/jsonrpc"] = map[string]reflect.Value{
		"Dial":           reflect.ValueOf(i102.Dial),
		"NewClient":      reflect.ValueOf(i102.NewClient),
		"NewClientCodec": reflect.ValueOf(i102.NewClientCodec),
		"NewServerCodec": reflect.ValueOf(i102.NewServerCodec),
		"ServeConn":      reflect.ValueOf(i102.ServeConn),
	}
	stdpkg["net/smtp"] = map[string]reflect.Value{
		"CRAMMD5Auth": reflect.ValueOf(i103.CRAMMD5Auth),
		"Dial":        reflect.ValueOf(i103.Dial),
		"NewClient":   reflect.ValueOf(i103.NewClient),
		"PlainAuth":   reflect.ValueOf(i103.PlainAuth),
		"SendMail":    reflect.ValueOf(i103.SendMail),
	}
	stdpkg["net/textproto"] = map[string]reflect.Value{
		"CanonicalMIMEHeaderKey": reflect.ValueOf(i104.CanonicalMIMEHeaderKey),
		"Dial":                   reflect.ValueOf(i104.Dial),
		"NewConn":                reflect.ValueOf(i104.NewConn),
		"NewReader":              reflect.ValueOf(i104.NewReader),
		"NewWriter":              reflect.ValueOf(i104.NewWriter),
		"TrimBytes":              reflect.ValueOf(i104.TrimBytes),
		"TrimString":             reflect.ValueOf(i104.TrimString),
	}
	stdpkg["net/url"] = map[string]reflect.Value{
		"JoinPath":        reflect.ValueOf(i105.JoinPath),
		"Parse":           reflect.ValueOf(i105.Parse),
		"ParseQuery":      reflect.ValueOf(i105.ParseQuery),
		"ParseRequestURI": reflect.ValueOf(i105.ParseRequestURI),
		"PathEscape":      reflect.ValueOf(i105.PathEscape),
		"PathUnescape":    reflect.ValueOf(i105.PathUnescape),
		"QueryEscape":     reflect.ValueOf(i105.QueryEscape),
		"QueryUnescape":   reflect.ValueOf(i105.QueryUnescape),
		"User":            reflect.ValueOf(i105.User),
		"UserPassword":    reflect.ValueOf(i105.UserPassword),
	}
	stdpkg["os"] = map[string]reflect.Value{
		"Args":                reflect.ValueOf(i106.Args),
		"Chdir":               reflect.ValueOf(i106.Chdir),
		"Chmod":               reflect.ValueOf(i106.Chmod),
		"Chown":               reflect.ValueOf(i106.Chown),
		"Chtimes":             reflect.ValueOf(i106.Chtimes),
		"Clearenv":            reflect.ValueOf(i106.Clearenv),
		"CopyFS":              reflect.ValueOf(i106.CopyFS),
		"Create":              reflect.ValueOf(i106.Create),
		"CreateTemp":          reflect.ValueOf(i106.CreateTemp),
		"DevNull":             reflect.ValueOf(i106.DevNull),
		"DirFS":               reflect.ValueOf(i106.DirFS),
		"Environ":             reflect.ValueOf(i106.Environ),
		"ErrClosed":           reflect.ValueOf(i106.ErrClosed),
		"ErrDeadlineExceeded": reflect.ValueOf(i106.ErrDeadlineExceeded),
		"ErrExist":            reflect.ValueOf(i106.ErrExist),
		"ErrInvalid":          reflect.ValueOf(i106.ErrInvalid),
		"ErrNoDeadline":       reflect.ValueOf(i106.ErrNoDeadline),
		"ErrNotExist":         reflect.ValueOf(i106.ErrNotExist),
		"ErrPermission":       reflect.ValueOf(i106.ErrPermission),
		"ErrProcessDone":      reflect.ValueOf(i106.ErrProcessDone),
		"Executable":          reflect.ValueOf(i106.Executable),
		"Exit":                reflect.ValueOf(i106.Exit),
		"Expand":              reflect.ValueOf(i106.Expand),
		"ExpandEnv":           reflect.ValueOf(i106.ExpandEnv),
		"FindProcess":         reflect.ValueOf(i106.FindProcess),
		"Getegid":             reflect.ValueOf(i106.Getegid),
		"Getenv":              reflect.ValueOf(i106.Getenv),
		"Geteuid":             reflect.ValueOf(i106.Geteuid),
		"Getgid":              reflect.ValueOf(i106.Getgid),
		"Getgroups":           reflect.ValueOf(i106.Getgroups),
		"Getpagesize":         reflect.ValueOf(i106.Getpagesize),
		"Getpid":              reflect.ValueOf(i106.Getpid),
		"Getppid":             reflect.ValueOf(i106.Getppid),
		"Getuid":              reflect.ValueOf(i106.Getuid),
		"Getwd":               reflect.ValueOf(i106.Getwd),
		"Hostname":            reflect.ValueOf(i106.Hostname),
		"Interrupt":           reflect.ValueOf(i106.Interrupt),
		"IsExist":             reflect.ValueOf(i106.IsExist),
		"IsNotExist":          reflect.ValueOf(i106.IsNotExist),
		"IsPathSeparator":     reflect.ValueOf(i106.IsPathSeparator),
		"IsPermission":        reflect.ValueOf(i106.IsPermission),
		"IsTimeout":           reflect.ValueOf(i106.IsTimeout),
		"Kill":                reflect.ValueOf(i106.Kill),
		"Lchown":              reflect.ValueOf(i106.Lchown),
		"Link":                reflect.ValueOf(i106.Link),
		"LookupEnv":           reflect.ValueOf(i106.LookupEnv),
		"Lstat":               reflect.ValueOf(i106.Lstat),
		"Mkdir":               reflect.ValueOf(i106.Mkdir),
		"MkdirAll":            reflect.ValueOf(i106.MkdirAll),
		"MkdirTemp":           reflect.ValueOf(i106.MkdirTemp),
		"ModeAppend":          reflect.ValueOf(i106.ModeAppend),
		"ModeCharDevice":      reflect.ValueOf(i106.ModeCharDevice),
		"ModeDevice":          reflect.ValueOf(i106.ModeDevice),
		"ModeDir":             reflect.ValueOf(i106.ModeDir),
		"ModeExclusive":       reflect.ValueOf(i106.ModeExclusive),
		"ModeIrregular":       reflect.ValueOf(i106.ModeIrregular),
		"ModeNamedPipe":       reflect.ValueOf(i106.ModeNamedPipe),
		"ModePerm":            reflect.ValueOf(i106.ModePerm),
		"ModeSetgid":          reflect.ValueOf(i106.ModeSetgid),
		"ModeSetuid":          reflect.ValueOf(i106.ModeSetuid),
		"ModeSocket":          reflect.ValueOf(i106.ModeSocket),
		"ModeSticky":          reflect.ValueOf(i106.ModeSticky),
		"ModeSymlink":         reflect.ValueOf(i106.ModeSymlink),
		"ModeTemporary":       reflect.ValueOf(i106.ModeTemporary),
		"ModeType":            reflect.ValueOf(i106.ModeType),
		"NewFile":             reflect.ValueOf(i106.NewFile),
		"NewSyscallError":     reflect.ValueOf(i106.NewSyscallError),
		"O_APPEND":            reflect.ValueOf(i106.O_APPEND),
		"O_CREATE":            reflect.ValueOf(i106.O_CREATE),
		"O_EXCL":              reflect.ValueOf(i106.O_EXCL),
		"O_RDONLY":            reflect.ValueOf(i106.O_RDONLY),
		"O_RDWR":              reflect.ValueOf(i106.O_RDWR),
		"O_SYNC":              reflect.ValueOf(i106.O_SYNC),
		"O_TRUNC":             reflect.ValueOf(i106.O_TRUNC),
		"O_WRONLY":            reflect.ValueOf(i106.O_WRONLY),
		"Open":                reflect.ValueOf(i106.Open),
		"OpenFile":            reflect.ValueOf(i106.OpenFile),
		"OpenInRoot":          reflect.ValueOf(i106.OpenInRoot),
		"OpenRoot":            reflect.ValueOf(i106.OpenRoot),
		"PathListSeparator":   reflect.ValueOf(i106.PathListSeparator),
		"PathSeparator":       reflect.ValueOf(i106.PathSeparator),
		"Pipe":                reflect.ValueOf(i106.Pipe),
		"ReadDir":             reflect.ValueOf(i106.ReadDir),
		"ReadFile":            reflect.ValueOf(i106.ReadFile),
		"Readlink":            reflect.ValueOf(i106.Readlink),
		"Remove":              reflect.ValueOf(i106.Remove),
		"RemoveAll":           reflect.ValueOf(i106.RemoveAll),
		"Rename":              reflect.ValueOf(i106.Rename),
		"SEEK_CUR":            reflect.ValueOf(i106.SEEK_CUR),
		"SEEK_END":            reflect.ValueOf(i106.SEEK_END),
		"SEEK_SET":            reflect.ValueOf(i106.SEEK_SET),
		"SameFile":            reflect.ValueOf(i106.SameFile),
		"Setenv":              reflect.ValueOf(i106.Setenv),
		"StartProcess":        reflect.ValueOf(i106.StartProcess),
		"Stat":                reflect.ValueOf(i106.Stat),
		"Stderr":              reflect.ValueOf(i106.Stderr),
		"Stdin":               reflect.ValueOf(i106.Stdin),
		"Stdout":              reflect.ValueOf(i106.Stdout),
		"Symlink":             reflect.ValueOf(i106.Symlink),
		"TempDir":             reflect.ValueOf(i106.TempDir),
		"Truncate":            reflect.ValueOf(i106.Truncate),
		"Unsetenv":            reflect.ValueOf(i106.Unsetenv),
		"UserCacheDir":        reflect.ValueOf(i106.UserCacheDir),
		"UserConfigDir":       reflect.ValueOf(i106.UserConfigDir),
		"UserHomeDir":         reflect.ValueOf(i106.UserHomeDir),
		"WriteFile":           reflect.ValueOf(i106.WriteFile),
	}
	stdpkg["os/exec"] = map[string]reflect.Value{
		"Command":        reflect.ValueOf(i107.Command),
		"CommandContext": reflect.ValueOf(i107.CommandContext),
		"ErrDot":         reflect.ValueOf(i107.ErrDot),
		"ErrNotFound":    reflect.ValueOf(i107.ErrNotFound),
		"ErrWaitDelay":   reflect.ValueOf(i107.ErrWaitDelay),
		"LookPath":       reflect.ValueOf(i107.LookPath),
	}
	stdpkg["os/signal"] = map[string]reflect.Value{
		"Ignore":        reflect.ValueOf(i108.Ignore),
		"Ignored":       reflect.ValueOf(i108.Ignored),
		"Notify":        reflect.ValueOf(i108.Notify),
		"NotifyContext": reflect.ValueOf(i108.NotifyContext),
		"Reset":         reflect.ValueOf(i108.Reset),
		"Stop":          reflect.ValueOf(i108.Stop),
	}
	stdpkg["os/user"] = map[string]reflect.Value{
		"Current":       reflect.ValueOf(i109.Current),
		"Lookup":        reflect.ValueOf(i109.Lookup),
		"LookupGroup":   reflect.ValueOf(i109.LookupGroup),
		"LookupGroupId": reflect.ValueOf(i109.LookupGroupId),
		"LookupId":      reflect.ValueOf(i109.LookupId),
	}
	stdpkg["path"] = map[string]reflect.Value{
		"Base":          reflect.ValueOf(i110.Base),
		"Clean":         reflect.ValueOf(i110.Clean),
		"Dir":           reflect.ValueOf(i110.Dir),
		"ErrBadPattern": reflect.ValueOf(i110.ErrBadPattern),
		"Ext":           reflect.ValueOf(i110.Ext),
		"IsAbs":         reflect.ValueOf(i110.IsAbs),
		"Join":          reflect.ValueOf(i110.Join),
		"Match":         reflect.ValueOf(i110.Match),
		"Split":         reflect.ValueOf(i110.Split),
	}
	stdpkg["path/filepath"] = map[string]reflect.Value{
		"Abs":           reflect.ValueOf(i111.Abs),
		"Base":          reflect.ValueOf(i111.Base),
		"Clean":         reflect.ValueOf(i111.Clean),
		"Dir":           reflect.ValueOf(i111.Dir),
		"ErrBadPattern": reflect.ValueOf(i111.ErrBadPattern),
		"EvalSymlinks":  reflect.ValueOf(i111.EvalSymlinks),
		"Ext":           reflect.ValueOf(i111.Ext),
		"FromSlash":     reflect.ValueOf(i111.FromSlash),
		"Glob":          reflect.ValueOf(i111.Glob),
		"HasPrefix":     reflect.ValueOf(i111.HasPrefix),
		"IsAbs":         reflect.ValueOf(i111.IsAbs),
		"IsLocal":       reflect.ValueOf(i111.IsLocal),
		"Join":          reflect.ValueOf(i111.Join),
		"ListSeparator": reflect.ValueOf(i111.ListSeparator),
		"Localize":      reflect.ValueOf(i111.Localize),
		"Match":         reflect.ValueOf(i111.Match),
		"Rel":           reflect.ValueOf(i111.Rel),
		"Separator":     reflect.ValueOf(i111.Separator),
		"SkipAll":       reflect.ValueOf(i111.SkipAll),
		"SkipDir":       reflect.ValueOf(i111.SkipDir),
		"Split":         reflect.ValueOf(i111.Split),
		"SplitList":     reflect.ValueOf(i111.SplitList),
		"ToSlash":       reflect.ValueOf(i111.ToSlash),
		"VolumeName":    reflect.ValueOf(i111.VolumeName),
		"Walk":          reflect.ValueOf(i111.Walk),
		"WalkDir":       reflect.ValueOf(i111.WalkDir),
	}
	stdpkg["plugin"] = map[string]reflect.Value{
		"Open": reflect.ValueOf(i112.Open),
	}
	stdpkg["regexp"] = map[string]reflect.Value{
		"Compile":          reflect.ValueOf(i113.Compile),
		"CompilePOSIX":     reflect.ValueOf(i113.CompilePOSIX),
		"Match":            reflect.ValueOf(i113.Match),
		"MatchReader":      reflect.ValueOf(i113.MatchReader),
		"MatchString":      reflect.ValueOf(i113.MatchString),
		"MustCompile":      reflect.ValueOf(i113.MustCompile),
		"MustCompilePOSIX": reflect.ValueOf(i113.MustCompilePOSIX),
		"QuoteMeta":        reflect.ValueOf(i113.QuoteMeta),
	}
	stdpkg["regexp/syntax"] = map[string]reflect.Value{
		"ClassNL":                  reflect.ValueOf(i114.ClassNL),
		"Compile":                  reflect.ValueOf(i114.Compile),
		"DotNL":                    reflect.ValueOf(i114.DotNL),
		"EmptyBeginLine":           reflect.ValueOf(i114.EmptyBeginLine),
		"EmptyBeginText":           reflect.ValueOf(i114.EmptyBeginText),
		"EmptyEndLine":             reflect.ValueOf(i114.EmptyEndLine),
		"EmptyEndText":             reflect.ValueOf(i114.EmptyEndText),
		"EmptyNoWordBoundary":      reflect.ValueOf(i114.EmptyNoWordBoundary),
		"EmptyOpContext":           reflect.ValueOf(i114.EmptyOpContext),
		"EmptyWordBoundary":        reflect.ValueOf(i114.EmptyWordBoundary),
		"ErrInternalError":         reflect.ValueOf(i114.ErrInternalError),
		"ErrInvalidCharClass":      reflect.ValueOf(i114.ErrInvalidCharClass),
		"ErrInvalidCharRange":      reflect.ValueOf(i114.ErrInvalidCharRange),
		"ErrInvalidEscape":         reflect.ValueOf(i114.ErrInvalidEscape),
		"ErrInvalidNamedCapture":   reflect.ValueOf(i114.ErrInvalidNamedCapture),
		"ErrInvalidPerlOp":         reflect.ValueOf(i114.ErrInvalidPerlOp),
		"ErrInvalidRepeatOp":       reflect.ValueOf(i114.ErrInvalidRepeatOp),
		"ErrInvalidRepeatSize":     reflect.ValueOf(i114.ErrInvalidRepeatSize),
		"ErrInvalidUTF8":           reflect.ValueOf(i114.ErrInvalidUTF8),
		"ErrLarge":                 reflect.ValueOf(i114.ErrLarge),
		"ErrMissingBracket":        reflect.ValueOf(i114.ErrMissingBracket),
		"ErrMissingParen":          reflect.ValueOf(i114.ErrMissingParen),
		"ErrMissingRepeatArgument": reflect.ValueOf(i114.ErrMissingRepeatArgument),
		"ErrNestingDepth":          reflect.ValueOf(i114.ErrNestingDepth),
		"ErrTrailingBackslash":     reflect.ValueOf(i114.ErrTrailingBackslash),
		"ErrUnexpectedParen":       reflect.ValueOf(i114.ErrUnexpectedParen),
		"FoldCase":                 reflect.ValueOf(i114.FoldCase),
		"InstAlt":                  reflect.ValueOf(i114.InstAlt),
		"InstAltMatch":             reflect.ValueOf(i114.InstAltMatch),
		"InstCapture":              reflect.ValueOf(i114.InstCapture),
		"InstEmptyWidth":           reflect.ValueOf(i114.InstEmptyWidth),
		"InstFail":                 reflect.ValueOf(i114.InstFail),
		"InstMatch":                reflect.ValueOf(i114.InstMatch),
		"InstNop":                  reflect.ValueOf(i114.InstNop),
		"InstRune":                 reflect.ValueOf(i114.InstRune),
		"InstRune1":                reflect.ValueOf(i114.InstRune1),
		"InstRuneAny":              reflect.ValueOf(i114.InstRuneAny),
		"InstRuneAnyNotNL":         reflect.ValueOf(i114.InstRuneAnyNotNL),
		"IsWordChar":               reflect.ValueOf(i114.IsWordChar),
		"Literal":                  reflect.ValueOf(i114.Literal),
		"MatchNL":                  reflect.ValueOf(i114.MatchNL),
		"NonGreedy":                reflect.ValueOf(i114.NonGreedy),
		"OneLine":                  reflect.ValueOf(i114.OneLine),
		"OpAlternate":              reflect.ValueOf(i114.OpAlternate),
		"OpAnyChar":                reflect.ValueOf(i114.OpAnyChar),
		"OpAnyCharNotNL":           reflect.ValueOf(i114.OpAnyCharNotNL),
		"OpBeginLine":              reflect.ValueOf(i114.OpBeginLine),
		"OpBeginText":              reflect.ValueOf(i114.OpBeginText),
		"OpCapture":                reflect.ValueOf(i114.OpCapture),
		"OpCharClass":              reflect.ValueOf(i114.OpCharClass),
		"OpConcat":                 reflect.ValueOf(i114.OpConcat),
		"OpEmptyMatch":             reflect.ValueOf(i114.OpEmptyMatch),
		"OpEndLine":                reflect.ValueOf(i114.OpEndLine),
		"OpEndText":                reflect.ValueOf(i114.OpEndText),
		"OpLiteral":                reflect.ValueOf(i114.OpLiteral),
		"OpNoMatch":                reflect.ValueOf(i114.OpNoMatch),
		"OpNoWordBoundary":         reflect.ValueOf(i114.OpNoWordBoundary),
		"OpPlus":                   reflect.ValueOf(i114.OpPlus),
		"OpQuest":                  reflect.ValueOf(i114.OpQuest),
		"OpRepeat":                 reflect.ValueOf(i114.OpRepeat),
		"OpStar":                   reflect.ValueOf(i114.OpStar),
		"OpWordBoundary":           reflect.ValueOf(i114.OpWordBoundary),
		"POSIX":                    reflect.ValueOf(i114.POSIX),
		"Parse":                    reflect.ValueOf(i114.Parse),
		"Perl":                     reflect.ValueOf(i114.Perl),
		"PerlX":                    reflect.ValueOf(i114.PerlX),
		"Simple":                   reflect.ValueOf(i114.Simple),
		"UnicodeGroups":            reflect.ValueOf(i114.UnicodeGroups),
		"WasDollar":                reflect.ValueOf(i114.WasDollar),
	}
	stdpkg["sort"] = map[string]reflect.Value{
		"Find":              reflect.ValueOf(i115.Find),
		"Float64s":          reflect.ValueOf(i115.Float64s),
		"Float64sAreSorted": reflect.ValueOf(i115.Float64sAreSorted),
		"Ints":              reflect.ValueOf(i115.Ints),
		"IntsAreSorted":     reflect.ValueOf(i115.IntsAreSorted),
		"IsSorted":          reflect.ValueOf(i115.IsSorted),
		"Reverse":           reflect.ValueOf(i115.Reverse),
		"Search":            reflect.ValueOf(i115.Search),
		"SearchFloat64s":    reflect.ValueOf(i115.SearchFloat64s),
		"SearchInts":        reflect.ValueOf(i115.SearchInts),
		"SearchStrings":     reflect.ValueOf(i115.SearchStrings),
		"Slice":             reflect.ValueOf(i115.Slice),
		"SliceIsSorted":     reflect.ValueOf(i115.SliceIsSorted),
		"SliceStable":       reflect.ValueOf(i115.SliceStable),
		"Sort":              reflect.ValueOf(i115.Sort),
		"Stable":            reflect.ValueOf(i115.Stable),
		"Strings":           reflect.ValueOf(i115.Strings),
		"StringsAreSorted":  reflect.ValueOf(i115.StringsAreSorted),
	}
	stdpkg["strconv"] = map[string]reflect.Value{
		"AppendBool":               reflect.ValueOf(i116.AppendBool),
		"AppendFloat":              reflect.ValueOf(i116.AppendFloat),
		"AppendInt":                reflect.ValueOf(i116.AppendInt),
		"AppendQuote":              reflect.ValueOf(i116.AppendQuote),
		"AppendQuoteRune":          reflect.ValueOf(i116.AppendQuoteRune),
		"AppendQuoteRuneToASCII":   reflect.ValueOf(i116.AppendQuoteRuneToASCII),
		"AppendQuoteRuneToGraphic": reflect.ValueOf(i116.AppendQuoteRuneToGraphic),
		"AppendQuoteToASCII":       reflect.ValueOf(i116.AppendQuoteToASCII),
		"AppendQuoteToGraphic":     reflect.ValueOf(i116.AppendQuoteToGraphic),
		"AppendUint":               reflect.ValueOf(i116.AppendUint),
		"Atoi":                     reflect.ValueOf(i116.Atoi),
		"CanBackquote":             reflect.ValueOf(i116.CanBackquote),
		"ErrRange":                 reflect.ValueOf(i116.ErrRange),
		"ErrSyntax":                reflect.ValueOf(i116.ErrSyntax),
		"FormatBool":               reflect.ValueOf(i116.FormatBool),
		"FormatComplex":            reflect.ValueOf(i116.FormatComplex),
		"FormatFloat":              reflect.ValueOf(i116.FormatFloat),
		"FormatInt":                reflect.ValueOf(i116.FormatInt),
		"FormatUint":               reflect.ValueOf(i116.FormatUint),
		"IntSize":                  reflect.ValueOf(i116.IntSize),
		"IsGraphic":                reflect.ValueOf(i116.IsGraphic),
		"IsPrint":                  reflect.ValueOf(i116.IsPrint),
		"Itoa":                     reflect.ValueOf(i116.Itoa),
		"ParseBool":                reflect.ValueOf(i116.ParseBool),
		"ParseComplex":             reflect.ValueOf(i116.ParseComplex),
		"ParseFloat":               reflect.ValueOf(i116.ParseFloat),
		"ParseInt":                 reflect.ValueOf(i116.ParseInt),
		"ParseUint":                reflect.ValueOf(i116.ParseUint),
		"Quote":                    reflect.ValueOf(i116.Quote),
		"QuoteRune":                reflect.ValueOf(i116.QuoteRune),
		"QuoteRuneToASCII":         reflect.ValueOf(i116.QuoteRuneToASCII),
		"QuoteRuneToGraphic":       reflect.ValueOf(i116.QuoteRuneToGraphic),
		"QuoteToASCII":             reflect.ValueOf(i116.QuoteToASCII),
		"QuoteToGraphic":           reflect.ValueOf(i116.QuoteToGraphic),
		"QuotedPrefix":             reflect.ValueOf(i116.QuotedPrefix),
		"Unquote":                  reflect.ValueOf(i116.Unquote),
		"UnquoteChar":              reflect.ValueOf(i116.UnquoteChar),
	}
	stdpkg["strings"] = map[string]reflect.Value{
		"Clone":          reflect.ValueOf(i117.Clone),
		"Compare":        reflect.ValueOf(i117.Compare),
		"Contains":       reflect.ValueOf(i117.Contains),
		"ContainsAny":    reflect.ValueOf(i117.ContainsAny),
		"ContainsFunc":   reflect.ValueOf(i117.ContainsFunc),
		"ContainsRune":   reflect.ValueOf(i117.ContainsRune),
		"Count":          reflect.ValueOf(i117.Count),
		"Cut":            reflect.ValueOf(i117.Cut),
		"CutPrefix":      reflect.ValueOf(i117.CutPrefix),
		"CutSuffix":      reflect.ValueOf(i117.CutSuffix),
		"EqualFold":      reflect.ValueOf(i117.EqualFold),
		"Fields":         reflect.ValueOf(i117.Fields),
		"FieldsFunc":     reflect.ValueOf(i117.FieldsFunc),
		"FieldsFuncSeq":  reflect.ValueOf(i117.FieldsFuncSeq),
		"FieldsSeq":      reflect.ValueOf(i117.FieldsSeq),
		"HasPrefix":      reflect.ValueOf(i117.HasPrefix),
		"HasSuffix":      reflect.ValueOf(i117.HasSuffix),
		"Index":          reflect.ValueOf(i117.Index),
		"IndexAny":       reflect.ValueOf(i117.IndexAny),
		"IndexByte":      reflect.ValueOf(i117.IndexByte),
		"IndexFunc":      reflect.ValueOf(i117.IndexFunc),
		"IndexRune":      reflect.ValueOf(i117.IndexRune),
		"Join":           reflect.ValueOf(i117.Join),
		"LastIndex":      reflect.ValueOf(i117.LastIndex),
		"LastIndexAny":   reflect.ValueOf(i117.LastIndexAny),
		"LastIndexByte":  reflect.ValueOf(i117.LastIndexByte),
		"LastIndexFunc":  reflect.ValueOf(i117.LastIndexFunc),
		"Lines":          reflect.ValueOf(i117.Lines),
		"Map":            reflect.ValueOf(i117.Map),
		"NewReader":      reflect.ValueOf(i117.NewReader),
		"NewReplacer":    reflect.ValueOf(i117.NewReplacer),
		"Repeat":         reflect.ValueOf(i117.Repeat),
		"Replace":        reflect.ValueOf(i117.Replace),
		"ReplaceAll":     reflect.ValueOf(i117.ReplaceAll),
		"Split":          reflect.ValueOf(i117.Split),
		"SplitAfter":     reflect.ValueOf(i117.SplitAfter),
		"SplitAfterN":    reflect.ValueOf(i117.SplitAfterN),
		"SplitAfterSeq":  reflect.ValueOf(i117.SplitAfterSeq),
		"SplitN":         reflect.ValueOf(i117.SplitN),
		"SplitSeq":       reflect.ValueOf(i117.SplitSeq),
		"Title":          reflect.ValueOf(i117.Title),
		"ToLower":        reflect.ValueOf(i117.ToLower),
		"ToLowerSpecial": reflect.ValueOf(i117.ToLowerSpecial),
		"ToTitle":        reflect.ValueOf(i117.ToTitle),
		"ToTitleSpecial": reflect.ValueOf(i117.ToTitleSpecial),
		"ToUpper":        reflect.ValueOf(i117.ToUpper),
		"ToUpperSpecial": reflect.ValueOf(i117.ToUpperSpecial),
		"ToValidUTF8":    reflect.ValueOf(i117.ToValidUTF8),
		"Trim":           reflect.ValueOf(i117.Trim),
		"TrimFunc":       reflect.ValueOf(i117.TrimFunc),
		"TrimLeft":       reflect.ValueOf(i117.TrimLeft),
		"TrimLeftFunc":   reflect.ValueOf(i117.TrimLeftFunc),
		"TrimPrefix":     reflect.ValueOf(i117.TrimPrefix),
		"TrimRight":      reflect.ValueOf(i117.TrimRight),
		"TrimRightFunc":  reflect.ValueOf(i117.TrimRightFunc),
		"TrimSpace":      reflect.ValueOf(i117.TrimSpace),
		"TrimSuffix":     reflect.ValueOf(i117.TrimSuffix),
	}
	stdpkg["sync"] = map[string]reflect.Value{
		"NewCond":    reflect.ValueOf(i118.NewCond),
		"OnceFunc":   reflect.ValueOf(i118.OnceFunc),
		"OnceValue":  reflect.ValueOf(i118.OnceValue),
		"OnceValues": reflect.ValueOf(i118.OnceValues),
	}
	stdpkg["sync/atomic"] = map[string]reflect.Value{
		"AddInt32":              reflect.ValueOf(i119.AddInt32),
		"AddInt64":              reflect.ValueOf(i119.AddInt64),
		"AddUint32":             reflect.ValueOf(i119.AddUint32),
		"AddUint64":             reflect.ValueOf(i119.AddUint64),
		"AddUintptr":            reflect.ValueOf(i119.AddUintptr),
		"AndInt32":              reflect.ValueOf(i119.AndInt32),
		"AndInt64":              reflect.ValueOf(i119.AndInt64),
		"AndUint32":             reflect.ValueOf(i119.AndUint32),
		"AndUint64":             reflect.ValueOf(i119.AndUint64),
		"AndUintptr":            reflect.ValueOf(i119.AndUintptr),
		"CompareAndSwapInt32":   reflect.ValueOf(i119.CompareAndSwapInt32),
		"CompareAndSwapInt64":   reflect.ValueOf(i119.CompareAndSwapInt64),
		"CompareAndSwapPointer": reflect.ValueOf(i119.CompareAndSwapPointer),
		"CompareAndSwapUint32":  reflect.ValueOf(i119.CompareAndSwapUint32),
		"CompareAndSwapUint64":  reflect.ValueOf(i119.CompareAndSwapUint64),
		"CompareAndSwapUintptr": reflect.ValueOf(i119.CompareAndSwapUintptr),
		"LoadInt32":             reflect.ValueOf(i119.LoadInt32),
		"LoadInt64":             reflect.ValueOf(i119.LoadInt64),
		"LoadPointer":           reflect.ValueOf(i119.LoadPointer),
		"LoadUint32":            reflect.ValueOf(i119.LoadUint32),
		"LoadUint64":            reflect.ValueOf(i119.LoadUint64),
		"LoadUintptr":           reflect.ValueOf(i119.LoadUintptr),
		"OrInt32":               reflect.ValueOf(i119.OrInt32),
		"OrInt64":               reflect.ValueOf(i119.OrInt64),
		"OrUint32":              reflect.ValueOf(i119.OrUint32),
		"OrUint64":              reflect.ValueOf(i119.OrUint64),
		"OrUintptr":             reflect.ValueOf(i119.OrUintptr),
		"StoreInt32":            reflect.ValueOf(i119.StoreInt32),
		"StoreInt64":            reflect.ValueOf(i119.StoreInt64),
		"StorePointer":          reflect.ValueOf(i119.StorePointer),
		"StoreUint32":           reflect.ValueOf(i119.StoreUint32),
		"StoreUint64":           reflect.ValueOf(i119.StoreUint64),
		"StoreUintptr":          reflect.ValueOf(i119.StoreUintptr),
		"SwapInt32":             reflect.ValueOf(i119.SwapInt32),
		"SwapInt64":             reflect.ValueOf(i119.SwapInt64),
		"SwapPointer":           reflect.ValueOf(i119.SwapPointer),
		"SwapUint32":            reflect.ValueOf(i119.SwapUint32),
		"SwapUint64":            reflect.ValueOf(i119.SwapUint64),
		"SwapUintptr":           reflect.ValueOf(i119.SwapUintptr),
	}
	stdpkg["syscall"] = map[string]reflect.Value{
		"AF_APPLETALK":                       reflect.ValueOf(i120.AF_APPLETALK),
		"AF_CCITT":                           reflect.ValueOf(i120.AF_CCITT),
		"AF_CHAOS":                           reflect.ValueOf(i120.AF_CHAOS),
		"AF_CNT":                             reflect.ValueOf(i120.AF_CNT),
		"AF_COIP":                            reflect.ValueOf(i120.AF_COIP),
		"AF_DATAKIT":                         reflect.ValueOf(i120.AF_DATAKIT),
		"AF_DECnet":                          reflect.ValueOf(i120.AF_DECnet),
		"AF_DLI":                             reflect.ValueOf(i120.AF_DLI),
		"AF_E164":                            reflect.ValueOf(i120.AF_E164),
		"AF_ECMA":                            reflect.ValueOf(i120.AF_ECMA),
		"AF_HYLINK":                          reflect.ValueOf(i120.AF_HYLINK),
		"AF_IEEE80211":                       reflect.ValueOf(i120.AF_IEEE80211),
		"AF_IMPLINK":                         reflect.ValueOf(i120.AF_IMPLINK),
		"AF_INET":                            reflect.ValueOf(i120.AF_INET),
		"AF_INET6":                           reflect.ValueOf(i120.AF_INET6),
		"AF_IPX":                             reflect.ValueOf(i120.AF_IPX),
		"AF_ISDN":                            reflect.ValueOf(i120.AF_ISDN),
		"AF_ISO":                             reflect.ValueOf(i120.AF_ISO),
		"AF_LAT":                             reflect.ValueOf(i120.AF_LAT),
		"AF_LINK":                            reflect.ValueOf(i120.AF_LINK),
		"AF_LOCAL":                           reflect.ValueOf(i120.AF_LOCAL),
		"AF_MAX":                             reflect.ValueOf(i120.AF_MAX),
		"AF_NATM":                            reflect.ValueOf(i120.AF_NATM),
		"AF_NDRV":                            reflect.ValueOf(i120.AF_NDRV),
		"AF_NETBIOS":                         reflect.ValueOf(i120.AF_NETBIOS),
		"AF_NS":                              reflect.ValueOf(i120.AF_NS),
		"AF_OSI":                             reflect.ValueOf(i120.AF_OSI),
		"AF_PPP":                             reflect.ValueOf(i120.AF_PPP),
		"AF_PUP":                             reflect.ValueOf(i120.AF_PUP),
		"AF_RESERVED_36":                     reflect.ValueOf(i120.AF_RESERVED_36),
		"AF_ROUTE":                           reflect.ValueOf(i120.AF_ROUTE),
		"AF_SIP":                             reflect.ValueOf(i120.AF_SIP),
		"AF_SNA":                             reflect.ValueOf(i120.AF_SNA),
		"AF_SYSTEM":                          reflect.ValueOf(i120.AF_SYSTEM),
		"AF_UNIX":                            reflect.ValueOf(i120.AF_UNIX),
		"AF_UNSPEC":                          reflect.ValueOf(i120.AF_UNSPEC),
		"AF_UTUN":                            reflect.ValueOf(i120.AF_UTUN),
		"Accept":                             reflect.ValueOf(i120.Accept),
		"Access":                             reflect.ValueOf(i120.Access),
		"Adjtime":                            reflect.ValueOf(i120.Adjtime),
		"B0":                                 reflect.ValueOf(i120.B0),
		"B110":                               reflect.ValueOf(i120.B110),
		"B115200":                            reflect.ValueOf(i120.B115200),
		"B1200":                              reflect.ValueOf(i120.B1200),
		"B134":                               reflect.ValueOf(i120.B134),
		"B14400":                             reflect.ValueOf(i120.B14400),
		"B150":                               reflect.ValueOf(i120.B150),
		"B1800":                              reflect.ValueOf(i120.B1800),
		"B19200":                             reflect.ValueOf(i120.B19200),
		"B200":                               reflect.ValueOf(i120.B200),
		"B230400":                            reflect.ValueOf(i120.B230400),
		"B2400":                              reflect.ValueOf(i120.B2400),
		"B28800":                             reflect.ValueOf(i120.B28800),
		"B300":                               reflect.ValueOf(i120.B300),
		"B38400":                             reflect.ValueOf(i120.B38400),
		"B4800":                              reflect.ValueOf(i120.B4800),
		"B50":                                reflect.ValueOf(i120.B50),
		"B57600":                             reflect.ValueOf(i120.B57600),
		"B600":                               reflect.ValueOf(i120.B600),
		"B7200":                              reflect.ValueOf(i120.B7200),
		"B75":                                reflect.ValueOf(i120.B75),
		"B76800":                             reflect.ValueOf(i120.B76800),
		"B9600":                              reflect.ValueOf(i120.B9600),
		"BIOCFLUSH":                          reflect.ValueOf(i120.BIOCFLUSH),
		"BIOCGBLEN":                          reflect.ValueOf(i120.BIOCGBLEN),
		"BIOCGDLT":                           reflect.ValueOf(i120.BIOCGDLT),
		"BIOCGDLTLIST":                       reflect.ValueOf(i120.BIOCGDLTLIST),
		"BIOCGETIF":                          reflect.ValueOf(i120.BIOCGETIF),
		"BIOCGHDRCMPLT":                      reflect.ValueOf(i120.BIOCGHDRCMPLT),
		"BIOCGRSIG":                          reflect.ValueOf(i120.BIOCGRSIG),
		"BIOCGRTIMEOUT":                      reflect.ValueOf(i120.BIOCGRTIMEOUT),
		"BIOCGSEESENT":                       reflect.ValueOf(i120.BIOCGSEESENT),
		"BIOCGSTATS":                         reflect.ValueOf(i120.BIOCGSTATS),
		"BIOCIMMEDIATE":                      reflect.ValueOf(i120.BIOCIMMEDIATE),
		"BIOCPROMISC":                        reflect.ValueOf(i120.BIOCPROMISC),
		"BIOCSBLEN":                          reflect.ValueOf(i120.BIOCSBLEN),
		"BIOCSDLT":                           reflect.ValueOf(i120.BIOCSDLT),
		"BIOCSETF":                           reflect.ValueOf(i120.BIOCSETF),
		"BIOCSETIF":                          reflect.ValueOf(i120.BIOCSETIF),
		"BIOCSHDRCMPLT":                      reflect.ValueOf(i120.BIOCSHDRCMPLT),
		"BIOCSRSIG":                          reflect.ValueOf(i120.BIOCSRSIG),
		"BIOCSRTIMEOUT":                      reflect.ValueOf(i120.BIOCSRTIMEOUT),
		"BIOCSSEESENT":                       reflect.ValueOf(i120.BIOCSSEESENT),
		"BIOCVERSION":                        reflect.ValueOf(i120.BIOCVERSION),
		"BPF_A":                              reflect.ValueOf(i120.BPF_A),
		"BPF_ABS":                            reflect.ValueOf(i120.BPF_ABS),
		"BPF_ADD":                            reflect.ValueOf(i120.BPF_ADD),
		"BPF_ALIGNMENT":                      reflect.ValueOf(i120.BPF_ALIGNMENT),
		"BPF_ALU":                            reflect.ValueOf(i120.BPF_ALU),
		"BPF_AND":                            reflect.ValueOf(i120.BPF_AND),
		"BPF_B":                              reflect.ValueOf(i120.BPF_B),
		"BPF_DIV":                            reflect.ValueOf(i120.BPF_DIV),
		"BPF_H":                              reflect.ValueOf(i120.BPF_H),
		"BPF_IMM":                            reflect.ValueOf(i120.BPF_IMM),
		"BPF_IND":                            reflect.ValueOf(i120.BPF_IND),
		"BPF_JA":                             reflect.ValueOf(i120.BPF_JA),
		"BPF_JEQ":                            reflect.ValueOf(i120.BPF_JEQ),
		"BPF_JGE":                            reflect.ValueOf(i120.BPF_JGE),
		"BPF_JGT":                            reflect.ValueOf(i120.BPF_JGT),
		"BPF_JMP":                            reflect.ValueOf(i120.BPF_JMP),
		"BPF_JSET":                           reflect.ValueOf(i120.BPF_JSET),
		"BPF_K":                              reflect.ValueOf(i120.BPF_K),
		"BPF_LD":                             reflect.ValueOf(i120.BPF_LD),
		"BPF_LDX":                            reflect.ValueOf(i120.BPF_LDX),
		"BPF_LEN":                            reflect.ValueOf(i120.BPF_LEN),
		"BPF_LSH":                            reflect.ValueOf(i120.BPF_LSH),
		"BPF_MAJOR_VERSION":                  reflect.ValueOf(i120.BPF_MAJOR_VERSION),
		"BPF_MAXBUFSIZE":                     reflect.ValueOf(i120.BPF_MAXBUFSIZE),
		"BPF_MAXINSNS":                       reflect.ValueOf(i120.BPF_MAXINSNS),
		"BPF_MEM":                            reflect.ValueOf(i120.BPF_MEM),
		"BPF_MEMWORDS":                       reflect.ValueOf(i120.BPF_MEMWORDS),
		"BPF_MINBUFSIZE":                     reflect.ValueOf(i120.BPF_MINBUFSIZE),
		"BPF_MINOR_VERSION":                  reflect.ValueOf(i120.BPF_MINOR_VERSION),
		"BPF_MISC":                           reflect.ValueOf(i120.BPF_MISC),
		"BPF_MSH":                            reflect.ValueOf(i120.BPF_MSH),
		"BPF_MUL":                            reflect.ValueOf(i120.BPF_MUL),
		"BPF_NEG":                            reflect.ValueOf(i120.BPF_NEG),
		"BPF_OR":                             reflect.ValueOf(i120.BPF_OR),
		"BPF_RELEASE":                        reflect.ValueOf(i120.BPF_RELEASE),
		"BPF_RET":                            reflect.ValueOf(i120.BPF_RET),
		"BPF_RSH":                            reflect.ValueOf(i120.BPF_RSH),
		"BPF_ST":                             reflect.ValueOf(i120.BPF_ST),
		"BPF_STX":                            reflect.ValueOf(i120.BPF_STX),
		"BPF_SUB":                            reflect.ValueOf(i120.BPF_SUB),
		"BPF_TAX":                            reflect.ValueOf(i120.BPF_TAX),
		"BPF_TXA":                            reflect.ValueOf(i120.BPF_TXA),
		"BPF_W":                              reflect.ValueOf(i120.BPF_W),
		"BPF_X":                              reflect.ValueOf(i120.BPF_X),
		"BRKINT":                             reflect.ValueOf(i120.BRKINT),
		"Bind":                               reflect.ValueOf(i120.Bind),
		"BpfBuflen":                          reflect.ValueOf(i120.BpfBuflen),
		"BpfDatalink":                        reflect.ValueOf(i120.BpfDatalink),
		"BpfHeadercmpl":                      reflect.ValueOf(i120.BpfHeadercmpl),
		"BpfInterface":                       reflect.ValueOf(i120.BpfInterface),
		"BpfJump":                            reflect.ValueOf(i120.BpfJump),
		"BpfStats":                           reflect.ValueOf(i120.BpfStats),
		"BpfStmt":                            reflect.ValueOf(i120.BpfStmt),
		"BpfTimeout":                         reflect.ValueOf(i120.BpfTimeout),
		"BytePtrFromString":                  reflect.ValueOf(i120.BytePtrFromString),
		"ByteSliceFromString":                reflect.ValueOf(i120.ByteSliceFromString),
		"CFLUSH":                             reflect.ValueOf(i120.CFLUSH),
		"CLOCAL":                             reflect.ValueOf(i120.CLOCAL),
		"CREAD":                              reflect.ValueOf(i120.CREAD),
		"CS5":                                reflect.ValueOf(i120.CS5),
		"CS6":                                reflect.ValueOf(i120.CS6),
		"CS7":                                reflect.ValueOf(i120.CS7),
		"CS8":                                reflect.ValueOf(i120.CS8),
		"CSIZE":                              reflect.ValueOf(i120.CSIZE),
		"CSTART":                             reflect.ValueOf(i120.CSTART),
		"CSTATUS":                            reflect.ValueOf(i120.CSTATUS),
		"CSTOP":                              reflect.ValueOf(i120.CSTOP),
		"CSTOPB":                             reflect.ValueOf(i120.CSTOPB),
		"CSUSP":                              reflect.ValueOf(i120.CSUSP),
		"CTL_MAXNAME":                        reflect.ValueOf(i120.CTL_MAXNAME),
		"CTL_NET":                            reflect.ValueOf(i120.CTL_NET),
		"Chdir":                              reflect.ValueOf(i120.Chdir),
		"CheckBpfVersion":                    reflect.ValueOf(i120.CheckBpfVersion),
		"Chflags":                            reflect.ValueOf(i120.Chflags),
		"Chmod":                              reflect.ValueOf(i120.Chmod),
		"Chown":                              reflect.ValueOf(i120.Chown),
		"Chroot":                             reflect.ValueOf(i120.Chroot),
		"Clearenv":                           reflect.ValueOf(i120.Clearenv),
		"Close":                              reflect.ValueOf(i120.Close),
		"CloseOnExec":                        reflect.ValueOf(i120.CloseOnExec),
		"CmsgLen":                            reflect.ValueOf(i120.CmsgLen),
		"CmsgSpace":                          reflect.ValueOf(i120.CmsgSpace),
		"Connect":                            reflect.ValueOf(i120.Connect),
		"DLT_APPLE_IP_OVER_IEEE1394":         reflect.ValueOf(i120.DLT_APPLE_IP_OVER_IEEE1394),
		"DLT_ARCNET":                         reflect.ValueOf(i120.DLT_ARCNET),
		"DLT_ATM_CLIP":                       reflect.ValueOf(i120.DLT_ATM_CLIP),
		"DLT_ATM_RFC1483":                    reflect.ValueOf(i120.DLT_ATM_RFC1483),
		"DLT_AX25":                           reflect.ValueOf(i120.DLT_AX25),
		"DLT_CHAOS":                          reflect.ValueOf(i120.DLT_CHAOS),
		"DLT_CHDLC":                          reflect.ValueOf(i120.DLT_CHDLC),
		"DLT_C_HDLC":                         reflect.ValueOf(i120.DLT_C_HDLC),
		"DLT_EN10MB":                         reflect.ValueOf(i120.DLT_EN10MB),
		"DLT_EN3MB":                          reflect.ValueOf(i120.DLT_EN3MB),
		"DLT_FDDI":                           reflect.ValueOf(i120.DLT_FDDI),
		"DLT_IEEE802":                        reflect.ValueOf(i120.DLT_IEEE802),
		"DLT_IEEE802_11":                     reflect.ValueOf(i120.DLT_IEEE802_11),
		"DLT_IEEE802_11_RADIO":               reflect.ValueOf(i120.DLT_IEEE802_11_RADIO),
		"DLT_IEEE802_11_RADIO_AVS":           reflect.ValueOf(i120.DLT_IEEE802_11_RADIO_AVS),
		"DLT_LINUX_SLL":                      reflect.ValueOf(i120.DLT_LINUX_SLL),
		"DLT_LOOP":                           reflect.ValueOf(i120.DLT_LOOP),
		"DLT_NULL":                           reflect.ValueOf(i120.DLT_NULL),
		"DLT_PFLOG":                          reflect.ValueOf(i120.DLT_PFLOG),
		"DLT_PFSYNC":                         reflect.ValueOf(i120.DLT_PFSYNC),
		"DLT_PPP":                            reflect.ValueOf(i120.DLT_PPP),
		"DLT_PPP_BSDOS":                      reflect.ValueOf(i120.DLT_PPP_BSDOS),
		"DLT_PPP_SERIAL":                     reflect.ValueOf(i120.DLT_PPP_SERIAL),
		"DLT_PRONET":                         reflect.ValueOf(i120.DLT_PRONET),
		"DLT_RAW":                            reflect.ValueOf(i120.DLT_RAW),
		"DLT_SLIP":                           reflect.ValueOf(i120.DLT_SLIP),
		"DLT_SLIP_BSDOS":                     reflect.ValueOf(i120.DLT_SLIP_BSDOS),
		"DT_BLK":                             reflect.ValueOf(i120.DT_BLK),
		"DT_CHR":                             reflect.ValueOf(i120.DT_CHR),
		"DT_DIR":                             reflect.ValueOf(i120.DT_DIR),
		"DT_FIFO":                            reflect.ValueOf(i120.DT_FIFO),
		"DT_LNK":                             reflect.ValueOf(i120.DT_LNK),
		"DT_REG":                             reflect.ValueOf(i120.DT_REG),
		"DT_SOCK":                            reflect.ValueOf(i120.DT_SOCK),
		"DT_UNKNOWN":                         reflect.ValueOf(i120.DT_UNKNOWN),
		"DT_WHT":                             reflect.ValueOf(i120.DT_WHT),
		"Dup":                                reflect.ValueOf(i120.Dup),
		"Dup2":                               reflect.ValueOf(i120.Dup2),
		"E2BIG":                              reflect.ValueOf(i120.E2BIG),
		"EACCES":                             reflect.ValueOf(i120.EACCES),
		"EADDRINUSE":                         reflect.ValueOf(i120.EADDRINUSE),
		"EADDRNOTAVAIL":                      reflect.ValueOf(i120.EADDRNOTAVAIL),
		"EAFNOSUPPORT":                       reflect.ValueOf(i120.EAFNOSUPPORT),
		"EAGAIN":                             reflect.ValueOf(i120.EAGAIN),
		"EALREADY":                           reflect.ValueOf(i120.EALREADY),
		"EAUTH":                              reflect.ValueOf(i120.EAUTH),
		"EBADARCH":                           reflect.ValueOf(i120.EBADARCH),
		"EBADEXEC":                           reflect.ValueOf(i120.EBADEXEC),
		"EBADF":                              reflect.ValueOf(i120.EBADF),
		"EBADMACHO":                          reflect.ValueOf(i120.EBADMACHO),
		"EBADMSG":                            reflect.ValueOf(i120.EBADMSG),
		"EBADRPC":                            reflect.ValueOf(i120.EBADRPC),
		"EBUSY":                              reflect.ValueOf(i120.EBUSY),
		"ECANCELED":                          reflect.ValueOf(i120.ECANCELED),
		"ECHILD":                             reflect.ValueOf(i120.ECHILD),
		"ECHO":                               reflect.ValueOf(i120.ECHO),
		"ECHOCTL":                            reflect.ValueOf(i120.ECHOCTL),
		"ECHOE":                              reflect.ValueOf(i120.ECHOE),
		"ECHOK":                              reflect.ValueOf(i120.ECHOK),
		"ECHOKE":                             reflect.ValueOf(i120.ECHOKE),
		"ECHONL":                             reflect.ValueOf(i120.ECHONL),
		"ECHOPRT":                            reflect.ValueOf(i120.ECHOPRT),
		"ECONNABORTED":                       reflect.ValueOf(i120.ECONNABORTED),
		"ECONNREFUSED":                       reflect.ValueOf(i120.ECONNREFUSED),
		"ECONNRESET":                         reflect.ValueOf(i120.ECONNRESET),
		"EDEADLK":                            reflect.ValueOf(i120.EDEADLK),
		"EDESTADDRREQ":                       reflect.ValueOf(i120.EDESTADDRREQ),
		"EDEVERR":                            reflect.ValueOf(i120.EDEVERR),
		"EDOM":                               reflect.ValueOf(i120.EDOM),
		"EDQUOT":                             reflect.ValueOf(i120.EDQUOT),
		"EEXIST":                             reflect.ValueOf(i120.EEXIST),
		"EFAULT":                             reflect.ValueOf(i120.EFAULT),
		"EFBIG":                              reflect.ValueOf(i120.EFBIG),
		"EFTYPE":                             reflect.ValueOf(i120.EFTYPE),
		"EHOSTDOWN":                          reflect.ValueOf(i120.EHOSTDOWN),
		"EHOSTUNREACH":                       reflect.ValueOf(i120.EHOSTUNREACH),
		"EIDRM":                              reflect.ValueOf(i120.EIDRM),
		"EILSEQ":                             reflect.ValueOf(i120.EILSEQ),
		"EINPROGRESS":                        reflect.ValueOf(i120.EINPROGRESS),
		"EINTR":                              reflect.ValueOf(i120.EINTR),
		"EINVAL":                             reflect.ValueOf(i120.EINVAL),
		"EIO":                                reflect.ValueOf(i120.EIO),
		"EISCONN":                            reflect.ValueOf(i120.EISCONN),
		"EISDIR":                             reflect.ValueOf(i120.EISDIR),
		"ELAST":                              reflect.ValueOf(i120.ELAST),
		"ELOOP":                              reflect.ValueOf(i120.ELOOP),
		"EMFILE":                             reflect.ValueOf(i120.EMFILE),
		"EMLINK":                             reflect.ValueOf(i120.EMLINK),
		"EMSGSIZE":                           reflect.ValueOf(i120.EMSGSIZE),
		"EMULTIHOP":                          reflect.ValueOf(i120.EMULTIHOP),
		"ENAMETOOLONG":                       reflect.ValueOf(i120.ENAMETOOLONG),
		"ENEEDAUTH":                          reflect.ValueOf(i120.ENEEDAUTH),
		"ENETDOWN":                           reflect.ValueOf(i120.ENETDOWN),
		"ENETRESET":                          reflect.ValueOf(i120.ENETRESET),
		"ENETUNREACH":                        reflect.ValueOf(i120.ENETUNREACH),
		"ENFILE":                             reflect.ValueOf(i120.ENFILE),
		"ENOATTR":                            reflect.ValueOf(i120.ENOATTR),
		"ENOBUFS":                            reflect.ValueOf(i120.ENOBUFS),
		"ENODATA":                            reflect.ValueOf(i120.ENODATA),
		"ENODEV":                             reflect.ValueOf(i120.ENODEV),
		"ENOENT":                             reflect.ValueOf(i120.ENOENT),
		"ENOEXEC":                            reflect.ValueOf(i120.ENOEXEC),
		"ENOLCK":                             reflect.ValueOf(i120.ENOLCK),
		"ENOLINK":                            reflect.ValueOf(i120.ENOLINK),
		"ENOMEM":                             reflect.ValueOf(i120.ENOMEM),
		"ENOMSG":                             reflect.ValueOf(i120.ENOMSG),
		"ENOPOLICY":                          reflect.ValueOf(i120.ENOPOLICY),
		"ENOPROTOOPT":                        reflect.ValueOf(i120.ENOPROTOOPT),
		"ENOSPC":                             reflect.ValueOf(i120.ENOSPC),
		"ENOSR":                              reflect.ValueOf(i120.ENOSR),
		"ENOSTR":                             reflect.ValueOf(i120.ENOSTR),
		"ENOSYS":                             reflect.ValueOf(i120.ENOSYS),
		"ENOTBLK":                            reflect.ValueOf(i120.ENOTBLK),
		"ENOTCONN":                           reflect.ValueOf(i120.ENOTCONN),
		"ENOTDIR":                            reflect.ValueOf(i120.ENOTDIR),
		"ENOTEMPTY":                          reflect.ValueOf(i120.ENOTEMPTY),
		"ENOTRECOVERABLE":                    reflect.ValueOf(i120.ENOTRECOVERABLE),
		"ENOTSOCK":                           reflect.ValueOf(i120.ENOTSOCK),
		"ENOTSUP":                            reflect.ValueOf(i120.ENOTSUP),
		"ENOTTY":                             reflect.ValueOf(i120.ENOTTY),
		"ENXIO":                              reflect.ValueOf(i120.ENXIO),
		"EOPNOTSUPP":                         reflect.ValueOf(i120.EOPNOTSUPP),
		"EOVERFLOW":                          reflect.ValueOf(i120.EOVERFLOW),
		"EOWNERDEAD":                         reflect.ValueOf(i120.EOWNERDEAD),
		"EPERM":                              reflect.ValueOf(i120.EPERM),
		"EPFNOSUPPORT":                       reflect.ValueOf(i120.EPFNOSUPPORT),
		"EPIPE":                              reflect.ValueOf(i120.EPIPE),
		"EPROCLIM":                           reflect.ValueOf(i120.EPROCLIM),
		"EPROCUNAVAIL":                       reflect.ValueOf(i120.EPROCUNAVAIL),
		"EPROGMISMATCH":                      reflect.ValueOf(i120.EPROGMISMATCH),
		"EPROGUNAVAIL":                       reflect.ValueOf(i120.EPROGUNAVAIL),
		"EPROTO":                             reflect.ValueOf(i120.EPROTO),
		"EPROTONOSUPPORT":                    reflect.ValueOf(i120.EPROTONOSUPPORT),
		"EPROTOTYPE":                         reflect.ValueOf(i120.EPROTOTYPE),
		"EPWROFF":                            reflect.ValueOf(i120.EPWROFF),
		"EQFULL":                             reflect.ValueOf(i120.EQFULL),
		"ERANGE":                             reflect.ValueOf(i120.ERANGE),
		"EREMOTE":                            reflect.ValueOf(i120.EREMOTE),
		"EROFS":                              reflect.ValueOf(i120.EROFS),
		"ERPCMISMATCH":                       reflect.ValueOf(i120.ERPCMISMATCH),
		"ESHLIBVERS":                         reflect.ValueOf(i120.ESHLIBVERS),
		"ESHUTDOWN":                          reflect.ValueOf(i120.ESHUTDOWN),
		"ESOCKTNOSUPPORT":                    reflect.ValueOf(i120.ESOCKTNOSUPPORT),
		"ESPIPE":                             reflect.ValueOf(i120.ESPIPE),
		"ESRCH":                              reflect.ValueOf(i120.ESRCH),
		"ESTALE":                             reflect.ValueOf(i120.ESTALE),
		"ETIME":                              reflect.ValueOf(i120.ETIME),
		"ETIMEDOUT":                          reflect.ValueOf(i120.ETIMEDOUT),
		"ETOOMANYREFS":                       reflect.ValueOf(i120.ETOOMANYREFS),
		"ETXTBSY":                            reflect.ValueOf(i120.ETXTBSY),
		"EUSERS":                             reflect.ValueOf(i120.EUSERS),
		"EVFILT_AIO":                         reflect.ValueOf(i120.EVFILT_AIO),
		"EVFILT_FS":                          reflect.ValueOf(i120.EVFILT_FS),
		"EVFILT_MACHPORT":                    reflect.ValueOf(i120.EVFILT_MACHPORT),
		"EVFILT_PROC":                        reflect.ValueOf(i120.EVFILT_PROC),
		"EVFILT_READ":                        reflect.ValueOf(i120.EVFILT_READ),
		"EVFILT_SIGNAL":                      reflect.ValueOf(i120.EVFILT_SIGNAL),
		"EVFILT_SYSCOUNT":                    reflect.ValueOf(i120.EVFILT_SYSCOUNT),
		"EVFILT_THREADMARKER":                reflect.ValueOf(i120.EVFILT_THREADMARKER),
		"EVFILT_TIMER":                       reflect.ValueOf(i120.EVFILT_TIMER),
		"EVFILT_USER":                        reflect.ValueOf(i120.EVFILT_USER),
		"EVFILT_VM":                          reflect.ValueOf(i120.EVFILT_VM),
		"EVFILT_VNODE":                       reflect.ValueOf(i120.EVFILT_VNODE),
		"EVFILT_WRITE":                       reflect.ValueOf(i120.EVFILT_WRITE),
		"EV_ADD":                             reflect.ValueOf(i120.EV_ADD),
		"EV_CLEAR":                           reflect.ValueOf(i120.EV_CLEAR),
		"EV_DELETE":                          reflect.ValueOf(i120.EV_DELETE),
		"EV_DISABLE":                         reflect.ValueOf(i120.EV_DISABLE),
		"EV_DISPATCH":                        reflect.ValueOf(i120.EV_DISPATCH),
		"EV_ENABLE":                          reflect.ValueOf(i120.EV_ENABLE),
		"EV_EOF":                             reflect.ValueOf(i120.EV_EOF),
		"EV_ERROR":                           reflect.ValueOf(i120.EV_ERROR),
		"EV_FLAG0":                           reflect.ValueOf(i120.EV_FLAG0),
		"EV_FLAG1":                           reflect.ValueOf(i120.EV_FLAG1),
		"EV_ONESHOT":                         reflect.ValueOf(i120.EV_ONESHOT),
		"EV_OOBAND":                          reflect.ValueOf(i120.EV_OOBAND),
		"EV_POLL":                            reflect.ValueOf(i120.EV_POLL),
		"EV_RECEIPT":                         reflect.ValueOf(i120.EV_RECEIPT),
		"EV_SYSFLAGS":                        reflect.ValueOf(i120.EV_SYSFLAGS),
		"EWOULDBLOCK":                        reflect.ValueOf(i120.EWOULDBLOCK),
		"EXDEV":                              reflect.ValueOf(i120.EXDEV),
		"EXTA":                               reflect.ValueOf(i120.EXTA),
		"EXTB":                               reflect.ValueOf(i120.EXTB),
		"EXTPROC":                            reflect.ValueOf(i120.EXTPROC),
		"Environ":                            reflect.ValueOf(i120.Environ),
		"Exchangedata":                       reflect.ValueOf(i120.Exchangedata),
		"Exec":                               reflect.ValueOf(i120.Exec),
		"Exit":                               reflect.ValueOf(i120.Exit),
		"FD_CLOEXEC":                         reflect.ValueOf(i120.FD_CLOEXEC),
		"FD_SETSIZE":                         reflect.ValueOf(i120.FD_SETSIZE),
		"FLUSHO":                             reflect.ValueOf(i120.FLUSHO),
		"F_ADDFILESIGS":                      reflect.ValueOf(i120.F_ADDFILESIGS),
		"F_ADDSIGS":                          reflect.ValueOf(i120.F_ADDSIGS),
		"F_ALLOCATEALL":                      reflect.ValueOf(i120.F_ALLOCATEALL),
		"F_ALLOCATECONTIG":                   reflect.ValueOf(i120.F_ALLOCATECONTIG),
		"F_CHKCLEAN":                         reflect.ValueOf(i120.F_CHKCLEAN),
		"F_DUPFD":                            reflect.ValueOf(i120.F_DUPFD),
		"F_DUPFD_CLOEXEC":                    reflect.ValueOf(i120.F_DUPFD_CLOEXEC),
		"F_FINDSIGS":                         reflect.ValueOf(i120.F_FINDSIGS),
		"F_FLUSH_DATA":                       reflect.ValueOf(i120.F_FLUSH_DATA),
		"F_FREEZE_FS":                        reflect.ValueOf(i120.F_FREEZE_FS),
		"F_FULLFSYNC":                        reflect.ValueOf(i120.F_FULLFSYNC),
		"F_GETCODEDIR":                       reflect.ValueOf(i120.F_GETCODEDIR),
		"F_GETFD":                            reflect.ValueOf(i120.F_GETFD),
		"F_GETFL":                            reflect.ValueOf(i120.F_GETFL),
		"F_GETLK":                            reflect.ValueOf(i120.F_GETLK),
		"F_GETLKPID":                         reflect.ValueOf(i120.F_GETLKPID),
		"F_GETNOSIGPIPE":                     reflect.ValueOf(i120.F_GETNOSIGPIPE),
		"F_GETOWN":                           reflect.ValueOf(i120.F_GETOWN),
		"F_GETPATH":                          reflect.ValueOf(i120.F_GETPATH),
		"F_GETPATH_MTMINFO":                  reflect.ValueOf(i120.F_GETPATH_MTMINFO),
		"F_GETPROTECTIONCLASS":               reflect.ValueOf(i120.F_GETPROTECTIONCLASS),
		"F_GETPROTECTIONLEVEL":               reflect.ValueOf(i120.F_GETPROTECTIONLEVEL),
		"F_GLOBAL_NOCACHE":                   reflect.ValueOf(i120.F_GLOBAL_NOCACHE),
		"F_LOG2PHYS":                         reflect.ValueOf(i120.F_LOG2PHYS),
		"F_LOG2PHYS_EXT":                     reflect.ValueOf(i120.F_LOG2PHYS_EXT),
		"F_NOCACHE":                          reflect.ValueOf(i120.F_NOCACHE),
		"F_NODIRECT":                         reflect.ValueOf(i120.F_NODIRECT),
		"F_OK":                               reflect.ValueOf(i120.F_OK),
		"F_PATHPKG_CHECK":                    reflect.ValueOf(i120.F_PATHPKG_CHECK),
		"F_PEOFPOSMODE":                      reflect.ValueOf(i120.F_PEOFPOSMODE),
		"F_PREALLOCATE":                      reflect.ValueOf(i120.F_PREALLOCATE),
		"F_RDADVISE":                         reflect.ValueOf(i120.F_RDADVISE),
		"F_RDAHEAD":                          reflect.ValueOf(i120.F_RDAHEAD),
		"F_RDLCK":                            reflect.ValueOf(i120.F_RDLCK),
		"F_SETBACKINGSTORE":                  reflect.ValueOf(i120.F_SETBACKINGSTORE),
		"F_SETFD":                            reflect.ValueOf(i120.F_SETFD),
		"F_SETFL":                            reflect.ValueOf(i120.F_SETFL),
		"F_SETLK":                            reflect.ValueOf(i120.F_SETLK),
		"F_SETLKW":                           reflect.ValueOf(i120.F_SETLKW),
		"F_SETLKWTIMEOUT":                    reflect.ValueOf(i120.F_SETLKWTIMEOUT),
		"F_SETNOSIGPIPE":                     reflect.ValueOf(i120.F_SETNOSIGPIPE),
		"F_SETOWN":                           reflect.ValueOf(i120.F_SETOWN),
		"F_SETPROTECTIONCLASS":               reflect.ValueOf(i120.F_SETPROTECTIONCLASS),
		"F_SETSIZE":                          reflect.ValueOf(i120.F_SETSIZE),
		"F_SINGLE_WRITER":                    reflect.ValueOf(i120.F_SINGLE_WRITER),
		"F_THAW_FS":                          reflect.ValueOf(i120.F_THAW_FS),
		"F_TRANSCODEKEY":                     reflect.ValueOf(i120.F_TRANSCODEKEY),
		"F_UNLCK":                            reflect.ValueOf(i120.F_UNLCK),
		"F_VOLPOSMODE":                       reflect.ValueOf(i120.F_VOLPOSMODE),
		"F_WRLCK":                            reflect.ValueOf(i120.F_WRLCK),
		"Fchdir":                             reflect.ValueOf(i120.Fchdir),
		"Fchflags":                           reflect.ValueOf(i120.Fchflags),
		"Fchmod":                             reflect.ValueOf(i120.Fchmod),
		"Fchown":                             reflect.ValueOf(i120.Fchown),
		"FcntlFlock":                         reflect.ValueOf(i120.FcntlFlock),
		"Flock":                              reflect.ValueOf(i120.Flock),
		"FlushBpf":                           reflect.ValueOf(i120.FlushBpf),
		"ForkExec":                           reflect.ValueOf(i120.ForkExec),
		"ForkLock":                           reflect.ValueOf(i120.ForkLock),
		"Fpathconf":                          reflect.ValueOf(i120.Fpathconf),
		"Fstat":                              reflect.ValueOf(i120.Fstat),
		"Fstatfs":                            reflect.ValueOf(i120.Fstatfs),
		"Fsync":                              reflect.ValueOf(i120.Fsync),
		"Ftruncate":                          reflect.ValueOf(i120.Ftruncate),
		"Futimes":                            reflect.ValueOf(i120.Futimes),
		"Getdirentries":                      reflect.ValueOf(i120.Getdirentries),
		"Getdtablesize":                      reflect.ValueOf(i120.Getdtablesize),
		"Getegid":                            reflect.ValueOf(i120.Getegid),
		"Getenv":                             reflect.ValueOf(i120.Getenv),
		"Geteuid":                            reflect.ValueOf(i120.Geteuid),
		"Getfsstat":                          reflect.ValueOf(i120.Getfsstat),
		"Getgid":                             reflect.ValueOf(i120.Getgid),
		"Getgroups":                          reflect.ValueOf(i120.Getgroups),
		"Getpagesize":                        reflect.ValueOf(i120.Getpagesize),
		"Getpeername":                        reflect.ValueOf(i120.Getpeername),
		"Getpgid":                            reflect.ValueOf(i120.Getpgid),
		"Getpgrp":                            reflect.ValueOf(i120.Getpgrp),
		"Getpid":                             reflect.ValueOf(i120.Getpid),
		"Getppid":                            reflect.ValueOf(i120.Getppid),
		"Getpriority":                        reflect.ValueOf(i120.Getpriority),
		"Getrlimit":                          reflect.ValueOf(i120.Getrlimit),
		"Getrusage":                          reflect.ValueOf(i120.Getrusage),
		"Getsid":                             reflect.ValueOf(i120.Getsid),
		"Getsockname":                        reflect.ValueOf(i120.Getsockname),
		"GetsockoptByte":                     reflect.ValueOf(i120.GetsockoptByte),
		"GetsockoptICMPv6Filter":             reflect.ValueOf(i120.GetsockoptICMPv6Filter),
		"GetsockoptIPMreq":                   reflect.ValueOf(i120.GetsockoptIPMreq),
		"GetsockoptIPv6MTUInfo":              reflect.ValueOf(i120.GetsockoptIPv6MTUInfo),
		"GetsockoptIPv6Mreq":                 reflect.ValueOf(i120.GetsockoptIPv6Mreq),
		"GetsockoptInet4Addr":                reflect.ValueOf(i120.GetsockoptInet4Addr),
		"GetsockoptInt":                      reflect.ValueOf(i120.GetsockoptInt),
		"Gettimeofday":                       reflect.ValueOf(i120.Gettimeofday),
		"Getuid":                             reflect.ValueOf(i120.Getuid),
		"Getwd":                              reflect.ValueOf(i120.Getwd),
		"HUPCL":                              reflect.ValueOf(i120.HUPCL),
		"ICANON":                             reflect.ValueOf(i120.ICANON),
		"ICMP6_FILTER":                       reflect.ValueOf(i120.ICMP6_FILTER),
		"ICRNL":                              reflect.ValueOf(i120.ICRNL),
		"IEXTEN":                             reflect.ValueOf(i120.IEXTEN),
		"IFF_ALLMULTI":                       reflect.ValueOf(i120.IFF_ALLMULTI),
		"IFF_ALTPHYS":                        reflect.ValueOf(i120.IFF_ALTPHYS),
		"IFF_BROADCAST":                      reflect.ValueOf(i120.IFF_BROADCAST),
		"IFF_DEBUG":                          reflect.ValueOf(i120.IFF_DEBUG),
		"IFF_LINK0":                          reflect.ValueOf(i120.IFF_LINK0),
		"IFF_LINK1":                          reflect.ValueOf(i120.IFF_LINK1),
		"IFF_LINK2":                          reflect.ValueOf(i120.IFF_LINK2),
		"IFF_LOOPBACK":                       reflect.ValueOf(i120.IFF_LOOPBACK),
		"IFF_MULTICAST":                      reflect.ValueOf(i120.IFF_MULTICAST),
		"IFF_NOARP":                          reflect.ValueOf(i120.IFF_NOARP),
		"IFF_NOTRAILERS":                     reflect.ValueOf(i120.IFF_NOTRAILERS),
		"IFF_OACTIVE":                        reflect.ValueOf(i120.IFF_OACTIVE),
		"IFF_POINTOPOINT":                    reflect.ValueOf(i120.IFF_POINTOPOINT),
		"IFF_PROMISC":                        reflect.ValueOf(i120.IFF_PROMISC),
		"IFF_RUNNING":                        reflect.ValueOf(i120.IFF_RUNNING),
		"IFF_SIMPLEX":                        reflect.ValueOf(i120.IFF_SIMPLEX),
		"IFF_UP":                             reflect.ValueOf(i120.IFF_UP),
		"IFNAMSIZ":                           reflect.ValueOf(i120.IFNAMSIZ),
		"IFT_1822":                           reflect.ValueOf(i120.IFT_1822),
		"IFT_AAL5":                           reflect.ValueOf(i120.IFT_AAL5),
		"IFT_ARCNET":                         reflect.ValueOf(i120.IFT_ARCNET),
		"IFT_ARCNETPLUS":                     reflect.ValueOf(i120.IFT_ARCNETPLUS),
		"IFT_ATM":                            reflect.ValueOf(i120.IFT_ATM),
		"IFT_BRIDGE":                         reflect.ValueOf(i120.IFT_BRIDGE),
		"IFT_CARP":                           reflect.ValueOf(i120.IFT_CARP),
		"IFT_CELLULAR":                       reflect.ValueOf(i120.IFT_CELLULAR),
		"IFT_CEPT":                           reflect.ValueOf(i120.IFT_CEPT),
		"IFT_DS3":                            reflect.ValueOf(i120.IFT_DS3),
		"IFT_ENC":                            reflect.ValueOf(i120.IFT_ENC),
		"IFT_EON":                            reflect.ValueOf(i120.IFT_EON),
		"IFT_ETHER":                          reflect.ValueOf(i120.IFT_ETHER),
		"IFT_FAITH":                          reflect.ValueOf(i120.IFT_FAITH),
		"IFT_FDDI":                           reflect.ValueOf(i120.IFT_FDDI),
		"IFT_FRELAY":                         reflect.ValueOf(i120.IFT_FRELAY),
		"IFT_FRELAYDCE":                      reflect.ValueOf(i120.IFT_FRELAYDCE),
		"IFT_GIF":                            reflect.ValueOf(i120.IFT_GIF),
		"IFT_HDH1822":                        reflect.ValueOf(i120.IFT_HDH1822),
		"IFT_HIPPI":                          reflect.ValueOf(i120.IFT_HIPPI),
		"IFT_HSSI":                           reflect.ValueOf(i120.IFT_HSSI),
		"IFT_HY":                             reflect.ValueOf(i120.IFT_HY),
		"IFT_IEEE1394":                       reflect.ValueOf(i120.IFT_IEEE1394),
		"IFT_IEEE8023ADLAG":                  reflect.ValueOf(i120.IFT_IEEE8023ADLAG),
		"IFT_ISDNBASIC":                      reflect.ValueOf(i120.IFT_ISDNBASIC),
		"IFT_ISDNPRIMARY":                    reflect.ValueOf(i120.IFT_ISDNPRIMARY),
		"IFT_ISO88022LLC":                    reflect.ValueOf(i120.IFT_ISO88022LLC),
		"IFT_ISO88023":                       reflect.ValueOf(i120.IFT_ISO88023),
		"IFT_ISO88024":                       reflect.ValueOf(i120.IFT_ISO88024),
		"IFT_ISO88025":                       reflect.ValueOf(i120.IFT_ISO88025),
		"IFT_ISO88026":                       reflect.ValueOf(i120.IFT_ISO88026),
		"IFT_L2VLAN":                         reflect.ValueOf(i120.IFT_L2VLAN),
		"IFT_LAPB":                           reflect.ValueOf(i120.IFT_LAPB),
		"IFT_LOCALTALK":                      reflect.ValueOf(i120.IFT_LOCALTALK),
		"IFT_LOOP":                           reflect.ValueOf(i120.IFT_LOOP),
		"IFT_MIOX25":                         reflect.ValueOf(i120.IFT_MIOX25),
		"IFT_MODEM":                          reflect.ValueOf(i120.IFT_MODEM),
		"IFT_NSIP":                           reflect.ValueOf(i120.IFT_NSIP),
		"IFT_OTHER":                          reflect.ValueOf(i120.IFT_OTHER),
		"IFT_P10":                            reflect.ValueOf(i120.IFT_P10),
		"IFT_P80":                            reflect.ValueOf(i120.IFT_P80),
		"IFT_PARA":                           reflect.ValueOf(i120.IFT_PARA),
		"IFT_PDP":                            reflect.ValueOf(i120.IFT_PDP),
		"IFT_PFLOG":                          reflect.ValueOf(i120.IFT_PFLOG),
		"IFT_PFSYNC":                         reflect.ValueOf(i120.IFT_PFSYNC),
		"IFT_PPP":                            reflect.ValueOf(i120.IFT_PPP),
		"IFT_PROPMUX":                        reflect.ValueOf(i120.IFT_PROPMUX),
		"IFT_PROPVIRTUAL":                    reflect.ValueOf(i120.IFT_PROPVIRTUAL),
		"IFT_PTPSERIAL":                      reflect.ValueOf(i120.IFT_PTPSERIAL),
		"IFT_RS232":                          reflect.ValueOf(i120.IFT_RS232),
		"IFT_SDLC":                           reflect.ValueOf(i120.IFT_SDLC),
		"IFT_SIP":                            reflect.ValueOf(i120.IFT_SIP),
		"IFT_SLIP":                           reflect.ValueOf(i120.IFT_SLIP),
		"IFT_SMDSDXI":                        reflect.ValueOf(i120.IFT_SMDSDXI),
		"IFT_SMDSICIP":                       reflect.ValueOf(i120.IFT_SMDSICIP),
		"IFT_SONET":                          reflect.ValueOf(i120.IFT_SONET),
		"IFT_SONETPATH":                      reflect.ValueOf(i120.IFT_SONETPATH),
		"IFT_SONETVT":                        reflect.ValueOf(i120.IFT_SONETVT),
		"IFT_STARLAN":                        reflect.ValueOf(i120.IFT_STARLAN),
		"IFT_STF":                            reflect.ValueOf(i120.IFT_STF),
		"IFT_T1":                             reflect.ValueOf(i120.IFT_T1),
		"IFT_ULTRA":                          reflect.ValueOf(i120.IFT_ULTRA),
		"IFT_V35":                            reflect.ValueOf(i120.IFT_V35),
		"IFT_X25":                            reflect.ValueOf(i120.IFT_X25),
		"IFT_X25DDN":                         reflect.ValueOf(i120.IFT_X25DDN),
		"IFT_X25PLE":                         reflect.ValueOf(i120.IFT_X25PLE),
		"IFT_XETHER":                         reflect.ValueOf(i120.IFT_XETHER),
		"IGNBRK":                             reflect.ValueOf(i120.IGNBRK),
		"IGNCR":                              reflect.ValueOf(i120.IGNCR),
		"IGNPAR":                             reflect.ValueOf(i120.IGNPAR),
		"IMAXBEL":                            reflect.ValueOf(i120.IMAXBEL),
		"INLCR":                              reflect.ValueOf(i120.INLCR),
		"INPCK":                              reflect.ValueOf(i120.INPCK),
		"IN_CLASSA_HOST":                     reflect.ValueOf(i120.IN_CLASSA_HOST),
		"IN_CLASSA_MAX":                      reflect.ValueOf(i120.IN_CLASSA_MAX),
		"IN_CLASSA_NET":                      reflect.ValueOf(i120.IN_CLASSA_NET),
		"IN_CLASSA_NSHIFT":                   reflect.ValueOf(i120.IN_CLASSA_NSHIFT),
		"IN_CLASSB_HOST":                     reflect.ValueOf(i120.IN_CLASSB_HOST),
		"IN_CLASSB_MAX":                      reflect.ValueOf(i120.IN_CLASSB_MAX),
		"IN_CLASSB_NET":                      reflect.ValueOf(i120.IN_CLASSB_NET),
		"IN_CLASSB_NSHIFT":                   reflect.ValueOf(i120.IN_CLASSB_NSHIFT),
		"IN_CLASSC_HOST":                     reflect.ValueOf(i120.IN_CLASSC_HOST),
		"IN_CLASSC_NET":                      reflect.ValueOf(i120.IN_CLASSC_NET),
		"IN_CLASSC_NSHIFT":                   reflect.ValueOf(i120.IN_CLASSC_NSHIFT),
		"IN_CLASSD_HOST":                     reflect.ValueOf(i120.IN_CLASSD_HOST),
		"IN_CLASSD_NET":                      reflect.ValueOf(i120.IN_CLASSD_NET),
		"IN_CLASSD_NSHIFT":                   reflect.ValueOf(i120.IN_CLASSD_NSHIFT),
		"IN_LINKLOCALNETNUM":                 reflect.ValueOf(i120.IN_LINKLOCALNETNUM),
		"IN_LOOPBACKNET":                     reflect.ValueOf(i120.IN_LOOPBACKNET),
		"IPPROTO_3PC":                        reflect.ValueOf(i120.IPPROTO_3PC),
		"IPPROTO_ADFS":                       reflect.ValueOf(i120.IPPROTO_ADFS),
		"IPPROTO_AH":                         reflect.ValueOf(i120.IPPROTO_AH),
		"IPPROTO_AHIP":                       reflect.ValueOf(i120.IPPROTO_AHIP),
		"IPPROTO_APES":                       reflect.ValueOf(i120.IPPROTO_APES),
		"IPPROTO_ARGUS":                      reflect.ValueOf(i120.IPPROTO_ARGUS),
		"IPPROTO_AX25":                       reflect.ValueOf(i120.IPPROTO_AX25),
		"IPPROTO_BHA":                        reflect.ValueOf(i120.IPPROTO_BHA),
		"IPPROTO_BLT":                        reflect.ValueOf(i120.IPPROTO_BLT),
		"IPPROTO_BRSATMON":                   reflect.ValueOf(i120.IPPROTO_BRSATMON),
		"IPPROTO_CFTP":                       reflect.ValueOf(i120.IPPROTO_CFTP),
		"IPPROTO_CHAOS":                      reflect.ValueOf(i120.IPPROTO_CHAOS),
		"IPPROTO_CMTP":                       reflect.ValueOf(i120.IPPROTO_CMTP),
		"IPPROTO_CPHB":                       reflect.ValueOf(i120.IPPROTO_CPHB),
		"IPPROTO_CPNX":                       reflect.ValueOf(i120.IPPROTO_CPNX),
		"IPPROTO_DDP":                        reflect.ValueOf(i120.IPPROTO_DDP),
		"IPPROTO_DGP":                        reflect.ValueOf(i120.IPPROTO_DGP),
		"IPPROTO_DIVERT":                     reflect.ValueOf(i120.IPPROTO_DIVERT),
		"IPPROTO_DONE":                       reflect.ValueOf(i120.IPPROTO_DONE),
		"IPPROTO_DSTOPTS":                    reflect.ValueOf(i120.IPPROTO_DSTOPTS),
		"IPPROTO_EGP":                        reflect.ValueOf(i120.IPPROTO_EGP),
		"IPPROTO_EMCON":                      reflect.ValueOf(i120.IPPROTO_EMCON),
		"IPPROTO_ENCAP":                      reflect.ValueOf(i120.IPPROTO_ENCAP),
		"IPPROTO_EON":                        reflect.ValueOf(i120.IPPROTO_EON),
		"IPPROTO_ESP":                        reflect.ValueOf(i120.IPPROTO_ESP),
		"IPPROTO_ETHERIP":                    reflect.ValueOf(i120.IPPROTO_ETHERIP),
		"IPPROTO_FRAGMENT":                   reflect.ValueOf(i120.IPPROTO_FRAGMENT),
		"IPPROTO_GGP":                        reflect.ValueOf(i120.IPPROTO_GGP),
		"IPPROTO_GMTP":                       reflect.ValueOf(i120.IPPROTO_GMTP),
		"IPPROTO_GRE":                        reflect.ValueOf(i120.IPPROTO_GRE),
		"IPPROTO_HELLO":                      reflect.ValueOf(i120.IPPROTO_HELLO),
		"IPPROTO_HMP":                        reflect.ValueOf(i120.IPPROTO_HMP),
		"IPPROTO_HOPOPTS":                    reflect.ValueOf(i120.IPPROTO_HOPOPTS),
		"IPPROTO_ICMP":                       reflect.ValueOf(i120.IPPROTO_ICMP),
		"IPPROTO_ICMPV6":                     reflect.ValueOf(i120.IPPROTO_ICMPV6),
		"IPPROTO_IDP":                        reflect.ValueOf(i120.IPPROTO_IDP),
		"IPPROTO_IDPR":                       reflect.ValueOf(i120.IPPROTO_IDPR),
		"IPPROTO_IDRP":                       reflect.ValueOf(i120.IPPROTO_IDRP),
		"IPPROTO_IGMP":                       reflect.ValueOf(i120.IPPROTO_IGMP),
		"IPPROTO_IGP":                        reflect.ValueOf(i120.IPPROTO_IGP),
		"IPPROTO_IGRP":                       reflect.ValueOf(i120.IPPROTO_IGRP),
		"IPPROTO_IL":                         reflect.ValueOf(i120.IPPROTO_IL),
		"IPPROTO_INLSP":                      reflect.ValueOf(i120.IPPROTO_INLSP),
		"IPPROTO_INP":                        reflect.ValueOf(i120.IPPROTO_INP),
		"IPPROTO_IP":                         reflect.ValueOf(i120.IPPROTO_IP),
		"IPPROTO_IPCOMP":                     reflect.ValueOf(i120.IPPROTO_IPCOMP),
		"IPPROTO_IPCV":                       reflect.ValueOf(i120.IPPROTO_IPCV),
		"IPPROTO_IPEIP":                      reflect.ValueOf(i120.IPPROTO_IPEIP),
		"IPPROTO_IPIP":                       reflect.ValueOf(i120.IPPROTO_IPIP),
		"IPPROTO_IPPC":                       reflect.ValueOf(i120.IPPROTO_IPPC),
		"IPPROTO_IPV4":                       reflect.ValueOf(i120.IPPROTO_IPV4),
		"IPPROTO_IPV6":                       reflect.ValueOf(i120.IPPROTO_IPV6),
		"IPPROTO_IRTP":                       reflect.ValueOf(i120.IPPROTO_IRTP),
		"IPPROTO_KRYPTOLAN":                  reflect.ValueOf(i120.IPPROTO_KRYPTOLAN),
		"IPPROTO_LARP":                       reflect.ValueOf(i120.IPPROTO_LARP),
		"IPPROTO_LEAF1":                      reflect.ValueOf(i120.IPPROTO_LEAF1),
		"IPPROTO_LEAF2":                      reflect.ValueOf(i120.IPPROTO_LEAF2),
		"IPPROTO_MAX":                        reflect.ValueOf(i120.IPPROTO_MAX),
		"IPPROTO_MAXID":                      reflect.ValueOf(i120.IPPROTO_MAXID),
		"IPPROTO_MEAS":                       reflect.ValueOf(i120.IPPROTO_MEAS),
		"IPPROTO_MHRP":                       reflect.ValueOf(i120.IPPROTO_MHRP),
		"IPPROTO_MICP":                       reflect.ValueOf(i120.IPPROTO_MICP),
		"IPPROTO_MTP":                        reflect.ValueOf(i120.IPPROTO_MTP),
		"IPPROTO_MUX":                        reflect.ValueOf(i120.IPPROTO_MUX),
		"IPPROTO_ND":                         reflect.ValueOf(i120.IPPROTO_ND),
		"IPPROTO_NHRP":                       reflect.ValueOf(i120.IPPROTO_NHRP),
		"IPPROTO_NONE":                       reflect.ValueOf(i120.IPPROTO_NONE),
		"IPPROTO_NSP":                        reflect.ValueOf(i120.IPPROTO_NSP),
		"IPPROTO_NVPII":                      reflect.ValueOf(i120.IPPROTO_NVPII),
		"IPPROTO_OSPFIGP":                    reflect.ValueOf(i120.IPPROTO_OSPFIGP),
		"IPPROTO_PGM":                        reflect.ValueOf(i120.IPPROTO_PGM),
		"IPPROTO_PIGP":                       reflect.ValueOf(i120.IPPROTO_PIGP),
		"IPPROTO_PIM":                        reflect.ValueOf(i120.IPPROTO_PIM),
		"IPPROTO_PRM":                        reflect.ValueOf(i120.IPPROTO_PRM),
		"IPPROTO_PUP":                        reflect.ValueOf(i120.IPPROTO_PUP),
		"IPPROTO_PVP":                        reflect.ValueOf(i120.IPPROTO_PVP),
		"IPPROTO_RAW":                        reflect.ValueOf(i120.IPPROTO_RAW),
		"IPPROTO_RCCMON":                     reflect.ValueOf(i120.IPPROTO_RCCMON),
		"IPPROTO_RDP":                        reflect.ValueOf(i120.IPPROTO_RDP),
		"IPPROTO_ROUTING":                    reflect.ValueOf(i120.IPPROTO_ROUTING),
		"IPPROTO_RSVP":                       reflect.ValueOf(i120.IPPROTO_RSVP),
		"IPPROTO_RVD":                        reflect.ValueOf(i120.IPPROTO_RVD),
		"IPPROTO_SATEXPAK":                   reflect.ValueOf(i120.IPPROTO_SATEXPAK),
		"IPPROTO_SATMON":                     reflect.ValueOf(i120.IPPROTO_SATMON),
		"IPPROTO_SCCSP":                      reflect.ValueOf(i120.IPPROTO_SCCSP),
		"IPPROTO_SCTP":                       reflect.ValueOf(i120.IPPROTO_SCTP),
		"IPPROTO_SDRP":                       reflect.ValueOf(i120.IPPROTO_SDRP),
		"IPPROTO_SEP":                        reflect.ValueOf(i120.IPPROTO_SEP),
		"IPPROTO_SRPC":                       reflect.ValueOf(i120.IPPROTO_SRPC),
		"IPPROTO_ST":                         reflect.ValueOf(i120.IPPROTO_ST),
		"IPPROTO_SVMTP":                      reflect.ValueOf(i120.IPPROTO_SVMTP),
		"IPPROTO_SWIPE":                      reflect.ValueOf(i120.IPPROTO_SWIPE),
		"IPPROTO_TCF":                        reflect.ValueOf(i120.IPPROTO_TCF),
		"IPPROTO_TCP":                        reflect.ValueOf(i120.IPPROTO_TCP),
		"IPPROTO_TP":                         reflect.ValueOf(i120.IPPROTO_TP),
		"IPPROTO_TPXX":                       reflect.ValueOf(i120.IPPROTO_TPXX),
		"IPPROTO_TRUNK1":                     reflect.ValueOf(i120.IPPROTO_TRUNK1),
		"IPPROTO_TRUNK2":                     reflect.ValueOf(i120.IPPROTO_TRUNK2),
		"IPPROTO_TTP":                        reflect.ValueOf(i120.IPPROTO_TTP),
		"IPPROTO_UDP":                        reflect.ValueOf(i120.IPPROTO_UDP),
		"IPPROTO_VINES":                      reflect.ValueOf(i120.IPPROTO_VINES),
		"IPPROTO_VISA":                       reflect.ValueOf(i120.IPPROTO_VISA),
		"IPPROTO_VMTP":                       reflect.ValueOf(i120.IPPROTO_VMTP),
		"IPPROTO_WBEXPAK":                    reflect.ValueOf(i120.IPPROTO_WBEXPAK),
		"IPPROTO_WBMON":                      reflect.ValueOf(i120.IPPROTO_WBMON),
		"IPPROTO_WSN":                        reflect.ValueOf(i120.IPPROTO_WSN),
		"IPPROTO_XNET":                       reflect.ValueOf(i120.IPPROTO_XNET),
		"IPPROTO_XTP":                        reflect.ValueOf(i120.IPPROTO_XTP),
		"IPV6_2292DSTOPTS":                   reflect.ValueOf(i120.IPV6_2292DSTOPTS),
		"IPV6_2292HOPLIMIT":                  reflect.ValueOf(i120.IPV6_2292HOPLIMIT),
		"IPV6_2292HOPOPTS":                   reflect.ValueOf(i120.IPV6_2292HOPOPTS),
		"IPV6_2292NEXTHOP":                   reflect.ValueOf(i120.IPV6_2292NEXTHOP),
		"IPV6_2292PKTINFO":                   reflect.ValueOf(i120.IPV6_2292PKTINFO),
		"IPV6_2292PKTOPTIONS":                reflect.ValueOf(i120.IPV6_2292PKTOPTIONS),
		"IPV6_2292RTHDR":                     reflect.ValueOf(i120.IPV6_2292RTHDR),
		"IPV6_BINDV6ONLY":                    reflect.ValueOf(i120.IPV6_BINDV6ONLY),
		"IPV6_BOUND_IF":                      reflect.ValueOf(i120.IPV6_BOUND_IF),
		"IPV6_CHECKSUM":                      reflect.ValueOf(i120.IPV6_CHECKSUM),
		"IPV6_DEFAULT_MULTICAST_HOPS":        reflect.ValueOf(i120.IPV6_DEFAULT_MULTICAST_HOPS),
		"IPV6_DEFAULT_MULTICAST_LOOP":        reflect.ValueOf(i120.IPV6_DEFAULT_MULTICAST_LOOP),
		"IPV6_DEFHLIM":                       reflect.ValueOf(i120.IPV6_DEFHLIM),
		"IPV6_FAITH":                         reflect.ValueOf(i120.IPV6_FAITH),
		"IPV6_FLOWINFO_MASK":                 reflect.ValueOf(i120.IPV6_FLOWINFO_MASK),
		"IPV6_FLOWLABEL_MASK":                reflect.ValueOf(i120.IPV6_FLOWLABEL_MASK),
		"IPV6_FRAGTTL":                       reflect.ValueOf(i120.IPV6_FRAGTTL),
		"IPV6_FW_ADD":                        reflect.ValueOf(i120.IPV6_FW_ADD),
		"IPV6_FW_DEL":                        reflect.ValueOf(i120.IPV6_FW_DEL),
		"IPV6_FW_FLUSH":                      reflect.ValueOf(i120.IPV6_FW_FLUSH),
		"IPV6_FW_GET":                        reflect.ValueOf(i120.IPV6_FW_GET),
		"IPV6_FW_ZERO":                       reflect.ValueOf(i120.IPV6_FW_ZERO),
		"IPV6_HLIMDEC":                       reflect.ValueOf(i120.IPV6_HLIMDEC),
		"IPV6_IPSEC_POLICY":                  reflect.ValueOf(i120.IPV6_IPSEC_POLICY),
		"IPV6_JOIN_GROUP":                    reflect.ValueOf(i120.IPV6_JOIN_GROUP),
		"IPV6_LEAVE_GROUP":                   reflect.ValueOf(i120.IPV6_LEAVE_GROUP),
		"IPV6_MAXHLIM":                       reflect.ValueOf(i120.IPV6_MAXHLIM),
		"IPV6_MAXOPTHDR":                     reflect.ValueOf(i120.IPV6_MAXOPTHDR),
		"IPV6_MAXPACKET":                     reflect.ValueOf(i120.IPV6_MAXPACKET),
		"IPV6_MAX_GROUP_SRC_FILTER":          reflect.ValueOf(i120.IPV6_MAX_GROUP_SRC_FILTER),
		"IPV6_MAX_MEMBERSHIPS":               reflect.ValueOf(i120.IPV6_MAX_MEMBERSHIPS),
		"IPV6_MAX_SOCK_SRC_FILTER":           reflect.ValueOf(i120.IPV6_MAX_SOCK_SRC_FILTER),
		"IPV6_MIN_MEMBERSHIPS":               reflect.ValueOf(i120.IPV6_MIN_MEMBERSHIPS),
		"IPV6_MMTU":                          reflect.ValueOf(i120.IPV6_MMTU),
		"IPV6_MULTICAST_HOPS":                reflect.ValueOf(i120.IPV6_MULTICAST_HOPS),
		"IPV6_MULTICAST_IF":                  reflect.ValueOf(i120.IPV6_MULTICAST_IF),
		"IPV6_MULTICAST_LOOP":                reflect.ValueOf(i120.IPV6_MULTICAST_LOOP),
		"IPV6_PORTRANGE":                     reflect.ValueOf(i120.IPV6_PORTRANGE),
		"IPV6_PORTRANGE_DEFAULT":             reflect.ValueOf(i120.IPV6_PORTRANGE_DEFAULT),
		"IPV6_PORTRANGE_HIGH":                reflect.ValueOf(i120.IPV6_PORTRANGE_HIGH),
		"IPV6_PORTRANGE_LOW":                 reflect.ValueOf(i120.IPV6_PORTRANGE_LOW),
		"IPV6_RECVTCLASS":                    reflect.ValueOf(i120.IPV6_RECVTCLASS),
		"IPV6_RTHDR_LOOSE":                   reflect.ValueOf(i120.IPV6_RTHDR_LOOSE),
		"IPV6_RTHDR_STRICT":                  reflect.ValueOf(i120.IPV6_RTHDR_STRICT),
		"IPV6_RTHDR_TYPE_0":                  reflect.ValueOf(i120.IPV6_RTHDR_TYPE_0),
		"IPV6_SOCKOPT_RESERVED1":             reflect.ValueOf(i120.IPV6_SOCKOPT_RESERVED1),
		"IPV6_TCLASS":                        reflect.ValueOf(i120.IPV6_TCLASS),
		"IPV6_UNICAST_HOPS":                  reflect.ValueOf(i120.IPV6_UNICAST_HOPS),
		"IPV6_V6ONLY":                        reflect.ValueOf(i120.IPV6_V6ONLY),
		"IPV6_VERSION":                       reflect.ValueOf(i120.IPV6_VERSION),
		"IPV6_VERSION_MASK":                  reflect.ValueOf(i120.IPV6_VERSION_MASK),
		"IP_ADD_MEMBERSHIP":                  reflect.ValueOf(i120.IP_ADD_MEMBERSHIP),
		"IP_ADD_SOURCE_MEMBERSHIP":           reflect.ValueOf(i120.IP_ADD_SOURCE_MEMBERSHIP),
		"IP_BLOCK_SOURCE":                    reflect.ValueOf(i120.IP_BLOCK_SOURCE),
		"IP_BOUND_IF":                        reflect.ValueOf(i120.IP_BOUND_IF),
		"IP_DEFAULT_MULTICAST_LOOP":          reflect.ValueOf(i120.IP_DEFAULT_MULTICAST_LOOP),
		"IP_DEFAULT_MULTICAST_TTL":           reflect.ValueOf(i120.IP_DEFAULT_MULTICAST_TTL),
		"IP_DF":                              reflect.ValueOf(i120.IP_DF),
		"IP_DROP_MEMBERSHIP":                 reflect.ValueOf(i120.IP_DROP_MEMBERSHIP),
		"IP_DROP_SOURCE_MEMBERSHIP":          reflect.ValueOf(i120.IP_DROP_SOURCE_MEMBERSHIP),
		"IP_DUMMYNET_CONFIGURE":              reflect.ValueOf(i120.IP_DUMMYNET_CONFIGURE),
		"IP_DUMMYNET_DEL":                    reflect.ValueOf(i120.IP_DUMMYNET_DEL),
		"IP_DUMMYNET_FLUSH":                  reflect.ValueOf(i120.IP_DUMMYNET_FLUSH),
		"IP_DUMMYNET_GET":                    reflect.ValueOf(i120.IP_DUMMYNET_GET),
		"IP_FAITH":                           reflect.ValueOf(i120.IP_FAITH),
		"IP_FW_ADD":                          reflect.ValueOf(i120.IP_FW_ADD),
		"IP_FW_DEL":                          reflect.ValueOf(i120.IP_FW_DEL),
		"IP_FW_FLUSH":                        reflect.ValueOf(i120.IP_FW_FLUSH),
		"IP_FW_GET":                          reflect.ValueOf(i120.IP_FW_GET),
		"IP_FW_RESETLOG":                     reflect.ValueOf(i120.IP_FW_RESETLOG),
		"IP_FW_ZERO":                         reflect.ValueOf(i120.IP_FW_ZERO),
		"IP_HDRINCL":                         reflect.ValueOf(i120.IP_HDRINCL),
		"IP_IPSEC_POLICY":                    reflect.ValueOf(i120.IP_IPSEC_POLICY),
		"IP_MAXPACKET":                       reflect.ValueOf(i120.IP_MAXPACKET),
		"IP_MAX_GROUP_SRC_FILTER":            reflect.ValueOf(i120.IP_MAX_GROUP_SRC_FILTER),
		"IP_MAX_MEMBERSHIPS":                 reflect.ValueOf(i120.IP_MAX_MEMBERSHIPS),
		"IP_MAX_SOCK_MUTE_FILTER":            reflect.ValueOf(i120.IP_MAX_SOCK_MUTE_FILTER),
		"IP_MAX_SOCK_SRC_FILTER":             reflect.ValueOf(i120.IP_MAX_SOCK_SRC_FILTER),
		"IP_MF":                              reflect.ValueOf(i120.IP_MF),
		"IP_MIN_MEMBERSHIPS":                 reflect.ValueOf(i120.IP_MIN_MEMBERSHIPS),
		"IP_MSFILTER":                        reflect.ValueOf(i120.IP_MSFILTER),
		"IP_MSS":                             reflect.ValueOf(i120.IP_MSS),
		"IP_MULTICAST_IF":                    reflect.ValueOf(i120.IP_MULTICAST_IF),
		"IP_MULTICAST_IFINDEX":               reflect.ValueOf(i120.IP_MULTICAST_IFINDEX),
		"IP_MULTICAST_LOOP":                  reflect.ValueOf(i120.IP_MULTICAST_LOOP),
		"IP_MULTICAST_TTL":                   reflect.ValueOf(i120.IP_MULTICAST_TTL),
		"IP_MULTICAST_VIF":                   reflect.ValueOf(i120.IP_MULTICAST_VIF),
		"IP_NAT__XXX":                        reflect.ValueOf(i120.IP_NAT__XXX),
		"IP_OFFMASK":                         reflect.ValueOf(i120.IP_OFFMASK),
		"IP_OLD_FW_ADD":                      reflect.ValueOf(i120.IP_OLD_FW_ADD),
		"IP_OLD_FW_DEL":                      reflect.ValueOf(i120.IP_OLD_FW_DEL),
		"IP_OLD_FW_FLUSH":                    reflect.ValueOf(i120.IP_OLD_FW_FLUSH),
		"IP_OLD_FW_GET":                      reflect.ValueOf(i120.IP_OLD_FW_GET),
		"IP_OLD_FW_RESETLOG":                 reflect.ValueOf(i120.IP_OLD_FW_RESETLOG),
		"IP_OLD_FW_ZERO":                     reflect.ValueOf(i120.IP_OLD_FW_ZERO),
		"IP_OPTIONS":                         reflect.ValueOf(i120.IP_OPTIONS),
		"IP_PKTINFO":                         reflect.ValueOf(i120.IP_PKTINFO),
		"IP_PORTRANGE":                       reflect.ValueOf(i120.IP_PORTRANGE),
		"IP_PORTRANGE_DEFAULT":               reflect.ValueOf(i120.IP_PORTRANGE_DEFAULT),
		"IP_PORTRANGE_HIGH":                  reflect.ValueOf(i120.IP_PORTRANGE_HIGH),
		"IP_PORTRANGE_LOW":                   reflect.ValueOf(i120.IP_PORTRANGE_LOW),
		"IP_RECVDSTADDR":                     reflect.ValueOf(i120.IP_RECVDSTADDR),
		"IP_RECVIF":                          reflect.ValueOf(i120.IP_RECVIF),
		"IP_RECVOPTS":                        reflect.ValueOf(i120.IP_RECVOPTS),
		"IP_RECVPKTINFO":                     reflect.ValueOf(i120.IP_RECVPKTINFO),
		"IP_RECVRETOPTS":                     reflect.ValueOf(i120.IP_RECVRETOPTS),
		"IP_RECVTTL":                         reflect.ValueOf(i120.IP_RECVTTL),
		"IP_RETOPTS":                         reflect.ValueOf(i120.IP_RETOPTS),
		"IP_RF":                              reflect.ValueOf(i120.IP_RF),
		"IP_RSVP_OFF":                        reflect.ValueOf(i120.IP_RSVP_OFF),
		"IP_RSVP_ON":                         reflect.ValueOf(i120.IP_RSVP_ON),
		"IP_RSVP_VIF_OFF":                    reflect.ValueOf(i120.IP_RSVP_VIF_OFF),
		"IP_RSVP_VIF_ON":                     reflect.ValueOf(i120.IP_RSVP_VIF_ON),
		"IP_STRIPHDR":                        reflect.ValueOf(i120.IP_STRIPHDR),
		"IP_TOS":                             reflect.ValueOf(i120.IP_TOS),
		"IP_TRAFFIC_MGT_BACKGROUND":          reflect.ValueOf(i120.IP_TRAFFIC_MGT_BACKGROUND),
		"IP_TTL":                             reflect.ValueOf(i120.IP_TTL),
		"IP_UNBLOCK_SOURCE":                  reflect.ValueOf(i120.IP_UNBLOCK_SOURCE),
		"ISIG":                               reflect.ValueOf(i120.ISIG),
		"ISTRIP":                             reflect.ValueOf(i120.ISTRIP),
		"IUTF8":                              reflect.ValueOf(i120.IUTF8),
		"IXANY":                              reflect.ValueOf(i120.IXANY),
		"IXOFF":                              reflect.ValueOf(i120.IXOFF),
		"IXON":                               reflect.ValueOf(i120.IXON),
		"ImplementsGetwd":                    reflect.ValueOf(i120.ImplementsGetwd),
		"Issetugid":                          reflect.ValueOf(i120.Issetugid),
		"Kevent":                             reflect.ValueOf(i120.Kevent),
		"Kill":                               reflect.ValueOf(i120.Kill),
		"Kqueue":                             reflect.ValueOf(i120.Kqueue),
		"LOCK_EX":                            reflect.ValueOf(i120.LOCK_EX),
		"LOCK_NB":                            reflect.ValueOf(i120.LOCK_NB),
		"LOCK_SH":                            reflect.ValueOf(i120.LOCK_SH),
		"LOCK_UN":                            reflect.ValueOf(i120.LOCK_UN),
		"Lchown":                             reflect.ValueOf(i120.Lchown),
		"Link":                               reflect.ValueOf(i120.Link),
		"Listen":                             reflect.ValueOf(i120.Listen),
		"Lstat":                              reflect.ValueOf(i120.Lstat),
		"MADV_CAN_REUSE":                     reflect.ValueOf(i120.MADV_CAN_REUSE),
		"MADV_DONTNEED":                      reflect.ValueOf(i120.MADV_DONTNEED),
		"MADV_FREE":                          reflect.ValueOf(i120.MADV_FREE),
		"MADV_FREE_REUSABLE":                 reflect.ValueOf(i120.MADV_FREE_REUSABLE),
		"MADV_FREE_REUSE":                    reflect.ValueOf(i120.MADV_FREE_REUSE),
		"MADV_NORMAL":                        reflect.ValueOf(i120.MADV_NORMAL),
		"MADV_RANDOM":                        reflect.ValueOf(i120.MADV_RANDOM),
		"MADV_SEQUENTIAL":                    reflect.ValueOf(i120.MADV_SEQUENTIAL),
		"MADV_WILLNEED":                      reflect.ValueOf(i120.MADV_WILLNEED),
		"MADV_ZERO_WIRED_PAGES":              reflect.ValueOf(i120.MADV_ZERO_WIRED_PAGES),
		"MAP_ANON":                           reflect.ValueOf(i120.MAP_ANON),
		"MAP_COPY":                           reflect.ValueOf(i120.MAP_COPY),
		"MAP_FILE":                           reflect.ValueOf(i120.MAP_FILE),
		"MAP_FIXED":                          reflect.ValueOf(i120.MAP_FIXED),
		"MAP_HASSEMAPHORE":                   reflect.ValueOf(i120.MAP_HASSEMAPHORE),
		"MAP_JIT":                            reflect.ValueOf(i120.MAP_JIT),
		"MAP_NOCACHE":                        reflect.ValueOf(i120.MAP_NOCACHE),
		"MAP_NOEXTEND":                       reflect.ValueOf(i120.MAP_NOEXTEND),
		"MAP_NORESERVE":                      reflect.ValueOf(i120.MAP_NORESERVE),
		"MAP_PRIVATE":                        reflect.ValueOf(i120.MAP_PRIVATE),
		"MAP_RENAME":                         reflect.ValueOf(i120.MAP_RENAME),
		"MAP_RESERVED0080":                   reflect.ValueOf(i120.MAP_RESERVED0080),
		"MAP_SHARED":                         reflect.ValueOf(i120.MAP_SHARED),
		"MCL_CURRENT":                        reflect.ValueOf(i120.MCL_CURRENT),
		"MCL_FUTURE":                         reflect.ValueOf(i120.MCL_FUTURE),
		"MSG_CTRUNC":                         reflect.ValueOf(i120.MSG_CTRUNC),
		"MSG_DONTROUTE":                      reflect.ValueOf(i120.MSG_DONTROUTE),
		"MSG_DONTWAIT":                       reflect.ValueOf(i120.MSG_DONTWAIT),
		"MSG_EOF":                            reflect.ValueOf(i120.MSG_EOF),
		"MSG_EOR":                            reflect.ValueOf(i120.MSG_EOR),
		"MSG_FLUSH":                          reflect.ValueOf(i120.MSG_FLUSH),
		"MSG_HAVEMORE":                       reflect.ValueOf(i120.MSG_HAVEMORE),
		"MSG_HOLD":                           reflect.ValueOf(i120.MSG_HOLD),
		"MSG_NEEDSA":                         reflect.ValueOf(i120.MSG_NEEDSA),
		"MSG_OOB":                            reflect.ValueOf(i120.MSG_OOB),
		"MSG_PEEK":                           reflect.ValueOf(i120.MSG_PEEK),
		"MSG_RCVMORE":                        reflect.ValueOf(i120.MSG_RCVMORE),
		"MSG_SEND":                           reflect.ValueOf(i120.MSG_SEND),
		"MSG_TRUNC":                          reflect.ValueOf(i120.MSG_TRUNC),
		"MSG_WAITALL":                        reflect.ValueOf(i120.MSG_WAITALL),
		"MSG_WAITSTREAM":                     reflect.ValueOf(i120.MSG_WAITSTREAM),
		"MS_ASYNC":                           reflect.ValueOf(i120.MS_ASYNC),
		"MS_DEACTIVATE":                      reflect.ValueOf(i120.MS_DEACTIVATE),
		"MS_INVALIDATE":                      reflect.ValueOf(i120.MS_INVALIDATE),
		"MS_KILLPAGES":                       reflect.ValueOf(i120.MS_KILLPAGES),
		"MS_SYNC":                            reflect.ValueOf(i120.MS_SYNC),
		"Mkdir":                              reflect.ValueOf(i120.Mkdir),
		"Mkfifo":                             reflect.ValueOf(i120.Mkfifo),
		"Mknod":                              reflect.ValueOf(i120.Mknod),
		"Mlock":                              reflect.ValueOf(i120.Mlock),
		"Mlockall":                           reflect.ValueOf(i120.Mlockall),
		"Mmap":                               reflect.ValueOf(i120.Mmap),
		"Mprotect":                           reflect.ValueOf(i120.Mprotect),
		"Munlock":                            reflect.ValueOf(i120.Munlock),
		"Munlockall":                         reflect.ValueOf(i120.Munlockall),
		"Munmap":                             reflect.ValueOf(i120.Munmap),
		"NAME_MAX":                           reflect.ValueOf(i120.NAME_MAX),
		"NET_RT_DUMP":                        reflect.ValueOf(i120.NET_RT_DUMP),
		"NET_RT_DUMP2":                       reflect.ValueOf(i120.NET_RT_DUMP2),
		"NET_RT_FLAGS":                       reflect.ValueOf(i120.NET_RT_FLAGS),
		"NET_RT_IFLIST":                      reflect.ValueOf(i120.NET_RT_IFLIST),
		"NET_RT_IFLIST2":                     reflect.ValueOf(i120.NET_RT_IFLIST2),
		"NET_RT_MAXID":                       reflect.ValueOf(i120.NET_RT_MAXID),
		"NET_RT_STAT":                        reflect.ValueOf(i120.NET_RT_STAT),
		"NET_RT_TRASH":                       reflect.ValueOf(i120.NET_RT_TRASH),
		"NOFLSH":                             reflect.ValueOf(i120.NOFLSH),
		"NOTE_ABSOLUTE":                      reflect.ValueOf(i120.NOTE_ABSOLUTE),
		"NOTE_ATTRIB":                        reflect.ValueOf(i120.NOTE_ATTRIB),
		"NOTE_BACKGROUND":                    reflect.ValueOf(i120.NOTE_BACKGROUND),
		"NOTE_CHILD":                         reflect.ValueOf(i120.NOTE_CHILD),
		"NOTE_CRITICAL":                      reflect.ValueOf(i120.NOTE_CRITICAL),
		"NOTE_DELETE":                        reflect.ValueOf(i120.NOTE_DELETE),
		"NOTE_EXEC":                          reflect.ValueOf(i120.NOTE_EXEC),
		"NOTE_EXIT":                          reflect.ValueOf(i120.NOTE_EXIT),
		"NOTE_EXITSTATUS":                    reflect.ValueOf(i120.NOTE_EXITSTATUS),
		"NOTE_EXIT_CSERROR":                  reflect.ValueOf(i120.NOTE_EXIT_CSERROR),
		"NOTE_EXIT_DECRYPTFAIL":              reflect.ValueOf(i120.NOTE_EXIT_DECRYPTFAIL),
		"NOTE_EXIT_DETAIL":                   reflect.ValueOf(i120.NOTE_EXIT_DETAIL),
		"NOTE_EXIT_DETAIL_MASK":              reflect.ValueOf(i120.NOTE_EXIT_DETAIL_MASK),
		"NOTE_EXIT_MEMORY":                   reflect.ValueOf(i120.NOTE_EXIT_MEMORY),
		"NOTE_EXIT_REPARENTED":               reflect.ValueOf(i120.NOTE_EXIT_REPARENTED),
		"NOTE_EXTEND":                        reflect.ValueOf(i120.NOTE_EXTEND),
		"NOTE_FFAND":                         reflect.ValueOf(i120.NOTE_FFAND),
		"NOTE_FFCOPY":                        reflect.ValueOf(i120.NOTE_FFCOPY),
		"NOTE_FFCTRLMASK":                    reflect.ValueOf(i120.NOTE_FFCTRLMASK),
		"NOTE_FFLAGSMASK":                    reflect.ValueOf(i120.NOTE_FFLAGSMASK),
		"NOTE_FFNOP":                         reflect.ValueOf(i120.NOTE_FFNOP),
		"NOTE_FFOR":                          reflect.ValueOf(i120.NOTE_FFOR),
		"NOTE_FORK":                          reflect.ValueOf(i120.NOTE_FORK),
		"NOTE_LEEWAY":                        reflect.ValueOf(i120.NOTE_LEEWAY),
		"NOTE_LINK":                          reflect.ValueOf(i120.NOTE_LINK),
		"NOTE_LOWAT":                         reflect.ValueOf(i120.NOTE_LOWAT),
		"NOTE_NONE":                          reflect.ValueOf(i120.NOTE_NONE),
		"NOTE_NSECONDS":                      reflect.ValueOf(i120.NOTE_NSECONDS),
		"NOTE_PCTRLMASK":                     reflect.ValueOf(i120.NOTE_PCTRLMASK),
		"NOTE_PDATAMASK":                     reflect.ValueOf(i120.NOTE_PDATAMASK),
		"NOTE_REAP":                          reflect.ValueOf(i120.NOTE_REAP),
		"NOTE_RENAME":                        reflect.ValueOf(i120.NOTE_RENAME),
		"NOTE_REVOKE":                        reflect.ValueOf(i120.NOTE_REVOKE),
		"NOTE_SECONDS":                       reflect.ValueOf(i120.NOTE_SECONDS),
		"NOTE_SIGNAL":                        reflect.ValueOf(i120.NOTE_SIGNAL),
		"NOTE_TRACK":                         reflect.ValueOf(i120.NOTE_TRACK),
		"NOTE_TRACKERR":                      reflect.ValueOf(i120.NOTE_TRACKERR),
		"NOTE_TRIGGER":                       reflect.ValueOf(i120.NOTE_TRIGGER),
		"NOTE_USECONDS":                      reflect.ValueOf(i120.NOTE_USECONDS),
		"NOTE_VM_ERROR":                      reflect.ValueOf(i120.NOTE_VM_ERROR),
		"NOTE_VM_PRESSURE":                   reflect.ValueOf(i120.NOTE_VM_PRESSURE),
		"NOTE_VM_PRESSURE_SUDDEN_TERMINATE":  reflect.ValueOf(i120.NOTE_VM_PRESSURE_SUDDEN_TERMINATE),
		"NOTE_VM_PRESSURE_TERMINATE":         reflect.ValueOf(i120.NOTE_VM_PRESSURE_TERMINATE),
		"NOTE_WRITE":                         reflect.ValueOf(i120.NOTE_WRITE),
		"NsecToTimespec":                     reflect.ValueOf(i120.NsecToTimespec),
		"NsecToTimeval":                      reflect.ValueOf(i120.NsecToTimeval),
		"OCRNL":                              reflect.ValueOf(i120.OCRNL),
		"OFDEL":                              reflect.ValueOf(i120.OFDEL),
		"OFILL":                              reflect.ValueOf(i120.OFILL),
		"ONLCR":                              reflect.ValueOf(i120.ONLCR),
		"ONLRET":                             reflect.ValueOf(i120.ONLRET),
		"ONOCR":                              reflect.ValueOf(i120.ONOCR),
		"ONOEOT":                             reflect.ValueOf(i120.ONOEOT),
		"OPOST":                              reflect.ValueOf(i120.OPOST),
		"O_ACCMODE":                          reflect.ValueOf(i120.O_ACCMODE),
		"O_ALERT":                            reflect.ValueOf(i120.O_ALERT),
		"O_APPEND":                           reflect.ValueOf(i120.O_APPEND),
		"O_ASYNC":                            reflect.ValueOf(i120.O_ASYNC),
		"O_CLOEXEC":                          reflect.ValueOf(i120.O_CLOEXEC),
		"O_CREAT":                            reflect.ValueOf(i120.O_CREAT),
		"O_DIRECTORY":                        reflect.ValueOf(i120.O_DIRECTORY),
		"O_DP_GETRAWENCRYPTED":               reflect.ValueOf(i120.O_DP_GETRAWENCRYPTED),
		"O_DSYNC":                            reflect.ValueOf(i120.O_DSYNC),
		"O_EVTONLY":                          reflect.ValueOf(i120.O_EVTONLY),
		"O_EXCL":                             reflect.ValueOf(i120.O_EXCL),
		"O_EXLOCK":                           reflect.ValueOf(i120.O_EXLOCK),
		"O_FSYNC":                            reflect.ValueOf(i120.O_FSYNC),
		"O_NDELAY":                           reflect.ValueOf(i120.O_NDELAY),
		"O_NOCTTY":                           reflect.ValueOf(i120.O_NOCTTY),
		"O_NOFOLLOW":                         reflect.ValueOf(i120.O_NOFOLLOW),
		"O_NONBLOCK":                         reflect.ValueOf(i120.O_NONBLOCK),
		"O_POPUP":                            reflect.ValueOf(i120.O_POPUP),
		"O_RDONLY":                           reflect.ValueOf(i120.O_RDONLY),
		"O_RDWR":                             reflect.ValueOf(i120.O_RDWR),
		"O_SHLOCK":                           reflect.ValueOf(i120.O_SHLOCK),
		"O_SYMLINK":                          reflect.ValueOf(i120.O_SYMLINK),
		"O_SYNC":                             reflect.ValueOf(i120.O_SYNC),
		"O_TRUNC":                            reflect.ValueOf(i120.O_TRUNC),
		"O_WRONLY":                           reflect.ValueOf(i120.O_WRONLY),
		"Open":                               reflect.ValueOf(i120.Open),
		"PARENB":                             reflect.ValueOf(i120.PARENB),
		"PARMRK":                             reflect.ValueOf(i120.PARMRK),
		"PARODD":                             reflect.ValueOf(i120.PARODD),
		"PENDIN":                             reflect.ValueOf(i120.PENDIN),
		"PRIO_PGRP":                          reflect.ValueOf(i120.PRIO_PGRP),
		"PRIO_PROCESS":                       reflect.ValueOf(i120.PRIO_PROCESS),
		"PRIO_USER":                          reflect.ValueOf(i120.PRIO_USER),
		"PROT_EXEC":                          reflect.ValueOf(i120.PROT_EXEC),
		"PROT_NONE":                          reflect.ValueOf(i120.PROT_NONE),
		"PROT_READ":                          reflect.ValueOf(i120.PROT_READ),
		"PROT_WRITE":                         reflect.ValueOf(i120.PROT_WRITE),
		"PTRACE_CONT":                        reflect.ValueOf(i120.PTRACE_CONT),
		"PTRACE_KILL":                        reflect.ValueOf(i120.PTRACE_KILL),
		"PTRACE_TRACEME":                     reflect.ValueOf(i120.PTRACE_TRACEME),
		"PT_ATTACH":                          reflect.ValueOf(i120.PT_ATTACH),
		"PT_ATTACHEXC":                       reflect.ValueOf(i120.PT_ATTACHEXC),
		"PT_CONTINUE":                        reflect.ValueOf(i120.PT_CONTINUE),
		"PT_DENY_ATTACH":                     reflect.ValueOf(i120.PT_DENY_ATTACH),
		"PT_DETACH":                          reflect.ValueOf(i120.PT_DETACH),
		"PT_FIRSTMACH":                       reflect.ValueOf(i120.PT_FIRSTMACH),
		"PT_FORCEQUOTA":                      reflect.ValueOf(i120.PT_FORCEQUOTA),
		"PT_KILL":                            reflect.ValueOf(i120.PT_KILL),
		"PT_READ_D":                          reflect.ValueOf(i120.PT_READ_D),
		"PT_READ_I":                          reflect.ValueOf(i120.PT_READ_I),
		"PT_READ_U":                          reflect.ValueOf(i120.PT_READ_U),
		"PT_SIGEXC":                          reflect.ValueOf(i120.PT_SIGEXC),
		"PT_STEP":                            reflect.ValueOf(i120.PT_STEP),
		"PT_THUPDATE":                        reflect.ValueOf(i120.PT_THUPDATE),
		"PT_TRACE_ME":                        reflect.ValueOf(i120.PT_TRACE_ME),
		"PT_WRITE_D":                         reflect.ValueOf(i120.PT_WRITE_D),
		"PT_WRITE_I":                         reflect.ValueOf(i120.PT_WRITE_I),
		"PT_WRITE_U":                         reflect.ValueOf(i120.PT_WRITE_U),
		"ParseDirent":                        reflect.ValueOf(i120.ParseDirent),
		"ParseRoutingMessage":                reflect.ValueOf(i120.ParseRoutingMessage),
		"ParseRoutingSockaddr":               reflect.ValueOf(i120.ParseRoutingSockaddr),
		"ParseSocketControlMessage":          reflect.ValueOf(i120.ParseSocketControlMessage),
		"ParseUnixRights":                    reflect.ValueOf(i120.ParseUnixRights),
		"Pathconf":                           reflect.ValueOf(i120.Pathconf),
		"Pipe":                               reflect.ValueOf(i120.Pipe),
		"Pread":                              reflect.ValueOf(i120.Pread),
		"PtraceAttach":                       reflect.ValueOf(i120.PtraceAttach),
		"PtraceDetach":                       reflect.ValueOf(i120.PtraceDetach),
		"Pwrite":                             reflect.ValueOf(i120.Pwrite),
		"RLIMIT_AS":                          reflect.ValueOf(i120.RLIMIT_AS),
		"RLIMIT_CORE":                        reflect.ValueOf(i120.RLIMIT_CORE),
		"RLIMIT_CPU":                         reflect.ValueOf(i120.RLIMIT_CPU),
		"RLIMIT_CPU_USAGE_MONITOR":           reflect.ValueOf(i120.RLIMIT_CPU_USAGE_MONITOR),
		"RLIMIT_DATA":                        reflect.ValueOf(i120.RLIMIT_DATA),
		"RLIMIT_FSIZE":                       reflect.ValueOf(i120.RLIMIT_FSIZE),
		"RLIMIT_NOFILE":                      reflect.ValueOf(i120.RLIMIT_NOFILE),
		"RLIMIT_STACK":                       reflect.ValueOf(i120.RLIMIT_STACK),
		"RLIM_INFINITY":                      reflect.ValueOf(i120.RLIM_INFINITY),
		"RTAX_AUTHOR":                        reflect.ValueOf(i120.RTAX_AUTHOR),
		"RTAX_BRD":                           reflect.ValueOf(i120.RTAX_BRD),
		"RTAX_DST":                           reflect.ValueOf(i120.RTAX_DST),
		"RTAX_GATEWAY":                       reflect.ValueOf(i120.RTAX_GATEWAY),
		"RTAX_GENMASK":                       reflect.ValueOf(i120.RTAX_GENMASK),
		"RTAX_IFA":                           reflect.ValueOf(i120.RTAX_IFA),
		"RTAX_IFP":                           reflect.ValueOf(i120.RTAX_IFP),
		"RTAX_MAX":                           reflect.ValueOf(i120.RTAX_MAX),
		"RTAX_NETMASK":                       reflect.ValueOf(i120.RTAX_NETMASK),
		"RTA_AUTHOR":                         reflect.ValueOf(i120.RTA_AUTHOR),
		"RTA_BRD":                            reflect.ValueOf(i120.RTA_BRD),
		"RTA_DST":                            reflect.ValueOf(i120.RTA_DST),
		"RTA_GATEWAY":                        reflect.ValueOf(i120.RTA_GATEWAY),
		"RTA_GENMASK":                        reflect.ValueOf(i120.RTA_GENMASK),
		"RTA_IFA":                            reflect.ValueOf(i120.RTA_IFA),
		"RTA_IFP":                            reflect.ValueOf(i120.RTA_IFP),
		"RTA_NETMASK":                        reflect.ValueOf(i120.RTA_NETMASK),
		"RTF_BLACKHOLE":                      reflect.ValueOf(i120.RTF_BLACKHOLE),
		"RTF_BROADCAST":                      reflect.ValueOf(i120.RTF_BROADCAST),
		"RTF_CLONING":                        reflect.ValueOf(i120.RTF_CLONING),
		"RTF_CONDEMNED":                      reflect.ValueOf(i120.RTF_CONDEMNED),
		"RTF_DELCLONE":                       reflect.ValueOf(i120.RTF_DELCLONE),
		"RTF_DONE":                           reflect.ValueOf(i120.RTF_DONE),
		"RTF_DYNAMIC":                        reflect.ValueOf(i120.RTF_DYNAMIC),
		"RTF_GATEWAY":                        reflect.ValueOf(i120.RTF_GATEWAY),
		"RTF_HOST":                           reflect.ValueOf(i120.RTF_HOST),
		"RTF_IFREF":                          reflect.ValueOf(i120.RTF_IFREF),
		"RTF_IFSCOPE":                        reflect.ValueOf(i120.RTF_IFSCOPE),
		"RTF_LLINFO":                         reflect.ValueOf(i120.RTF_LLINFO),
		"RTF_LOCAL":                          reflect.ValueOf(i120.RTF_LOCAL),
		"RTF_MODIFIED":                       reflect.ValueOf(i120.RTF_MODIFIED),
		"RTF_MULTICAST":                      reflect.ValueOf(i120.RTF_MULTICAST),
		"RTF_PINNED":                         reflect.ValueOf(i120.RTF_PINNED),
		"RTF_PRCLONING":                      reflect.ValueOf(i120.RTF_PRCLONING),
		"RTF_PROTO1":                         reflect.ValueOf(i120.RTF_PROTO1),
		"RTF_PROTO2":                         reflect.ValueOf(i120.RTF_PROTO2),
		"RTF_PROTO3":                         reflect.ValueOf(i120.RTF_PROTO3),
		"RTF_PROXY":                          reflect.ValueOf(i120.RTF_PROXY),
		"RTF_REJECT":                         reflect.ValueOf(i120.RTF_REJECT),
		"RTF_ROUTER":                         reflect.ValueOf(i120.RTF_ROUTER),
		"RTF_STATIC":                         reflect.ValueOf(i120.RTF_STATIC),
		"RTF_UP":                             reflect.ValueOf(i120.RTF_UP),
		"RTF_WASCLONED":                      reflect.ValueOf(i120.RTF_WASCLONED),
		"RTF_XRESOLVE":                       reflect.ValueOf(i120.RTF_XRESOLVE),
		"RTM_ADD":                            reflect.ValueOf(i120.RTM_ADD),
		"RTM_CHANGE":                         reflect.ValueOf(i120.RTM_CHANGE),
		"RTM_DELADDR":                        reflect.ValueOf(i120.RTM_DELADDR),
		"RTM_DELETE":                         reflect.ValueOf(i120.RTM_DELETE),
		"RTM_DELMADDR":                       reflect.ValueOf(i120.RTM_DELMADDR),
		"RTM_GET":                            reflect.ValueOf(i120.RTM_GET),
		"RTM_GET2":                           reflect.ValueOf(i120.RTM_GET2),
		"RTM_IFINFO":                         reflect.ValueOf(i120.RTM_IFINFO),
		"RTM_IFINFO2":                        reflect.ValueOf(i120.RTM_IFINFO2),
		"RTM_LOCK":                           reflect.ValueOf(i120.RTM_LOCK),
		"RTM_LOSING":                         reflect.ValueOf(i120.RTM_LOSING),
		"RTM_MISS":                           reflect.ValueOf(i120.RTM_MISS),
		"RTM_NEWADDR":                        reflect.ValueOf(i120.RTM_NEWADDR),
		"RTM_NEWMADDR":                       reflect.ValueOf(i120.RTM_NEWMADDR),
		"RTM_NEWMADDR2":                      reflect.ValueOf(i120.RTM_NEWMADDR2),
		"RTM_OLDADD":                         reflect.ValueOf(i120.RTM_OLDADD),
		"RTM_OLDDEL":                         reflect.ValueOf(i120.RTM_OLDDEL),
		"RTM_REDIRECT":                       reflect.ValueOf(i120.RTM_REDIRECT),
		"RTM_RESOLVE":                        reflect.ValueOf(i120.RTM_RESOLVE),
		"RTM_RTTUNIT":                        reflect.ValueOf(i120.RTM_RTTUNIT),
		"RTM_VERSION":                        reflect.ValueOf(i120.RTM_VERSION),
		"RTV_EXPIRE":                         reflect.ValueOf(i120.RTV_EXPIRE),
		"RTV_HOPCOUNT":                       reflect.ValueOf(i120.RTV_HOPCOUNT),
		"RTV_MTU":                            reflect.ValueOf(i120.RTV_MTU),
		"RTV_RPIPE":                          reflect.ValueOf(i120.RTV_RPIPE),
		"RTV_RTT":                            reflect.ValueOf(i120.RTV_RTT),
		"RTV_RTTVAR":                         reflect.ValueOf(i120.RTV_RTTVAR),
		"RTV_SPIPE":                          reflect.ValueOf(i120.RTV_SPIPE),
		"RTV_SSTHRESH":                       reflect.ValueOf(i120.RTV_SSTHRESH),
		"RUSAGE_CHILDREN":                    reflect.ValueOf(i120.RUSAGE_CHILDREN),
		"RUSAGE_SELF":                        reflect.ValueOf(i120.RUSAGE_SELF),
		"RawSyscall":                         reflect.ValueOf(i120.RawSyscall),
		"RawSyscall6":                        reflect.ValueOf(i120.RawSyscall6),
		"Read":                               reflect.ValueOf(i120.Read),
		"ReadDirent":                         reflect.ValueOf(i120.ReadDirent),
		"Readlink":                           reflect.ValueOf(i120.Readlink),
		"Recvfrom":                           reflect.ValueOf(i120.Recvfrom),
		"Recvmsg":                            reflect.ValueOf(i120.Recvmsg),
		"Rename":                             reflect.ValueOf(i120.Rename),
		"Revoke":                             reflect.ValueOf(i120.Revoke),
		"Rmdir":                              reflect.ValueOf(i120.Rmdir),
		"RouteRIB":                           reflect.ValueOf(i120.RouteRIB),
		"SCM_CREDS":                          reflect.ValueOf(i120.SCM_CREDS),
		"SCM_RIGHTS":                         reflect.ValueOf(i120.SCM_RIGHTS),
		"SCM_TIMESTAMP":                      reflect.ValueOf(i120.SCM_TIMESTAMP),
		"SCM_TIMESTAMP_MONOTONIC":            reflect.ValueOf(i120.SCM_TIMESTAMP_MONOTONIC),
		"SHUT_RD":                            reflect.ValueOf(i120.SHUT_RD),
		"SHUT_RDWR":                          reflect.ValueOf(i120.SHUT_RDWR),
		"SHUT_WR":                            reflect.ValueOf(i120.SHUT_WR),
		"SIGABRT":                            reflect.ValueOf(i120.SIGABRT),
		"SIGALRM":                            reflect.ValueOf(i120.SIGALRM),
		"SIGBUS":                             reflect.ValueOf(i120.SIGBUS),
		"SIGCHLD":                            reflect.ValueOf(i120.SIGCHLD),
		"SIGCONT":                            reflect.ValueOf(i120.SIGCONT),
		"SIGEMT":                             reflect.ValueOf(i120.SIGEMT),
		"SIGFPE":                             reflect.ValueOf(i120.SIGFPE),
		"SIGHUP":                             reflect.ValueOf(i120.SIGHUP),
		"SIGILL":                             reflect.ValueOf(i120.SIGILL),
		"SIGINFO":                            reflect.ValueOf(i120.SIGINFO),
		"SIGINT":                             reflect.ValueOf(i120.SIGINT),
		"SIGIO":                              reflect.ValueOf(i120.SIGIO),
		"SIGIOT":                             reflect.ValueOf(i120.SIGIOT),
		"SIGKILL":                            reflect.ValueOf(i120.SIGKILL),
		"SIGPIPE":                            reflect.ValueOf(i120.SIGPIPE),
		"SIGPROF":                            reflect.ValueOf(i120.SIGPROF),
		"SIGQUIT":                            reflect.ValueOf(i120.SIGQUIT),
		"SIGSEGV":                            reflect.ValueOf(i120.SIGSEGV),
		"SIGSTOP":                            reflect.ValueOf(i120.SIGSTOP),
		"SIGSYS":                             reflect.ValueOf(i120.SIGSYS),
		"SIGTERM":                            reflect.ValueOf(i120.SIGTERM),
		"SIGTRAP":                            reflect.ValueOf(i120.SIGTRAP),
		"SIGTSTP":                            reflect.ValueOf(i120.SIGTSTP),
		"SIGTTIN":                            reflect.ValueOf(i120.SIGTTIN),
		"SIGTTOU":                            reflect.ValueOf(i120.SIGTTOU),
		"SIGURG":                             reflect.ValueOf(i120.SIGURG),
		"SIGUSR1":                            reflect.ValueOf(i120.SIGUSR1),
		"SIGUSR2":                            reflect.ValueOf(i120.SIGUSR2),
		"SIGVTALRM":                          reflect.ValueOf(i120.SIGVTALRM),
		"SIGWINCH":                           reflect.ValueOf(i120.SIGWINCH),
		"SIGXCPU":                            reflect.ValueOf(i120.SIGXCPU),
		"SIGXFSZ":                            reflect.ValueOf(i120.SIGXFSZ),
		"SIOCADDMULTI":                       reflect.ValueOf(i120.SIOCADDMULTI),
		"SIOCAIFADDR":                        reflect.ValueOf(i120.SIOCAIFADDR),
		"SIOCARPIPLL":                        reflect.ValueOf(i120.SIOCARPIPLL),
		"SIOCATMARK":                         reflect.ValueOf(i120.SIOCATMARK),
		"SIOCAUTOADDR":                       reflect.ValueOf(i120.SIOCAUTOADDR),
		"SIOCAUTONETMASK":                    reflect.ValueOf(i120.SIOCAUTONETMASK),
		"SIOCDELMULTI":                       reflect.ValueOf(i120.SIOCDELMULTI),
		"SIOCDIFADDR":                        reflect.ValueOf(i120.SIOCDIFADDR),
		"SIOCDIFPHYADDR":                     reflect.ValueOf(i120.SIOCDIFPHYADDR),
		"SIOCGDRVSPEC":                       reflect.ValueOf(i120.SIOCGDRVSPEC),
		"SIOCGETVLAN":                        reflect.ValueOf(i120.SIOCGETVLAN),
		"SIOCGHIWAT":                         reflect.ValueOf(i120.SIOCGHIWAT),
		"SIOCGIFADDR":                        reflect.ValueOf(i120.SIOCGIFADDR),
		"SIOCGIFALTMTU":                      reflect.ValueOf(i120.SIOCGIFALTMTU),
		"SIOCGIFASYNCMAP":                    reflect.ValueOf(i120.SIOCGIFASYNCMAP),
		"SIOCGIFBOND":                        reflect.ValueOf(i120.SIOCGIFBOND),
		"SIOCGIFBRDADDR":                     reflect.ValueOf(i120.SIOCGIFBRDADDR),
		"SIOCGIFCAP":                         reflect.ValueOf(i120.SIOCGIFCAP),
		"SIOCGIFCONF":                        reflect.ValueOf(i120.SIOCGIFCONF),
		"SIOCGIFDEVMTU":                      reflect.ValueOf(i120.SIOCGIFDEVMTU),
		"SIOCGIFDSTADDR":                     reflect.ValueOf(i120.SIOCGIFDSTADDR),
		"SIOCGIFFLAGS":                       reflect.ValueOf(i120.SIOCGIFFLAGS),
		"SIOCGIFGENERIC":                     reflect.ValueOf(i120.SIOCGIFGENERIC),
		"SIOCGIFKPI":                         reflect.ValueOf(i120.SIOCGIFKPI),
		"SIOCGIFMAC":                         reflect.ValueOf(i120.SIOCGIFMAC),
		"SIOCGIFMEDIA":                       reflect.ValueOf(i120.SIOCGIFMEDIA),
		"SIOCGIFMETRIC":                      reflect.ValueOf(i120.SIOCGIFMETRIC),
		"SIOCGIFMTU":                         reflect.ValueOf(i120.SIOCGIFMTU),
		"SIOCGIFNETMASK":                     reflect.ValueOf(i120.SIOCGIFNETMASK),
		"SIOCGIFPDSTADDR":                    reflect.ValueOf(i120.SIOCGIFPDSTADDR),
		"SIOCGIFPHYS":                        reflect.ValueOf(i120.SIOCGIFPHYS),
		"SIOCGIFPSRCADDR":                    reflect.ValueOf(i120.SIOCGIFPSRCADDR),
		"SIOCGIFSTATUS":                      reflect.ValueOf(i120.SIOCGIFSTATUS),
		"SIOCGIFVLAN":                        reflect.ValueOf(i120.SIOCGIFVLAN),
		"SIOCGIFWAKEFLAGS":                   reflect.ValueOf(i120.SIOCGIFWAKEFLAGS),
		"SIOCGLOWAT":                         reflect.ValueOf(i120.SIOCGLOWAT),
		"SIOCGPGRP":                          reflect.ValueOf(i120.SIOCGPGRP),
		"SIOCIFCREATE":                       reflect.ValueOf(i120.SIOCIFCREATE),
		"SIOCIFCREATE2":                      reflect.ValueOf(i120.SIOCIFCREATE2),
		"SIOCIFDESTROY":                      reflect.ValueOf(i120.SIOCIFDESTROY),
		"SIOCIFGCLONERS":                     reflect.ValueOf(i120.SIOCIFGCLONERS),
		"SIOCRSLVMULTI":                      reflect.ValueOf(i120.SIOCRSLVMULTI),
		"SIOCSDRVSPEC":                       reflect.ValueOf(i120.SIOCSDRVSPEC),
		"SIOCSETVLAN":                        reflect.ValueOf(i120.SIOCSETVLAN),
		"SIOCSHIWAT":                         reflect.ValueOf(i120.SIOCSHIWAT),
		"SIOCSIFADDR":                        reflect.ValueOf(i120.SIOCSIFADDR),
		"SIOCSIFALTMTU":                      reflect.ValueOf(i120.SIOCSIFALTMTU),
		"SIOCSIFASYNCMAP":                    reflect.ValueOf(i120.SIOCSIFASYNCMAP),
		"SIOCSIFBOND":                        reflect.ValueOf(i120.SIOCSIFBOND),
		"SIOCSIFBRDADDR":                     reflect.ValueOf(i120.SIOCSIFBRDADDR),
		"SIOCSIFCAP":                         reflect.ValueOf(i120.SIOCSIFCAP),
		"SIOCSIFDSTADDR":                     reflect.ValueOf(i120.SIOCSIFDSTADDR),
		"SIOCSIFFLAGS":                       reflect.ValueOf(i120.SIOCSIFFLAGS),
		"SIOCSIFGENERIC":                     reflect.ValueOf(i120.SIOCSIFGENERIC),
		"SIOCSIFKPI":                         reflect.ValueOf(i120.SIOCSIFKPI),
		"SIOCSIFLLADDR":                      reflect.ValueOf(i120.SIOCSIFLLADDR),
		"SIOCSIFMAC":                         reflect.ValueOf(i120.SIOCSIFMAC),
		"SIOCSIFMEDIA":                       reflect.ValueOf(i120.SIOCSIFMEDIA),
		"SIOCSIFMETRIC":                      reflect.ValueOf(i120.SIOCSIFMETRIC),
		"SIOCSIFMTU":                         reflect.ValueOf(i120.SIOCSIFMTU),
		"SIOCSIFNETMASK":                     reflect.ValueOf(i120.SIOCSIFNETMASK),
		"SIOCSIFPHYADDR":                     reflect.ValueOf(i120.SIOCSIFPHYADDR),
		"SIOCSIFPHYS":                        reflect.ValueOf(i120.SIOCSIFPHYS),
		"SIOCSIFVLAN":                        reflect.ValueOf(i120.SIOCSIFVLAN),
		"SIOCSLOWAT":                         reflect.ValueOf(i120.SIOCSLOWAT),
		"SIOCSPGRP":                          reflect.ValueOf(i120.SIOCSPGRP),
		"SOCK_DGRAM":                         reflect.ValueOf(i120.SOCK_DGRAM),
		"SOCK_MAXADDRLEN":                    reflect.ValueOf(i120.SOCK_MAXADDRLEN),
		"SOCK_RAW":                           reflect.ValueOf(i120.SOCK_RAW),
		"SOCK_RDM":                           reflect.ValueOf(i120.SOCK_RDM),
		"SOCK_SEQPACKET":                     reflect.ValueOf(i120.SOCK_SEQPACKET),
		"SOCK_STREAM":                        reflect.ValueOf(i120.SOCK_STREAM),
		"SOL_SOCKET":                         reflect.ValueOf(i120.SOL_SOCKET),
		"SOMAXCONN":                          reflect.ValueOf(i120.SOMAXCONN),
		"SO_ACCEPTCONN":                      reflect.ValueOf(i120.SO_ACCEPTCONN),
		"SO_BROADCAST":                       reflect.ValueOf(i120.SO_BROADCAST),
		"SO_DEBUG":                           reflect.ValueOf(i120.SO_DEBUG),
		"SO_DONTROUTE":                       reflect.ValueOf(i120.SO_DONTROUTE),
		"SO_DONTTRUNC":                       reflect.ValueOf(i120.SO_DONTTRUNC),
		"SO_ERROR":                           reflect.ValueOf(i120.SO_ERROR),
		"SO_KEEPALIVE":                       reflect.ValueOf(i120.SO_KEEPALIVE),
		"SO_LABEL":                           reflect.ValueOf(i120.SO_LABEL),
		"SO_LINGER":                          reflect.ValueOf(i120.SO_LINGER),
		"SO_LINGER_SEC":                      reflect.ValueOf(i120.SO_LINGER_SEC),
		"SO_NKE":                             reflect.ValueOf(i120.SO_NKE),
		"SO_NOADDRERR":                       reflect.ValueOf(i120.SO_NOADDRERR),
		"SO_NOSIGPIPE":                       reflect.ValueOf(i120.SO_NOSIGPIPE),
		"SO_NOTIFYCONFLICT":                  reflect.ValueOf(i120.SO_NOTIFYCONFLICT),
		"SO_NP_EXTENSIONS":                   reflect.ValueOf(i120.SO_NP_EXTENSIONS),
		"SO_NREAD":                           reflect.ValueOf(i120.SO_NREAD),
		"SO_NUMRCVPKT":                       reflect.ValueOf(i120.SO_NUMRCVPKT),
		"SO_NWRITE":                          reflect.ValueOf(i120.SO_NWRITE),
		"SO_OOBINLINE":                       reflect.ValueOf(i120.SO_OOBINLINE),
		"SO_PEERLABEL":                       reflect.ValueOf(i120.SO_PEERLABEL),
		"SO_RANDOMPORT":                      reflect.ValueOf(i120.SO_RANDOMPORT),
		"SO_RCVBUF":                          reflect.ValueOf(i120.SO_RCVBUF),
		"SO_RCVLOWAT":                        reflect.ValueOf(i120.SO_RCVLOWAT),
		"SO_RCVTIMEO":                        reflect.ValueOf(i120.SO_RCVTIMEO),
		"SO_REUSEADDR":                       reflect.ValueOf(i120.SO_REUSEADDR),
		"SO_REUSEPORT":                       reflect.ValueOf(i120.SO_REUSEPORT),
		"SO_REUSESHAREUID":                   reflect.ValueOf(i120.SO_REUSESHAREUID),
		"SO_SNDBUF":                          reflect.ValueOf(i120.SO_SNDBUF),
		"SO_SNDLOWAT":                        reflect.ValueOf(i120.SO_SNDLOWAT),
		"SO_SNDTIMEO":                        reflect.ValueOf(i120.SO_SNDTIMEO),
		"SO_TIMESTAMP":                       reflect.ValueOf(i120.SO_TIMESTAMP),
		"SO_TIMESTAMP_MONOTONIC":             reflect.ValueOf(i120.SO_TIMESTAMP_MONOTONIC),
		"SO_TYPE":                            reflect.ValueOf(i120.SO_TYPE),
		"SO_UPCALLCLOSEWAIT":                 reflect.ValueOf(i120.SO_UPCALLCLOSEWAIT),
		"SO_USELOOPBACK":                     reflect.ValueOf(i120.SO_USELOOPBACK),
		"SO_WANTMORE":                        reflect.ValueOf(i120.SO_WANTMORE),
		"SO_WANTOOBFLAG":                     reflect.ValueOf(i120.SO_WANTOOBFLAG),
		"SYS_ACCEPT":                         reflect.ValueOf(i120.SYS_ACCEPT),
		"SYS_ACCEPT_NOCANCEL":                reflect.ValueOf(i120.SYS_ACCEPT_NOCANCEL),
		"SYS_ACCESS":                         reflect.ValueOf(i120.SYS_ACCESS),
		"SYS_ACCESS_EXTENDED":                reflect.ValueOf(i120.SYS_ACCESS_EXTENDED),
		"SYS_ACCT":                           reflect.ValueOf(i120.SYS_ACCT),
		"SYS_ADJTIME":                        reflect.ValueOf(i120.SYS_ADJTIME),
		"SYS_AIO_CANCEL":                     reflect.ValueOf(i120.SYS_AIO_CANCEL),
		"SYS_AIO_ERROR":                      reflect.ValueOf(i120.SYS_AIO_ERROR),
		"SYS_AIO_FSYNC":                      reflect.ValueOf(i120.SYS_AIO_FSYNC),
		"SYS_AIO_READ":                       reflect.ValueOf(i120.SYS_AIO_READ),
		"SYS_AIO_RETURN":                     reflect.ValueOf(i120.SYS_AIO_RETURN),
		"SYS_AIO_SUSPEND":                    reflect.ValueOf(i120.SYS_AIO_SUSPEND),
		"SYS_AIO_SUSPEND_NOCANCEL":           reflect.ValueOf(i120.SYS_AIO_SUSPEND_NOCANCEL),
		"SYS_AIO_WRITE":                      reflect.ValueOf(i120.SYS_AIO_WRITE),
		"SYS_ATGETMSG":                       reflect.ValueOf(i120.SYS_ATGETMSG),
		"SYS_ATPGETREQ":                      reflect.ValueOf(i120.SYS_ATPGETREQ),
		"SYS_ATPGETRSP":                      reflect.ValueOf(i120.SYS_ATPGETRSP),
		"SYS_ATPSNDREQ":                      reflect.ValueOf(i120.SYS_ATPSNDREQ),
		"SYS_ATPSNDRSP":                      reflect.ValueOf(i120.SYS_ATPSNDRSP),
		"SYS_ATPUTMSG":                       reflect.ValueOf(i120.SYS_ATPUTMSG),
		"SYS_ATSOCKET":                       reflect.ValueOf(i120.SYS_ATSOCKET),
		"SYS_AUDIT":                          reflect.ValueOf(i120.SYS_AUDIT),
		"SYS_AUDITCTL":                       reflect.ValueOf(i120.SYS_AUDITCTL),
		"SYS_AUDITON":                        reflect.ValueOf(i120.SYS_AUDITON),
		"SYS_AUDIT_SESSION_JOIN":             reflect.ValueOf(i120.SYS_AUDIT_SESSION_JOIN),
		"SYS_AUDIT_SESSION_PORT":             reflect.ValueOf(i120.SYS_AUDIT_SESSION_PORT),
		"SYS_AUDIT_SESSION_SELF":             reflect.ValueOf(i120.SYS_AUDIT_SESSION_SELF),
		"SYS_BIND":                           reflect.ValueOf(i120.SYS_BIND),
		"SYS_BSDTHREAD_CREATE":               reflect.ValueOf(i120.SYS_BSDTHREAD_CREATE),
		"SYS_BSDTHREAD_REGISTER":             reflect.ValueOf(i120.SYS_BSDTHREAD_REGISTER),
		"SYS_BSDTHREAD_TERMINATE":            reflect.ValueOf(i120.SYS_BSDTHREAD_TERMINATE),
		"SYS_CHDIR":                          reflect.ValueOf(i120.SYS_CHDIR),
		"SYS_CHFLAGS":                        reflect.ValueOf(i120.SYS_CHFLAGS),
		"SYS_CHMOD":                          reflect.ValueOf(i120.SYS_CHMOD),
		"SYS_CHMOD_EXTENDED":                 reflect.ValueOf(i120.SYS_CHMOD_EXTENDED),
		"SYS_CHOWN":                          reflect.ValueOf(i120.SYS_CHOWN),
		"SYS_CHROOT":                         reflect.ValueOf(i120.SYS_CHROOT),
		"SYS_CHUD":                           reflect.ValueOf(i120.SYS_CHUD),
		"SYS_CLOSE":                          reflect.ValueOf(i120.SYS_CLOSE),
		"SYS_CLOSE_NOCANCEL":                 reflect.ValueOf(i120.SYS_CLOSE_NOCANCEL),
		"SYS_CONNECT":                        reflect.ValueOf(i120.SYS_CONNECT),
		"SYS_CONNECT_NOCANCEL":               reflect.ValueOf(i120.SYS_CONNECT_NOCANCEL),
		"SYS_COPYFILE":                       reflect.ValueOf(i120.SYS_COPYFILE),
		"SYS_CSOPS":                          reflect.ValueOf(i120.SYS_CSOPS),
		"SYS_CSOPS_AUDITTOKEN":               reflect.ValueOf(i120.SYS_CSOPS_AUDITTOKEN),
		"SYS_DELETE":                         reflect.ValueOf(i120.SYS_DELETE),
		"SYS_DUP":                            reflect.ValueOf(i120.SYS_DUP),
		"SYS_DUP2":                           reflect.ValueOf(i120.SYS_DUP2),
		"SYS_EXCHANGEDATA":                   reflect.ValueOf(i120.SYS_EXCHANGEDATA),
		"SYS_EXECVE":                         reflect.ValueOf(i120.SYS_EXECVE),
		"SYS_EXIT":                           reflect.ValueOf(i120.SYS_EXIT),
		"SYS_FCHDIR":                         reflect.ValueOf(i120.SYS_FCHDIR),
		"SYS_FCHFLAGS":                       reflect.ValueOf(i120.SYS_FCHFLAGS),
		"SYS_FCHMOD":                         reflect.ValueOf(i120.SYS_FCHMOD),
		"SYS_FCHMOD_EXTENDED":                reflect.ValueOf(i120.SYS_FCHMOD_EXTENDED),
		"SYS_FCHOWN":                         reflect.ValueOf(i120.SYS_FCHOWN),
		"SYS_FCNTL":                          reflect.ValueOf(i120.SYS_FCNTL),
		"SYS_FCNTL_NOCANCEL":                 reflect.ValueOf(i120.SYS_FCNTL_NOCANCEL),
		"SYS_FDATASYNC":                      reflect.ValueOf(i120.SYS_FDATASYNC),
		"SYS_FFSCTL":                         reflect.ValueOf(i120.SYS_FFSCTL),
		"SYS_FGETATTRLIST":                   reflect.ValueOf(i120.SYS_FGETATTRLIST),
		"SYS_FGETXATTR":                      reflect.ValueOf(i120.SYS_FGETXATTR),
		"SYS_FHOPEN":                         reflect.ValueOf(i120.SYS_FHOPEN),
		"SYS_FILEPORT_MAKEFD":                reflect.ValueOf(i120.SYS_FILEPORT_MAKEFD),
		"SYS_FILEPORT_MAKEPORT":              reflect.ValueOf(i120.SYS_FILEPORT_MAKEPORT),
		"SYS_FLISTXATTR":                     reflect.ValueOf(i120.SYS_FLISTXATTR),
		"SYS_FLOCK":                          reflect.ValueOf(i120.SYS_FLOCK),
		"SYS_FORK":                           reflect.ValueOf(i120.SYS_FORK),
		"SYS_FPATHCONF":                      reflect.ValueOf(i120.SYS_FPATHCONF),
		"SYS_FREMOVEXATTR":                   reflect.ValueOf(i120.SYS_FREMOVEXATTR),
		"SYS_FSCTL":                          reflect.ValueOf(i120.SYS_FSCTL),
		"SYS_FSETATTRLIST":                   reflect.ValueOf(i120.SYS_FSETATTRLIST),
		"SYS_FSETXATTR":                      reflect.ValueOf(i120.SYS_FSETXATTR),
		"SYS_FSGETPATH":                      reflect.ValueOf(i120.SYS_FSGETPATH),
		"SYS_FSTAT":                          reflect.ValueOf(i120.SYS_FSTAT),
		"SYS_FSTAT64":                        reflect.ValueOf(i120.SYS_FSTAT64),
		"SYS_FSTAT64_EXTENDED":               reflect.ValueOf(i120.SYS_FSTAT64_EXTENDED),
		"SYS_FSTATFS":                        reflect.ValueOf(i120.SYS_FSTATFS),
		"SYS_FSTATFS64":                      reflect.ValueOf(i120.SYS_FSTATFS64),
		"SYS_FSTAT_EXTENDED":                 reflect.ValueOf(i120.SYS_FSTAT_EXTENDED),
		"SYS_FSYNC":                          reflect.ValueOf(i120.SYS_FSYNC),
		"SYS_FSYNC_NOCANCEL":                 reflect.ValueOf(i120.SYS_FSYNC_NOCANCEL),
		"SYS_FTRUNCATE":                      reflect.ValueOf(i120.SYS_FTRUNCATE),
		"SYS_FUTIMES":                        reflect.ValueOf(i120.SYS_FUTIMES),
		"SYS_GETATTRLIST":                    reflect.ValueOf(i120.SYS_GETATTRLIST),
		"SYS_GETAUDIT_ADDR":                  reflect.ValueOf(i120.SYS_GETAUDIT_ADDR),
		"SYS_GETAUID":                        reflect.ValueOf(i120.SYS_GETAUID),
		"SYS_GETDIRENTRIES":                  reflect.ValueOf(i120.SYS_GETDIRENTRIES),
		"SYS_GETDIRENTRIES64":                reflect.ValueOf(i120.SYS_GETDIRENTRIES64),
		"SYS_GETDIRENTRIESATTR":              reflect.ValueOf(i120.SYS_GETDIRENTRIESATTR),
		"SYS_GETDTABLESIZE":                  reflect.ValueOf(i120.SYS_GETDTABLESIZE),
		"SYS_GETEGID":                        reflect.ValueOf(i120.SYS_GETEGID),
		"SYS_GETEUID":                        reflect.ValueOf(i120.SYS_GETEUID),
		"SYS_GETFH":                          reflect.ValueOf(i120.SYS_GETFH),
		"SYS_GETFSSTAT":                      reflect.ValueOf(i120.SYS_GETFSSTAT),
		"SYS_GETFSSTAT64":                    reflect.ValueOf(i120.SYS_GETFSSTAT64),
		"SYS_GETGID":                         reflect.ValueOf(i120.SYS_GETGID),
		"SYS_GETGROUPS":                      reflect.ValueOf(i120.SYS_GETGROUPS),
		"SYS_GETHOSTUUID":                    reflect.ValueOf(i120.SYS_GETHOSTUUID),
		"SYS_GETITIMER":                      reflect.ValueOf(i120.SYS_GETITIMER),
		"SYS_GETLCID":                        reflect.ValueOf(i120.SYS_GETLCID),
		"SYS_GETLOGIN":                       reflect.ValueOf(i120.SYS_GETLOGIN),
		"SYS_GETPEERNAME":                    reflect.ValueOf(i120.SYS_GETPEERNAME),
		"SYS_GETPGID":                        reflect.ValueOf(i120.SYS_GETPGID),
		"SYS_GETPGRP":                        reflect.ValueOf(i120.SYS_GETPGRP),
		"SYS_GETPID":                         reflect.ValueOf(i120.SYS_GETPID),
		"SYS_GETPPID":                        reflect.ValueOf(i120.SYS_GETPPID),
		"SYS_GETPRIORITY":                    reflect.ValueOf(i120.SYS_GETPRIORITY),
		"SYS_GETRLIMIT":                      reflect.ValueOf(i120.SYS_GETRLIMIT),
		"SYS_GETRUSAGE":                      reflect.ValueOf(i120.SYS_GETRUSAGE),
		"SYS_GETSGROUPS":                     reflect.ValueOf(i120.SYS_GETSGROUPS),
		"SYS_GETSID":                         reflect.ValueOf(i120.SYS_GETSID),
		"SYS_GETSOCKNAME":                    reflect.ValueOf(i120.SYS_GETSOCKNAME),
		"SYS_GETSOCKOPT":                     reflect.ValueOf(i120.SYS_GETSOCKOPT),
		"SYS_GETTID":                         reflect.ValueOf(i120.SYS_GETTID),
		"SYS_GETTIMEOFDAY":                   reflect.ValueOf(i120.SYS_GETTIMEOFDAY),
		"SYS_GETUID":                         reflect.ValueOf(i120.SYS_GETUID),
		"SYS_GETWGROUPS":                     reflect.ValueOf(i120.SYS_GETWGROUPS),
		"SYS_GETXATTR":                       reflect.ValueOf(i120.SYS_GETXATTR),
		"SYS_IDENTITYSVC":                    reflect.ValueOf(i120.SYS_IDENTITYSVC),
		"SYS_INITGROUPS":                     reflect.ValueOf(i120.SYS_INITGROUPS),
		"SYS_IOCTL":                          reflect.ValueOf(i120.SYS_IOCTL),
		"SYS_IOPOLICYSYS":                    reflect.ValueOf(i120.SYS_IOPOLICYSYS),
		"SYS_ISSETUGID":                      reflect.ValueOf(i120.SYS_ISSETUGID),
		"SYS_KAS_INFO":                       reflect.ValueOf(i120.SYS_KAS_INFO),
		"SYS_KDEBUG_TRACE":                   reflect.ValueOf(i120.SYS_KDEBUG_TRACE),
		"SYS_KEVENT":                         reflect.ValueOf(i120.SYS_KEVENT),
		"SYS_KEVENT64":                       reflect.ValueOf(i120.SYS_KEVENT64),
		"SYS_KILL":                           reflect.ValueOf(i120.SYS_KILL),
		"SYS_KQUEUE":                         reflect.ValueOf(i120.SYS_KQUEUE),
		"SYS_LCHOWN":                         reflect.ValueOf(i120.SYS_LCHOWN),
		"SYS_LEDGER":                         reflect.ValueOf(i120.SYS_LEDGER),
		"SYS_LINK":                           reflect.ValueOf(i120.SYS_LINK),
		"SYS_LIO_LISTIO":                     reflect.ValueOf(i120.SYS_LIO_LISTIO),
		"SYS_LISTEN":                         reflect.ValueOf(i120.SYS_LISTEN),
		"SYS_LISTXATTR":                      reflect.ValueOf(i120.SYS_LISTXATTR),
		"SYS_LSEEK":                          reflect.ValueOf(i120.SYS_LSEEK),
		"SYS_LSTAT":                          reflect.ValueOf(i120.SYS_LSTAT),
		"SYS_LSTAT64":                        reflect.ValueOf(i120.SYS_LSTAT64),
		"SYS_LSTAT64_EXTENDED":               reflect.ValueOf(i120.SYS_LSTAT64_EXTENDED),
		"SYS_LSTAT_EXTENDED":                 reflect.ValueOf(i120.SYS_LSTAT_EXTENDED),
		"SYS_MADVISE":                        reflect.ValueOf(i120.SYS_MADVISE),
		"SYS_MAXSYSCALL":                     reflect.ValueOf(i120.SYS_MAXSYSCALL),
		"SYS_MINCORE":                        reflect.ValueOf(i120.SYS_MINCORE),
		"SYS_MINHERIT":                       reflect.ValueOf(i120.SYS_MINHERIT),
		"SYS_MKDIR":                          reflect.ValueOf(i120.SYS_MKDIR),
		"SYS_MKDIR_EXTENDED":                 reflect.ValueOf(i120.SYS_MKDIR_EXTENDED),
		"SYS_MKFIFO":                         reflect.ValueOf(i120.SYS_MKFIFO),
		"SYS_MKFIFO_EXTENDED":                reflect.ValueOf(i120.SYS_MKFIFO_EXTENDED),
		"SYS_MKNOD":                          reflect.ValueOf(i120.SYS_MKNOD),
		"SYS_MLOCK":                          reflect.ValueOf(i120.SYS_MLOCK),
		"SYS_MLOCKALL":                       reflect.ValueOf(i120.SYS_MLOCKALL),
		"SYS_MMAP":                           reflect.ValueOf(i120.SYS_MMAP),
		"SYS_MODWATCH":                       reflect.ValueOf(i120.SYS_MODWATCH),
		"SYS_MOUNT":                          reflect.ValueOf(i120.SYS_MOUNT),
		"SYS_MPROTECT":                       reflect.ValueOf(i120.SYS_MPROTECT),
		"SYS_MSGCTL":                         reflect.ValueOf(i120.SYS_MSGCTL),
		"SYS_MSGGET":                         reflect.ValueOf(i120.SYS_MSGGET),
		"SYS_MSGRCV":                         reflect.ValueOf(i120.SYS_MSGRCV),
		"SYS_MSGRCV_NOCANCEL":                reflect.ValueOf(i120.SYS_MSGRCV_NOCANCEL),
		"SYS_MSGSND":                         reflect.ValueOf(i120.SYS_MSGSND),
		"SYS_MSGSND_NOCANCEL":                reflect.ValueOf(i120.SYS_MSGSND_NOCANCEL),
		"SYS_MSGSYS":                         reflect.ValueOf(i120.SYS_MSGSYS),
		"SYS_MSYNC":                          reflect.ValueOf(i120.SYS_MSYNC),
		"SYS_MSYNC_NOCANCEL":                 reflect.ValueOf(i120.SYS_MSYNC_NOCANCEL),
		"SYS_MUNLOCK":                        reflect.ValueOf(i120.SYS_MUNLOCK),
		"SYS_MUNLOCKALL":                     reflect.ValueOf(i120.SYS_MUNLOCKALL),
		"SYS_MUNMAP":                         reflect.ValueOf(i120.SYS_MUNMAP),
		"SYS_NFSCLNT":                        reflect.ValueOf(i120.SYS_NFSCLNT),
		"SYS_NFSSVC":                         reflect.ValueOf(i120.SYS_NFSSVC),
		"SYS_OPEN":                           reflect.ValueOf(i120.SYS_OPEN),
		"SYS_OPEN_DPROTECTED_NP":             reflect.ValueOf(i120.SYS_OPEN_DPROTECTED_NP),
		"SYS_OPEN_EXTENDED":                  reflect.ValueOf(i120.SYS_OPEN_EXTENDED),
		"SYS_OPEN_NOCANCEL":                  reflect.ValueOf(i120.SYS_OPEN_NOCANCEL),
		"SYS_PATHCONF":                       reflect.ValueOf(i120.SYS_PATHCONF),
		"SYS_PID_HIBERNATE":                  reflect.ValueOf(i120.SYS_PID_HIBERNATE),
		"SYS_PID_RESUME":                     reflect.ValueOf(i120.SYS_PID_RESUME),
		"SYS_PID_SHUTDOWN_SOCKETS":           reflect.ValueOf(i120.SYS_PID_SHUTDOWN_SOCKETS),
		"SYS_PID_SUSPEND":                    reflect.ValueOf(i120.SYS_PID_SUSPEND),
		"SYS_PIPE":                           reflect.ValueOf(i120.SYS_PIPE),
		"SYS_POLL":                           reflect.ValueOf(i120.SYS_POLL),
		"SYS_POLL_NOCANCEL":                  reflect.ValueOf(i120.SYS_POLL_NOCANCEL),
		"SYS_POSIX_SPAWN":                    reflect.ValueOf(i120.SYS_POSIX_SPAWN),
		"SYS_PREAD":                          reflect.ValueOf(i120.SYS_PREAD),
		"SYS_PREAD_NOCANCEL":                 reflect.ValueOf(i120.SYS_PREAD_NOCANCEL),
		"SYS_PROCESS_POLICY":                 reflect.ValueOf(i120.SYS_PROCESS_POLICY),
		"SYS_PROC_INFO":                      reflect.ValueOf(i120.SYS_PROC_INFO),
		"SYS_PSYNCH_CVBROAD":                 reflect.ValueOf(i120.SYS_PSYNCH_CVBROAD),
		"SYS_PSYNCH_CVCLRPREPOST":            reflect.ValueOf(i120.SYS_PSYNCH_CVCLRPREPOST),
		"SYS_PSYNCH_CVSIGNAL":                reflect.ValueOf(i120.SYS_PSYNCH_CVSIGNAL),
		"SYS_PSYNCH_CVWAIT":                  reflect.ValueOf(i120.SYS_PSYNCH_CVWAIT),
		"SYS_PSYNCH_MUTEXDROP":               reflect.ValueOf(i120.SYS_PSYNCH_MUTEXDROP),
		"SYS_PSYNCH_MUTEXWAIT":               reflect.ValueOf(i120.SYS_PSYNCH_MUTEXWAIT),
		"SYS_PSYNCH_RW_DOWNGRADE":            reflect.ValueOf(i120.SYS_PSYNCH_RW_DOWNGRADE),
		"SYS_PSYNCH_RW_LONGRDLOCK":           reflect.ValueOf(i120.SYS_PSYNCH_RW_LONGRDLOCK),
		"SYS_PSYNCH_RW_RDLOCK":               reflect.ValueOf(i120.SYS_PSYNCH_RW_RDLOCK),
		"SYS_PSYNCH_RW_UNLOCK":               reflect.ValueOf(i120.SYS_PSYNCH_RW_UNLOCK),
		"SYS_PSYNCH_RW_UNLOCK2":              reflect.ValueOf(i120.SYS_PSYNCH_RW_UNLOCK2),
		"SYS_PSYNCH_RW_UPGRADE":              reflect.ValueOf(i120.SYS_PSYNCH_RW_UPGRADE),
		"SYS_PSYNCH_RW_WRLOCK":               reflect.ValueOf(i120.SYS_PSYNCH_RW_WRLOCK),
		"SYS_PSYNCH_RW_YIELDWRLOCK":          reflect.ValueOf(i120.SYS_PSYNCH_RW_YIELDWRLOCK),
		"SYS_PTRACE":                         reflect.ValueOf(i120.SYS_PTRACE),
		"SYS_PWRITE":                         reflect.ValueOf(i120.SYS_PWRITE),
		"SYS_PWRITE_NOCANCEL":                reflect.ValueOf(i120.SYS_PWRITE_NOCANCEL),
		"SYS_QUOTACTL":                       reflect.ValueOf(i120.SYS_QUOTACTL),
		"SYS_READ":                           reflect.ValueOf(i120.SYS_READ),
		"SYS_READLINK":                       reflect.ValueOf(i120.SYS_READLINK),
		"SYS_READV":                          reflect.ValueOf(i120.SYS_READV),
		"SYS_READV_NOCANCEL":                 reflect.ValueOf(i120.SYS_READV_NOCANCEL),
		"SYS_READ_NOCANCEL":                  reflect.ValueOf(i120.SYS_READ_NOCANCEL),
		"SYS_REBOOT":                         reflect.ValueOf(i120.SYS_REBOOT),
		"SYS_RECVFROM":                       reflect.ValueOf(i120.SYS_RECVFROM),
		"SYS_RECVFROM_NOCANCEL":              reflect.ValueOf(i120.SYS_RECVFROM_NOCANCEL),
		"SYS_RECVMSG":                        reflect.ValueOf(i120.SYS_RECVMSG),
		"SYS_RECVMSG_NOCANCEL":               reflect.ValueOf(i120.SYS_RECVMSG_NOCANCEL),
		"SYS_REMOVEXATTR":                    reflect.ValueOf(i120.SYS_REMOVEXATTR),
		"SYS_RENAME":                         reflect.ValueOf(i120.SYS_RENAME),
		"SYS_REVOKE":                         reflect.ValueOf(i120.SYS_REVOKE),
		"SYS_RMDIR":                          reflect.ValueOf(i120.SYS_RMDIR),
		"SYS_SEARCHFS":                       reflect.ValueOf(i120.SYS_SEARCHFS),
		"SYS_SELECT":                         reflect.ValueOf(i120.SYS_SELECT),
		"SYS_SELECT_NOCANCEL":                reflect.ValueOf(i120.SYS_SELECT_NOCANCEL),
		"SYS_SEMCTL":                         reflect.ValueOf(i120.SYS_SEMCTL),
		"SYS_SEMGET":                         reflect.ValueOf(i120.SYS_SEMGET),
		"SYS_SEMOP":                          reflect.ValueOf(i120.SYS_SEMOP),
		"SYS_SEMSYS":                         reflect.ValueOf(i120.SYS_SEMSYS),
		"SYS_SEM_CLOSE":                      reflect.ValueOf(i120.SYS_SEM_CLOSE),
		"SYS_SEM_DESTROY":                    reflect.ValueOf(i120.SYS_SEM_DESTROY),
		"SYS_SEM_GETVALUE":                   reflect.ValueOf(i120.SYS_SEM_GETVALUE),
		"SYS_SEM_INIT":                       reflect.ValueOf(i120.SYS_SEM_INIT),
		"SYS_SEM_OPEN":                       reflect.ValueOf(i120.SYS_SEM_OPEN),
		"SYS_SEM_POST":                       reflect.ValueOf(i120.SYS_SEM_POST),
		"SYS_SEM_TRYWAIT":                    reflect.ValueOf(i120.SYS_SEM_TRYWAIT),
		"SYS_SEM_UNLINK":                     reflect.ValueOf(i120.SYS_SEM_UNLINK),
		"SYS_SEM_WAIT":                       reflect.ValueOf(i120.SYS_SEM_WAIT),
		"SYS_SEM_WAIT_NOCANCEL":              reflect.ValueOf(i120.SYS_SEM_WAIT_NOCANCEL),
		"SYS_SENDFILE":                       reflect.ValueOf(i120.SYS_SENDFILE),
		"SYS_SENDMSG":                        reflect.ValueOf(i120.SYS_SENDMSG),
		"SYS_SENDMSG_NOCANCEL":               reflect.ValueOf(i120.SYS_SENDMSG_NOCANCEL),
		"SYS_SENDTO":                         reflect.ValueOf(i120.SYS_SENDTO),
		"SYS_SENDTO_NOCANCEL":                reflect.ValueOf(i120.SYS_SENDTO_NOCANCEL),
		"SYS_SETATTRLIST":                    reflect.ValueOf(i120.SYS_SETATTRLIST),
		"SYS_SETAUDIT_ADDR":                  reflect.ValueOf(i120.SYS_SETAUDIT_ADDR),
		"SYS_SETAUID":                        reflect.ValueOf(i120.SYS_SETAUID),
		"SYS_SETEGID":                        reflect.ValueOf(i120.SYS_SETEGID),
		"SYS_SETEUID":                        reflect.ValueOf(i120.SYS_SETEUID),
		"SYS_SETGID":                         reflect.ValueOf(i120.SYS_SETGID),
		"SYS_SETGROUPS":                      reflect.ValueOf(i120.SYS_SETGROUPS),
		"SYS_SETITIMER":                      reflect.ValueOf(i120.SYS_SETITIMER),
		"SYS_SETLCID":                        reflect.ValueOf(i120.SYS_SETLCID),
		"SYS_SETLOGIN":                       reflect.ValueOf(i120.SYS_SETLOGIN),
		"SYS_SETPGID":                        reflect.ValueOf(i120.SYS_SETPGID),
		"SYS_SETPRIORITY":                    reflect.ValueOf(i120.SYS_SETPRIORITY),
		"SYS_SETPRIVEXEC":                    reflect.ValueOf(i120.SYS_SETPRIVEXEC),
		"SYS_SETREGID":                       reflect.ValueOf(i120.SYS_SETREGID),
		"SYS_SETREUID":                       reflect.ValueOf(i120.SYS_SETREUID),
		"SYS_SETRLIMIT":                      reflect.ValueOf(i120.SYS_SETRLIMIT),
		"SYS_SETSGROUPS":                     reflect.ValueOf(i120.SYS_SETSGROUPS),
		"SYS_SETSID":                         reflect.ValueOf(i120.SYS_SETSID),
		"SYS_SETSOCKOPT":                     reflect.ValueOf(i120.SYS_SETSOCKOPT),
		"SYS_SETTID":                         reflect.ValueOf(i120.SYS_SETTID),
		"SYS_SETTID_WITH_PID":                reflect.ValueOf(i120.SYS_SETTID_WITH_PID),
		"SYS_SETTIMEOFDAY":                   reflect.ValueOf(i120.SYS_SETTIMEOFDAY),
		"SYS_SETUID":                         reflect.ValueOf(i120.SYS_SETUID),
		"SYS_SETWGROUPS":                     reflect.ValueOf(i120.SYS_SETWGROUPS),
		"SYS_SETXATTR":                       reflect.ValueOf(i120.SYS_SETXATTR),
		"SYS_SHARED_REGION_CHECK_NP":         reflect.ValueOf(i120.SYS_SHARED_REGION_CHECK_NP),
		"SYS_SHARED_REGION_MAP_AND_SLIDE_NP": reflect.ValueOf(i120.SYS_SHARED_REGION_MAP_AND_SLIDE_NP),
		"SYS_SHMAT":                          reflect.ValueOf(i120.SYS_SHMAT),
		"SYS_SHMCTL":                         reflect.ValueOf(i120.SYS_SHMCTL),
		"SYS_SHMDT":                          reflect.ValueOf(i120.SYS_SHMDT),
		"SYS_SHMGET":                         reflect.ValueOf(i120.SYS_SHMGET),
		"SYS_SHMSYS":                         reflect.ValueOf(i120.SYS_SHMSYS),
		"SYS_SHM_OPEN":                       reflect.ValueOf(i120.SYS_SHM_OPEN),
		"SYS_SHM_UNLINK":                     reflect.ValueOf(i120.SYS_SHM_UNLINK),
		"SYS_SHUTDOWN":                       reflect.ValueOf(i120.SYS_SHUTDOWN),
		"SYS_SIGACTION":                      reflect.ValueOf(i120.SYS_SIGACTION),
		"SYS_SIGALTSTACK":                    reflect.ValueOf(i120.SYS_SIGALTSTACK),
		"SYS_SIGPENDING":                     reflect.ValueOf(i120.SYS_SIGPENDING),
		"SYS_SIGPROCMASK":                    reflect.ValueOf(i120.SYS_SIGPROCMASK),
		"SYS_SIGRETURN":                      reflect.ValueOf(i120.SYS_SIGRETURN),
		"SYS_SIGSUSPEND":                     reflect.ValueOf(i120.SYS_SIGSUSPEND),
		"SYS_SIGSUSPEND_NOCANCEL":            reflect.ValueOf(i120.SYS_SIGSUSPEND_NOCANCEL),
		"SYS_SOCKET":                         reflect.ValueOf(i120.SYS_SOCKET),
		"SYS_SOCKETPAIR":                     reflect.ValueOf(i120.SYS_SOCKETPAIR),
		"SYS_STACK_SNAPSHOT":                 reflect.ValueOf(i120.SYS_STACK_SNAPSHOT),
		"SYS_STAT":                           reflect.ValueOf(i120.SYS_STAT),
		"SYS_STAT64":                         reflect.ValueOf(i120.SYS_STAT64),
		"SYS_STAT64_EXTENDED":                reflect.ValueOf(i120.SYS_STAT64_EXTENDED),
		"SYS_STATFS":                         reflect.ValueOf(i120.SYS_STATFS),
		"SYS_STATFS64":                       reflect.ValueOf(i120.SYS_STATFS64),
		"SYS_STAT_EXTENDED":                  reflect.ValueOf(i120.SYS_STAT_EXTENDED),
		"SYS_SWAPON":                         reflect.ValueOf(i120.SYS_SWAPON),
		"SYS_SYMLINK":                        reflect.ValueOf(i120.SYS_SYMLINK),
		"SYS_SYNC":                           reflect.ValueOf(i120.SYS_SYNC),
		"SYS_SYSCALL":                        reflect.ValueOf(i120.SYS_SYSCALL),
		"SYS_THREAD_SELFID":                  reflect.ValueOf(i120.SYS_THREAD_SELFID),
		"SYS_TRUNCATE":                       reflect.ValueOf(i120.SYS_TRUNCATE),
		"SYS_UMASK":                          reflect.ValueOf(i120.SYS_UMASK),
		"SYS_UMASK_EXTENDED":                 reflect.ValueOf(i120.SYS_UMASK_EXTENDED),
		"SYS_UNDELETE":                       reflect.ValueOf(i120.SYS_UNDELETE),
		"SYS_UNLINK":                         reflect.ValueOf(i120.SYS_UNLINK),
		"SYS_UNMOUNT":                        reflect.ValueOf(i120.SYS_UNMOUNT),
		"SYS_UTIMES":                         reflect.ValueOf(i120.SYS_UTIMES),
		"SYS_VFORK":                          reflect.ValueOf(i120.SYS_VFORK),
		"SYS_VM_PRESSURE_MONITOR":            reflect.ValueOf(i120.SYS_VM_PRESSURE_MONITOR),
		"SYS_WAIT4":                          reflect.ValueOf(i120.SYS_WAIT4),
		"SYS_WAIT4_NOCANCEL":                 reflect.ValueOf(i120.SYS_WAIT4_NOCANCEL),
		"SYS_WAITEVENT":                      reflect.ValueOf(i120.SYS_WAITEVENT),
		"SYS_WAITID":                         reflect.ValueOf(i120.SYS_WAITID),
		"SYS_WAITID_NOCANCEL":                reflect.ValueOf(i120.SYS_WAITID_NOCANCEL),
		"SYS_WATCHEVENT":                     reflect.ValueOf(i120.SYS_WATCHEVENT),
		"SYS_WORKQ_KERNRETURN":               reflect.ValueOf(i120.SYS_WORKQ_KERNRETURN),
		"SYS_WORKQ_OPEN":                     reflect.ValueOf(i120.SYS_WORKQ_OPEN),
		"SYS_WRITE":                          reflect.ValueOf(i120.SYS_WRITE),
		"SYS_WRITEV":                         reflect.ValueOf(i120.SYS_WRITEV),
		"SYS_WRITEV_NOCANCEL":                reflect.ValueOf(i120.SYS_WRITEV_NOCANCEL),
		"SYS_WRITE_NOCANCEL":                 reflect.ValueOf(i120.SYS_WRITE_NOCANCEL),
		"SYS___DISABLE_THREADSIGNAL":         reflect.ValueOf(i120.SYS___DISABLE_THREADSIGNAL),
		"SYS___MAC_EXECVE":                   reflect.ValueOf(i120.SYS___MAC_EXECVE),
		"SYS___MAC_GETFSSTAT":                reflect.ValueOf(i120.SYS___MAC_GETFSSTAT),
		"SYS___MAC_GET_FD":                   reflect.ValueOf(i120.SYS___MAC_GET_FD),
		"SYS___MAC_GET_FILE":                 reflect.ValueOf(i120.SYS___MAC_GET_FILE),
		"SYS___MAC_GET_LCID":                 reflect.ValueOf(i120.SYS___MAC_GET_LCID),
		"SYS___MAC_GET_LCTX":                 reflect.ValueOf(i120.SYS___MAC_GET_LCTX),
		"SYS___MAC_GET_LINK":                 reflect.ValueOf(i120.SYS___MAC_GET_LINK),
		"SYS___MAC_GET_MOUNT":                reflect.ValueOf(i120.SYS___MAC_GET_MOUNT),
		"SYS___MAC_GET_PID":                  reflect.ValueOf(i120.SYS___MAC_GET_PID),
		"SYS___MAC_GET_PROC":                 reflect.ValueOf(i120.SYS___MAC_GET_PROC),
		"SYS___MAC_MOUNT":                    reflect.ValueOf(i120.SYS___MAC_MOUNT),
		"SYS___MAC_SET_FD":                   reflect.ValueOf(i120.SYS___MAC_SET_FD),
		"SYS___MAC_SET_FILE":                 reflect.ValueOf(i120.SYS___MAC_SET_FILE),
		"SYS___MAC_SET_LCTX":                 reflect.ValueOf(i120.SYS___MAC_SET_LCTX),
		"SYS___MAC_SET_LINK":                 reflect.ValueOf(i120.SYS___MAC_SET_LINK),
		"SYS___MAC_SET_PROC":                 reflect.ValueOf(i120.SYS___MAC_SET_PROC),
		"SYS___MAC_SYSCALL":                  reflect.ValueOf(i120.SYS___MAC_SYSCALL),
		"SYS___OLD_SEMWAIT_SIGNAL":           reflect.ValueOf(i120.SYS___OLD_SEMWAIT_SIGNAL),
		"SYS___OLD_SEMWAIT_SIGNAL_NOCANCEL":  reflect.ValueOf(i120.SYS___OLD_SEMWAIT_SIGNAL_NOCANCEL),
		"SYS___PTHREAD_CANCELED":             reflect.ValueOf(i120.SYS___PTHREAD_CANCELED),
		"SYS___PTHREAD_CHDIR":                reflect.ValueOf(i120.SYS___PTHREAD_CHDIR),
		"SYS___PTHREAD_FCHDIR":               reflect.ValueOf(i120.SYS___PTHREAD_FCHDIR),
		"SYS___PTHREAD_KILL":                 reflect.ValueOf(i120.SYS___PTHREAD_KILL),
		"SYS___PTHREAD_MARKCANCEL":           reflect.ValueOf(i120.SYS___PTHREAD_MARKCANCEL),
		"SYS___PTHREAD_SIGMASK":              reflect.ValueOf(i120.SYS___PTHREAD_SIGMASK),
		"SYS___SEMWAIT_SIGNAL":               reflect.ValueOf(i120.SYS___SEMWAIT_SIGNAL),
		"SYS___SEMWAIT_SIGNAL_NOCANCEL":      reflect.ValueOf(i120.SYS___SEMWAIT_SIGNAL_NOCANCEL),
		"SYS___SIGWAIT":                      reflect.ValueOf(i120.SYS___SIGWAIT),
		"SYS___SIGWAIT_NOCANCEL":             reflect.ValueOf(i120.SYS___SIGWAIT_NOCANCEL),
		"SYS___SYSCTL":                       reflect.ValueOf(i120.SYS___SYSCTL),
		"S_IEXEC":                            reflect.ValueOf(i120.S_IEXEC),
		"S_IFBLK":                            reflect.ValueOf(i120.S_IFBLK),
		"S_IFCHR":                            reflect.ValueOf(i120.S_IFCHR),
		"S_IFDIR":                            reflect.ValueOf(i120.S_IFDIR),
		"S_IFIFO":                            reflect.ValueOf(i120.S_IFIFO),
		"S_IFLNK":                            reflect.ValueOf(i120.S_IFLNK),
		"S_IFMT":                             reflect.ValueOf(i120.S_IFMT),
		"S_IFREG":                            reflect.ValueOf(i120.S_IFREG),
		"S_IFSOCK":                           reflect.ValueOf(i120.S_IFSOCK),
		"S_IFWHT":                            reflect.ValueOf(i120.S_IFWHT),
		"S_IREAD":                            reflect.ValueOf(i120.S_IREAD),
		"S_IRGRP":                            reflect.ValueOf(i120.S_IRGRP),
		"S_IROTH":                            reflect.ValueOf(i120.S_IROTH),
		"S_IRUSR":                            reflect.ValueOf(i120.S_IRUSR),
		"S_IRWXG":                            reflect.ValueOf(i120.S_IRWXG),
		"S_IRWXO":                            reflect.ValueOf(i120.S_IRWXO),
		"S_IRWXU":                            reflect.ValueOf(i120.S_IRWXU),
		"S_ISGID":                            reflect.ValueOf(i120.S_ISGID),
		"S_ISTXT":                            reflect.ValueOf(i120.S_ISTXT),
		"S_ISUID":                            reflect.ValueOf(i120.S_ISUID),
		"S_ISVTX":                            reflect.ValueOf(i120.S_ISVTX),
		"S_IWGRP":                            reflect.ValueOf(i120.S_IWGRP),
		"S_IWOTH":                            reflect.ValueOf(i120.S_IWOTH),
		"S_IWRITE":                           reflect.ValueOf(i120.S_IWRITE),
		"S_IWUSR":                            reflect.ValueOf(i120.S_IWUSR),
		"S_IXGRP":                            reflect.ValueOf(i120.S_IXGRP),
		"S_IXOTH":                            reflect.ValueOf(i120.S_IXOTH),
		"S_IXUSR":                            reflect.ValueOf(i120.S_IXUSR),
		"Seek":                               reflect.ValueOf(i120.Seek),
		"Select":                             reflect.ValueOf(i120.Select),
		"Sendfile":                           reflect.ValueOf(i120.Sendfile),
		"Sendmsg":                            reflect.ValueOf(i120.Sendmsg),
		"SendmsgN":                           reflect.ValueOf(i120.SendmsgN),
		"Sendto":                             reflect.ValueOf(i120.Sendto),
		"SetBpf":                             reflect.ValueOf(i120.SetBpf),
		"SetBpfBuflen":                       reflect.ValueOf(i120.SetBpfBuflen),
		"SetBpfDatalink":                     reflect.ValueOf(i120.SetBpfDatalink),
		"SetBpfHeadercmpl":                   reflect.ValueOf(i120.SetBpfHeadercmpl),
		"SetBpfImmediate":                    reflect.ValueOf(i120.SetBpfImmediate),
		"SetBpfInterface":                    reflect.ValueOf(i120.SetBpfInterface),
		"SetBpfPromisc":                      reflect.ValueOf(i120.SetBpfPromisc),
		"SetBpfTimeout":                      reflect.ValueOf(i120.SetBpfTimeout),
		"SetKevent":                          reflect.ValueOf(i120.SetKevent),
		"SetNonblock":                        reflect.ValueOf(i120.SetNonblock),
		"Setegid":                            reflect.ValueOf(i120.Setegid),
		"Setenv":                             reflect.ValueOf(i120.Setenv),
		"Seteuid":                            reflect.ValueOf(i120.Seteuid),
		"Setgid":                             reflect.ValueOf(i120.Setgid),
		"Setgroups":                          reflect.ValueOf(i120.Setgroups),
		"Setlogin":                           reflect.ValueOf(i120.Setlogin),
		"Setpgid":                            reflect.ValueOf(i120.Setpgid),
		"Setpriority":                        reflect.ValueOf(i120.Setpriority),
		"Setprivexec":                        reflect.ValueOf(i120.Setprivexec),
		"Setregid":                           reflect.ValueOf(i120.Setregid),
		"Setreuid":                           reflect.ValueOf(i120.Setreuid),
		"Setrlimit":                          reflect.ValueOf(i120.Setrlimit),
		"Setsid":                             reflect.ValueOf(i120.Setsid),
		"SetsockoptByte":                     reflect.ValueOf(i120.SetsockoptByte),
		"SetsockoptICMPv6Filter":             reflect.ValueOf(i120.SetsockoptICMPv6Filter),
		"SetsockoptIPMreq":                   reflect.ValueOf(i120.SetsockoptIPMreq),
		"SetsockoptIPv6Mreq":                 reflect.ValueOf(i120.SetsockoptIPv6Mreq),
		"SetsockoptInet4Addr":                reflect.ValueOf(i120.SetsockoptInet4Addr),
		"SetsockoptInt":                      reflect.ValueOf(i120.SetsockoptInt),
		"SetsockoptLinger":                   reflect.ValueOf(i120.SetsockoptLinger),
		"SetsockoptString":                   reflect.ValueOf(i120.SetsockoptString),
		"SetsockoptTimeval":                  reflect.ValueOf(i120.SetsockoptTimeval),
		"Settimeofday":                       reflect.ValueOf(i120.Settimeofday),
		"Setuid":                             reflect.ValueOf(i120.Setuid),
		"Shutdown":                           reflect.ValueOf(i120.Shutdown),
		"SizeofBpfHdr":                       reflect.ValueOf(i120.SizeofBpfHdr),
		"SizeofBpfInsn":                      reflect.ValueOf(i120.SizeofBpfInsn),
		"SizeofBpfProgram":                   reflect.ValueOf(i120.SizeofBpfProgram),
		"SizeofBpfStat":                      reflect.ValueOf(i120.SizeofBpfStat),
		"SizeofBpfVersion":                   reflect.ValueOf(i120.SizeofBpfVersion),
		"SizeofCmsghdr":                      reflect.ValueOf(i120.SizeofCmsghdr),
		"SizeofICMPv6Filter":                 reflect.ValueOf(i120.SizeofICMPv6Filter),
		"SizeofIPMreq":                       reflect.ValueOf(i120.SizeofIPMreq),
		"SizeofIPv6MTUInfo":                  reflect.ValueOf(i120.SizeofIPv6MTUInfo),
		"SizeofIPv6Mreq":                     reflect.ValueOf(i120.SizeofIPv6Mreq),
		"SizeofIfData":                       reflect.ValueOf(i120.SizeofIfData),
		"SizeofIfMsghdr":                     reflect.ValueOf(i120.SizeofIfMsghdr),
		"SizeofIfaMsghdr":                    reflect.ValueOf(i120.SizeofIfaMsghdr),
		"SizeofIfmaMsghdr":                   reflect.ValueOf(i120.SizeofIfmaMsghdr),
		"SizeofIfmaMsghdr2":                  reflect.ValueOf(i120.SizeofIfmaMsghdr2),
		"SizeofInet4Pktinfo":                 reflect.ValueOf(i120.SizeofInet4Pktinfo),
		"SizeofInet6Pktinfo":                 reflect.ValueOf(i120.SizeofInet6Pktinfo),
		"SizeofLinger":                       reflect.ValueOf(i120.SizeofLinger),
		"SizeofMsghdr":                       reflect.ValueOf(i120.SizeofMsghdr),
		"SizeofRtMetrics":                    reflect.ValueOf(i120.SizeofRtMetrics),
		"SizeofRtMsghdr":                     reflect.ValueOf(i120.SizeofRtMsghdr),
		"SizeofSockaddrAny":                  reflect.ValueOf(i120.SizeofSockaddrAny),
		"SizeofSockaddrDatalink":             reflect.ValueOf(i120.SizeofSockaddrDatalink),
		"SizeofSockaddrInet4":                reflect.ValueOf(i120.SizeofSockaddrInet4),
		"SizeofSockaddrInet6":                reflect.ValueOf(i120.SizeofSockaddrInet6),
		"SizeofSockaddrUnix":                 reflect.ValueOf(i120.SizeofSockaddrUnix),
		"SlicePtrFromStrings":                reflect.ValueOf(i120.SlicePtrFromStrings),
		"Socket":                             reflect.ValueOf(i120.Socket),
		"SocketDisableIPv6":                  reflect.ValueOf(i120.SocketDisableIPv6),
		"Socketpair":                         reflect.ValueOf(i120.Socketpair),
		"StartProcess":                       reflect.ValueOf(i120.StartProcess),
		"Stat":                               reflect.ValueOf(i120.Stat),
		"Statfs":                             reflect.ValueOf(i120.Statfs),
		"Stderr":                             reflect.ValueOf(i120.Stderr),
		"Stdin":                              reflect.ValueOf(i120.Stdin),
		"Stdout":                             reflect.ValueOf(i120.Stdout),
		"StringBytePtr":                      reflect.ValueOf(i120.StringBytePtr),
		"StringByteSlice":                    reflect.ValueOf(i120.StringByteSlice),
		"StringSlicePtr":                     reflect.ValueOf(i120.StringSlicePtr),
		"Symlink":                            reflect.ValueOf(i120.Symlink),
		"Sync":                               reflect.ValueOf(i120.Sync),
		"Syscall":                            reflect.ValueOf(i120.Syscall),
		"Syscall6":                           reflect.ValueOf(i120.Syscall6),
		"Syscall9":                           reflect.ValueOf(i120.Syscall9),
		"Sysctl":                             reflect.ValueOf(i120.Sysctl),
		"SysctlUint32":                       reflect.ValueOf(i120.SysctlUint32),
		"TCIFLUSH":                           reflect.ValueOf(i120.TCIFLUSH),
		"TCIOFLUSH":                          reflect.ValueOf(i120.TCIOFLUSH),
		"TCOFLUSH":                           reflect.ValueOf(i120.TCOFLUSH),
		"TCP_CONNECTIONTIMEOUT":              reflect.ValueOf(i120.TCP_CONNECTIONTIMEOUT),
		"TCP_ENABLE_ECN":                     reflect.ValueOf(i120.TCP_ENABLE_ECN),
		"TCP_KEEPALIVE":                      reflect.ValueOf(i120.TCP_KEEPALIVE),
		"TCP_KEEPCNT":                        reflect.ValueOf(i120.TCP_KEEPCNT),
		"TCP_KEEPINTVL":                      reflect.ValueOf(i120.TCP_KEEPINTVL),
		"TCP_MAXHLEN":                        reflect.ValueOf(i120.TCP_MAXHLEN),
		"TCP_MAXOLEN":                        reflect.ValueOf(i120.TCP_MAXOLEN),
		"TCP_MAXSEG":                         reflect.ValueOf(i120.TCP_MAXSEG),
		"TCP_MAXWIN":                         reflect.ValueOf(i120.TCP_MAXWIN),
		"TCP_MAX_SACK":                       reflect.ValueOf(i120.TCP_MAX_SACK),
		"TCP_MAX_WINSHIFT":                   reflect.ValueOf(i120.TCP_MAX_WINSHIFT),
		"TCP_MINMSS":                         reflect.ValueOf(i120.TCP_MINMSS),
		"TCP_MSS":                            reflect.ValueOf(i120.TCP_MSS),
		"TCP_NODELAY":                        reflect.ValueOf(i120.TCP_NODELAY),
		"TCP_NOOPT":                          reflect.ValueOf(i120.TCP_NOOPT),
		"TCP_NOPUSH":                         reflect.ValueOf(i120.TCP_NOPUSH),
		"TCP_NOTSENT_LOWAT":                  reflect.ValueOf(i120.TCP_NOTSENT_LOWAT),
		"TCP_RXT_CONNDROPTIME":               reflect.ValueOf(i120.TCP_RXT_CONNDROPTIME),
		"TCP_RXT_FINDROP":                    reflect.ValueOf(i120.TCP_RXT_FINDROP),
		"TCP_SENDMOREACKS":                   reflect.ValueOf(i120.TCP_SENDMOREACKS),
		"TCSAFLUSH":                          reflect.ValueOf(i120.TCSAFLUSH),
		"TIOCCBRK":                           reflect.ValueOf(i120.TIOCCBRK),
		"TIOCCDTR":                           reflect.ValueOf(i120.TIOCCDTR),
		"TIOCCONS":                           reflect.ValueOf(i120.TIOCCONS),
		"TIOCDCDTIMESTAMP":                   reflect.ValueOf(i120.TIOCDCDTIMESTAMP),
		"TIOCDRAIN":                          reflect.ValueOf(i120.TIOCDRAIN),
		"TIOCDSIMICROCODE":                   reflect.ValueOf(i120.TIOCDSIMICROCODE),
		"TIOCEXCL":                           reflect.ValueOf(i120.TIOCEXCL),
		"TIOCEXT":                            reflect.ValueOf(i120.TIOCEXT),
		"TIOCFLUSH":                          reflect.ValueOf(i120.TIOCFLUSH),
		"TIOCGDRAINWAIT":                     reflect.ValueOf(i120.TIOCGDRAINWAIT),
		"TIOCGETA":                           reflect.ValueOf(i120.TIOCGETA),
		"TIOCGETD":                           reflect.ValueOf(i120.TIOCGETD),
		"TIOCGPGRP":                          reflect.ValueOf(i120.TIOCGPGRP),
		"TIOCGWINSZ":                         reflect.ValueOf(i120.TIOCGWINSZ),
		"TIOCIXOFF":                          reflect.ValueOf(i120.TIOCIXOFF),
		"TIOCIXON":                           reflect.ValueOf(i120.TIOCIXON),
		"TIOCMBIC":                           reflect.ValueOf(i120.TIOCMBIC),
		"TIOCMBIS":                           reflect.ValueOf(i120.TIOCMBIS),
		"TIOCMGDTRWAIT":                      reflect.ValueOf(i120.TIOCMGDTRWAIT),
		"TIOCMGET":                           reflect.ValueOf(i120.TIOCMGET),
		"TIOCMODG":                           reflect.ValueOf(i120.TIOCMODG),
		"TIOCMODS":                           reflect.ValueOf(i120.TIOCMODS),
		"TIOCMSDTRWAIT":                      reflect.ValueOf(i120.TIOCMSDTRWAIT),
		"TIOCMSET":                           reflect.ValueOf(i120.TIOCMSET),
		"TIOCM_CAR":                          reflect.ValueOf(i120.TIOCM_CAR),
		"TIOCM_CD":                           reflect.ValueOf(i120.TIOCM_CD),
		"TIOCM_CTS":                          reflect.ValueOf(i120.TIOCM_CTS),
		"TIOCM_DSR":                          reflect.ValueOf(i120.TIOCM_DSR),
		"TIOCM_DTR":                          reflect.ValueOf(i120.TIOCM_DTR),
		"TIOCM_LE":                           reflect.ValueOf(i120.TIOCM_LE),
		"TIOCM_RI":                           reflect.ValueOf(i120.TIOCM_RI),
		"TIOCM_RNG":                          reflect.ValueOf(i120.TIOCM_RNG),
		"TIOCM_RTS":                          reflect.ValueOf(i120.TIOCM_RTS),
		"TIOCM_SR":                           reflect.ValueOf(i120.TIOCM_SR),
		"TIOCM_ST":                           reflect.ValueOf(i120.TIOCM_ST),
		"TIOCNOTTY":                          reflect.ValueOf(i120.TIOCNOTTY),
		"TIOCNXCL":                           reflect.ValueOf(i120.TIOCNXCL),
		"TIOCOUTQ":                           reflect.ValueOf(i120.TIOCOUTQ),
		"TIOCPKT":                            reflect.ValueOf(i120.TIOCPKT),
		"TIOCPKT_DATA":                       reflect.ValueOf(i120.TIOCPKT_DATA),
		"TIOCPKT_DOSTOP":                     reflect.ValueOf(i120.TIOCPKT_DOSTOP),
		"TIOCPKT_FLUSHREAD":                  reflect.ValueOf(i120.TIOCPKT_FLUSHREAD),
		"TIOCPKT_FLUSHWRITE":                 reflect.ValueOf(i120.TIOCPKT_FLUSHWRITE),
		"TIOCPKT_IOCTL":                      reflect.ValueOf(i120.TIOCPKT_IOCTL),
		"TIOCPKT_NOSTOP":                     reflect.ValueOf(i120.TIOCPKT_NOSTOP),
		"TIOCPKT_START":                      reflect.ValueOf(i120.TIOCPKT_START),
		"TIOCPKT_STOP":                       reflect.ValueOf(i120.TIOCPKT_STOP),
		"TIOCPTYGNAME":                       reflect.ValueOf(i120.TIOCPTYGNAME),
		"TIOCPTYGRANT":                       reflect.ValueOf(i120.TIOCPTYGRANT),
		"TIOCPTYUNLK":                        reflect.ValueOf(i120.TIOCPTYUNLK),
		"TIOCREMOTE":                         reflect.ValueOf(i120.TIOCREMOTE),
		"TIOCSBRK":                           reflect.ValueOf(i120.TIOCSBRK),
		"TIOCSCONS":                          reflect.ValueOf(i120.TIOCSCONS),
		"TIOCSCTTY":                          reflect.ValueOf(i120.TIOCSCTTY),
		"TIOCSDRAINWAIT":                     reflect.ValueOf(i120.TIOCSDRAINWAIT),
		"TIOCSDTR":                           reflect.ValueOf(i120.TIOCSDTR),
		"TIOCSETA":                           reflect.ValueOf(i120.TIOCSETA),
		"TIOCSETAF":                          reflect.ValueOf(i120.TIOCSETAF),
		"TIOCSETAW":                          reflect.ValueOf(i120.TIOCSETAW),
		"TIOCSETD":                           reflect.ValueOf(i120.TIOCSETD),
		"TIOCSIG":                            reflect.ValueOf(i120.TIOCSIG),
		"TIOCSPGRP":                          reflect.ValueOf(i120.TIOCSPGRP),
		"TIOCSTART":                          reflect.ValueOf(i120.TIOCSTART),
		"TIOCSTAT":                           reflect.ValueOf(i120.TIOCSTAT),
		"TIOCSTI":                            reflect.ValueOf(i120.TIOCSTI),
		"TIOCSTOP":                           reflect.ValueOf(i120.TIOCSTOP),
		"TIOCSWINSZ":                         reflect.ValueOf(i120.TIOCSWINSZ),
		"TIOCTIMESTAMP":                      reflect.ValueOf(i120.TIOCTIMESTAMP),
		"TIOCUCNTL":                          reflect.ValueOf(i120.TIOCUCNTL),
		"TOSTOP":                             reflect.ValueOf(i120.TOSTOP),
		"TimespecToNsec":                     reflect.ValueOf(i120.TimespecToNsec),
		"TimevalToNsec":                      reflect.ValueOf(i120.TimevalToNsec),
		"Truncate":                           reflect.ValueOf(i120.Truncate),
		"Umask":                              reflect.ValueOf(i120.Umask),
		"Undelete":                           reflect.ValueOf(i120.Undelete),
		"UnixRights":                         reflect.ValueOf(i120.UnixRights),
		"Unlink":                             reflect.ValueOf(i120.Unlink),
		"Unmount":                            reflect.ValueOf(i120.Unmount),
		"Unsetenv":                           reflect.ValueOf(i120.Unsetenv),
		"Utimes":                             reflect.ValueOf(i120.Utimes),
		"UtimesNano":                         reflect.ValueOf(i120.UtimesNano),
		"VDISCARD":                           reflect.ValueOf(i120.VDISCARD),
		"VDSUSP":                             reflect.ValueOf(i120.VDSUSP),
		"VEOF":                               reflect.ValueOf(i120.VEOF),
		"VEOL":                               reflect.ValueOf(i120.VEOL),
		"VEOL2":                              reflect.ValueOf(i120.VEOL2),
		"VERASE":                             reflect.ValueOf(i120.VERASE),
		"VINTR":                              reflect.ValueOf(i120.VINTR),
		"VKILL":                              reflect.ValueOf(i120.VKILL),
		"VLNEXT":                             reflect.ValueOf(i120.VLNEXT),
		"VMIN":                               reflect.ValueOf(i120.VMIN),
		"VQUIT":                              reflect.ValueOf(i120.VQUIT),
		"VREPRINT":                           reflect.ValueOf(i120.VREPRINT),
		"VSTART":                             reflect.ValueOf(i120.VSTART),
		"VSTATUS":                            reflect.ValueOf(i120.VSTATUS),
		"VSTOP":                              reflect.ValueOf(i120.VSTOP),
		"VSUSP":                              reflect.ValueOf(i120.VSUSP),
		"VT0":                                reflect.ValueOf(i120.VT0),
		"VT1":                                reflect.ValueOf(i120.VT1),
		"VTDLY":                              reflect.ValueOf(i120.VTDLY),
		"VTIME":                              reflect.ValueOf(i120.VTIME),
		"VWERASE":                            reflect.ValueOf(i120.VWERASE),
		"WCONTINUED":                         reflect.ValueOf(i120.WCONTINUED),
		"WCOREFLAG":                          reflect.ValueOf(i120.WCOREFLAG),
		"WEXITED":                            reflect.ValueOf(i120.WEXITED),
		"WNOHANG":                            reflect.ValueOf(i120.WNOHANG),
		"WNOWAIT":                            reflect.ValueOf(i120.WNOWAIT),
		"WORDSIZE":                           reflect.ValueOf(i120.WORDSIZE),
		"WSTOPPED":                           reflect.ValueOf(i120.WSTOPPED),
		"WUNTRACED":                          reflect.ValueOf(i120.WUNTRACED),
		"Wait4":                              reflect.ValueOf(i120.Wait4),
		"Write":                              reflect.ValueOf(i120.Write),
	}
	stdpkg["text/scanner"] = map[string]reflect.Value{
		"Char":           reflect.ValueOf(i121.Char),
		"Comment":        reflect.ValueOf(i121.Comment),
		"EOF":            reflect.ValueOf(i121.EOF),
		"Float":          reflect.ValueOf(i121.Float),
		"GoTokens":       reflect.ValueOf(i121.GoTokens),
		"GoWhitespace":   reflect.ValueOf(i121.GoWhitespace),
		"Ident":          reflect.ValueOf(i121.Ident),
		"Int":            reflect.ValueOf(i121.Int),
		"RawString":      reflect.ValueOf(i121.RawString),
		"ScanChars":      reflect.ValueOf(i121.ScanChars),
		"ScanComments":   reflect.ValueOf(i121.ScanComments),
		"ScanFloats":     reflect.ValueOf(i121.ScanFloats),
		"ScanIdents":     reflect.ValueOf(i121.ScanIdents),
		"ScanInts":       reflect.ValueOf(i121.ScanInts),
		"ScanRawStrings": reflect.ValueOf(i121.ScanRawStrings),
		"ScanStrings":    reflect.ValueOf(i121.ScanStrings),
		"SkipComments":   reflect.ValueOf(i121.SkipComments),
		"String":         reflect.ValueOf(i121.String),
		"TokenString":    reflect.ValueOf(i121.TokenString),
	}
	stdpkg["text/tabwriter"] = map[string]reflect.Value{
		"AlignRight":          reflect.ValueOf(i122.AlignRight),
		"Debug":               reflect.ValueOf(i122.Debug),
		"DiscardEmptyColumns": reflect.ValueOf(i122.DiscardEmptyColumns),
		"Escape":              reflect.ValueOf(i122.Escape),
		"FilterHTML":          reflect.ValueOf(i122.FilterHTML),
		"NewWriter":           reflect.ValueOf(i122.NewWriter),
		"StripEscape":         reflect.ValueOf(i122.StripEscape),
		"TabIndent":           reflect.ValueOf(i122.TabIndent),
	}
	stdpkg["text/template"] = map[string]reflect.Value{
		"HTMLEscape":       reflect.ValueOf(i123.HTMLEscape),
		"HTMLEscapeString": reflect.ValueOf(i123.HTMLEscapeString),
		"HTMLEscaper":      reflect.ValueOf(i123.HTMLEscaper),
		"IsTrue":           reflect.ValueOf(i123.IsTrue),
		"JSEscape":         reflect.ValueOf(i123.JSEscape),
		"JSEscapeString":   reflect.ValueOf(i123.JSEscapeString),
		"JSEscaper":        reflect.ValueOf(i123.JSEscaper),
		"Must":             reflect.ValueOf(i123.Must),
		"New":              reflect.ValueOf(i123.New),
		"ParseFS":          reflect.ValueOf(i123.ParseFS),
		"ParseFiles":       reflect.ValueOf(i123.ParseFiles),
		"ParseGlob":        reflect.ValueOf(i123.ParseGlob),
		"URLQueryEscaper":  reflect.ValueOf(i123.URLQueryEscaper),
	}
	stdpkg["text/template/parse"] = map[string]reflect.Value{
		"IsEmptyTree":    reflect.ValueOf(i124.IsEmptyTree),
		"New":            reflect.ValueOf(i124.New),
		"NewIdentifier":  reflect.ValueOf(i124.NewIdentifier),
		"NodeAction":     reflect.ValueOf(i124.NodeAction),
		"NodeBool":       reflect.ValueOf(i124.NodeBool),
		"NodeBreak":      reflect.ValueOf(i124.NodeBreak),
		"NodeChain":      reflect.ValueOf(i124.NodeChain),
		"NodeCommand":    reflect.ValueOf(i124.NodeCommand),
		"NodeComment":    reflect.ValueOf(i124.NodeComment),
		"NodeContinue":   reflect.ValueOf(i124.NodeContinue),
		"NodeDot":        reflect.ValueOf(i124.NodeDot),
		"NodeField":      reflect.ValueOf(i124.NodeField),
		"NodeIdentifier": reflect.ValueOf(i124.NodeIdentifier),
		"NodeIf":         reflect.ValueOf(i124.NodeIf),
		"NodeList":       reflect.ValueOf(i124.NodeList),
		"NodeNil":        reflect.ValueOf(i124.NodeNil),
		"NodeNumber":     reflect.ValueOf(i124.NodeNumber),
		"NodePipe":       reflect.ValueOf(i124.NodePipe),
		"NodeRange":      reflect.ValueOf(i124.NodeRange),
		"NodeString":     reflect.ValueOf(i124.NodeString),
		"NodeTemplate":   reflect.ValueOf(i124.NodeTemplate),
		"NodeText":       reflect.ValueOf(i124.NodeText),
		"NodeVariable":   reflect.ValueOf(i124.NodeVariable),
		"NodeWith":       reflect.ValueOf(i124.NodeWith),
		"Parse":          reflect.ValueOf(i124.Parse),
		"ParseComments":  reflect.ValueOf(i124.ParseComments),
		"SkipFuncCheck":  reflect.ValueOf(i124.SkipFuncCheck),
	}
	stdpkg["time"] = map[string]reflect.Value{
		"ANSIC":                  reflect.ValueOf(i125.ANSIC),
		"After":                  reflect.ValueOf(i125.After),
		"AfterFunc":              reflect.ValueOf(i125.AfterFunc),
		"April":                  reflect.ValueOf(i125.April),
		"August":                 reflect.ValueOf(i125.August),
		"Date":                   reflect.ValueOf(i125.Date),
		"DateOnly":               reflect.ValueOf(i125.DateOnly),
		"DateTime":               reflect.ValueOf(i125.DateTime),
		"December":               reflect.ValueOf(i125.December),
		"February":               reflect.ValueOf(i125.February),
		"FixedZone":              reflect.ValueOf(i125.FixedZone),
		"Friday":                 reflect.ValueOf(i125.Friday),
		"Hour":                   reflect.ValueOf(i125.Hour),
		"January":                reflect.ValueOf(i125.January),
		"July":                   reflect.ValueOf(i125.July),
		"June":                   reflect.ValueOf(i125.June),
		"Kitchen":                reflect.ValueOf(i125.Kitchen),
		"Layout":                 reflect.ValueOf(i125.Layout),
		"LoadLocation":           reflect.ValueOf(i125.LoadLocation),
		"LoadLocationFromTZData": reflect.ValueOf(i125.LoadLocationFromTZData),
		"Local":                  reflect.ValueOf(i125.Local),
		"March":                  reflect.ValueOf(i125.March),
		"May":                    reflect.ValueOf(i125.May),
		"Microsecond":            reflect.ValueOf(i125.Microsecond),
		"Millisecond":            reflect.ValueOf(i125.Millisecond),
		"Minute":                 reflect.ValueOf(i125.Minute),
		"Monday":                 reflect.ValueOf(i125.Monday),
		"Nanosecond":             reflect.ValueOf(i125.Nanosecond),
		"NewTicker":              reflect.ValueOf(i125.NewTicker),
		"NewTimer":               reflect.ValueOf(i125.NewTimer),
		"November":               reflect.ValueOf(i125.November),
		"Now":                    reflect.ValueOf(i125.Now),
		"October":                reflect.ValueOf(i125.October),
		"Parse":                  reflect.ValueOf(i125.Parse),
		"ParseDuration":          reflect.ValueOf(i125.ParseDuration),
		"ParseInLocation":        reflect.ValueOf(i125.ParseInLocation),
		"RFC1123":                reflect.ValueOf(i125.RFC1123),
		"RFC1123Z":               reflect.ValueOf(i125.RFC1123Z),
		"RFC3339":                reflect.ValueOf(i125.RFC3339),
		"RFC3339Nano":            reflect.ValueOf(i125.RFC3339Nano),
		"RFC822":                 reflect.ValueOf(i125.RFC822),
		"RFC822Z":                reflect.ValueOf(i125.RFC822Z),
		"RFC850":                 reflect.ValueOf(i125.RFC850),
		"RubyDate":               reflect.ValueOf(i125.RubyDate),
		"Saturday":               reflect.ValueOf(i125.Saturday),
		"Second":                 reflect.ValueOf(i125.Second),
		"September":              reflect.ValueOf(i125.September),
		"Since":                  reflect.ValueOf(i125.Since),
		"Sleep":                  reflect.ValueOf(i125.Sleep),
		"Stamp":                  reflect.ValueOf(i125.Stamp),
		"StampMicro":             reflect.ValueOf(i125.StampMicro),
		"StampMilli":             reflect.ValueOf(i125.StampMilli),
		"StampNano":              reflect.ValueOf(i125.StampNano),
		"Sunday":                 reflect.ValueOf(i125.Sunday),
		"Thursday":               reflect.ValueOf(i125.Thursday),
		"Tick":                   reflect.ValueOf(i125.Tick),
		"TimeOnly":               reflect.ValueOf(i125.TimeOnly),
		"Tuesday":                reflect.ValueOf(i125.Tuesday),
		"UTC":                    reflect.ValueOf(i125.UTC),
		"Unix":                   reflect.ValueOf(i125.Unix),
		"UnixDate":               reflect.ValueOf(i125.UnixDate),
		"UnixMicro":              reflect.ValueOf(i125.UnixMicro),
		"UnixMilli":              reflect.ValueOf(i125.UnixMilli),
		"Until":                  reflect.ValueOf(i125.Until),
		"Wednesday":              reflect.ValueOf(i125.Wednesday),
	}
	stdpkg["unicode"] = map[string]reflect.Value{
		"ASCII_Hex_Digit":                    reflect.ValueOf(i126.ASCII_Hex_Digit),
		"Adlam":                              reflect.ValueOf(i126.Adlam),
		"Ahom":                               reflect.ValueOf(i126.Ahom),
		"Anatolian_Hieroglyphs":              reflect.ValueOf(i126.Anatolian_Hieroglyphs),
		"Arabic":                             reflect.ValueOf(i126.Arabic),
		"Armenian":                           reflect.ValueOf(i126.Armenian),
		"Avestan":                            reflect.ValueOf(i126.Avestan),
		"AzeriCase":                          reflect.ValueOf(i126.AzeriCase),
		"Balinese":                           reflect.ValueOf(i126.Balinese),
		"Bamum":                              reflect.ValueOf(i126.Bamum),
		"Bassa_Vah":                          reflect.ValueOf(i126.Bassa_Vah),
		"Batak":                              reflect.ValueOf(i126.Batak),
		"Bengali":                            reflect.ValueOf(i126.Bengali),
		"Bhaiksuki":                          reflect.ValueOf(i126.Bhaiksuki),
		"Bidi_Control":                       reflect.ValueOf(i126.Bidi_Control),
		"Bopomofo":                           reflect.ValueOf(i126.Bopomofo),
		"Brahmi":                             reflect.ValueOf(i126.Brahmi),
		"Braille":                            reflect.ValueOf(i126.Braille),
		"Buginese":                           reflect.ValueOf(i126.Buginese),
		"Buhid":                              reflect.ValueOf(i126.Buhid),
		"C":                                  reflect.ValueOf(i126.C),
		"Canadian_Aboriginal":                reflect.ValueOf(i126.Canadian_Aboriginal),
		"Carian":                             reflect.ValueOf(i126.Carian),
		"CaseRanges":                         reflect.ValueOf(i126.CaseRanges),
		"Categories":                         reflect.ValueOf(i126.Categories),
		"CategoryAliases":                    reflect.ValueOf(i126.CategoryAliases),
		"Caucasian_Albanian":                 reflect.ValueOf(i126.Caucasian_Albanian),
		"Cc":                                 reflect.ValueOf(i126.Cc),
		"Cf":                                 reflect.ValueOf(i126.Cf),
		"Chakma":                             reflect.ValueOf(i126.Chakma),
		"Cham":                               reflect.ValueOf(i126.Cham),
		"Cherokee":                           reflect.ValueOf(i126.Cherokee),
		"Chorasmian":                         reflect.ValueOf(i126.Chorasmian),
		"Cn":                                 reflect.ValueOf(i126.Cn),
		"Co":                                 reflect.ValueOf(i126.Co),
		"Common":                             reflect.ValueOf(i126.Common),
		"Coptic":                             reflect.ValueOf(i126.Coptic),
		"Cs":                                 reflect.ValueOf(i126.Cs),
		"Cuneiform":                          reflect.ValueOf(i126.Cuneiform),
		"Cypriot":                            reflect.ValueOf(i126.Cypriot),
		"Cypro_Minoan":                       reflect.ValueOf(i126.Cypro_Minoan),
		"Cyrillic":                           reflect.ValueOf(i126.Cyrillic),
		"Dash":                               reflect.ValueOf(i126.Dash),
		"Deprecated":                         reflect.ValueOf(i126.Deprecated),
		"Deseret":                            reflect.ValueOf(i126.Deseret),
		"Devanagari":                         reflect.ValueOf(i126.Devanagari),
		"Diacritic":                          reflect.ValueOf(i126.Diacritic),
		"Digit":                              reflect.ValueOf(i126.Digit),
		"Dives_Akuru":                        reflect.ValueOf(i126.Dives_Akuru),
		"Dogra":                              reflect.ValueOf(i126.Dogra),
		"Duployan":                           reflect.ValueOf(i126.Duployan),
		"Egyptian_Hieroglyphs":               reflect.ValueOf(i126.Egyptian_Hieroglyphs),
		"Elbasan":                            reflect.ValueOf(i126.Elbasan),
		"Elymaic":                            reflect.ValueOf(i126.Elymaic),
		"Ethiopic":                           reflect.ValueOf(i126.Ethiopic),
		"Extender":                           reflect.ValueOf(i126.Extender),
		"FoldCategory":                       reflect.ValueOf(i126.FoldCategory),
		"FoldScript":                         reflect.ValueOf(i126.FoldScript),
		"Georgian":                           reflect.ValueOf(i126.Georgian),
		"Glagolitic":                         reflect.ValueOf(i126.Glagolitic),
		"Gothic":                             reflect.ValueOf(i126.Gothic),
		"Grantha":                            reflect.ValueOf(i126.Grantha),
		"GraphicRanges":                      reflect.ValueOf(i126.GraphicRanges),
		"Greek":                              reflect.ValueOf(i126.Greek),
		"Gujarati":                           reflect.ValueOf(i126.Gujarati),
		"Gunjala_Gondi":                      reflect.ValueOf(i126.Gunjala_Gondi),
		"Gurmukhi":                           reflect.ValueOf(i126.Gurmukhi),
		"Han":                                reflect.ValueOf(i126.Han),
		"Hangul":                             reflect.ValueOf(i126.Hangul),
		"Hanifi_Rohingya":                    reflect.ValueOf(i126.Hanifi_Rohingya),
		"Hanunoo":                            reflect.ValueOf(i126.Hanunoo),
		"Hatran":                             reflect.ValueOf(i126.Hatran),
		"Hebrew":                             reflect.ValueOf(i126.Hebrew),
		"Hex_Digit":                          reflect.ValueOf(i126.Hex_Digit),
		"Hiragana":                           reflect.ValueOf(i126.Hiragana),
		"Hyphen":                             reflect.ValueOf(i126.Hyphen),
		"IDS_Binary_Operator":                reflect.ValueOf(i126.IDS_Binary_Operator),
		"IDS_Trinary_Operator":               reflect.ValueOf(i126.IDS_Trinary_Operator),
		"Ideographic":                        reflect.ValueOf(i126.Ideographic),
		"Imperial_Aramaic":                   reflect.ValueOf(i126.Imperial_Aramaic),
		"In":                                 reflect.ValueOf(i126.In),
		"Inherited":                          reflect.ValueOf(i126.Inherited),
		"Inscriptional_Pahlavi":              reflect.ValueOf(i126.Inscriptional_Pahlavi),
		"Inscriptional_Parthian":             reflect.ValueOf(i126.Inscriptional_Parthian),
		"Is":                                 reflect.ValueOf(i126.Is),
		"IsControl":                          reflect.ValueOf(i126.IsControl),
		"IsDigit":                            reflect.ValueOf(i126.IsDigit),
		"IsGraphic":                          reflect.ValueOf(i126.IsGraphic),
		"IsLetter":                           reflect.ValueOf(i126.IsLetter),
		"IsLower":                            reflect.ValueOf(i126.IsLower),
		"IsMark":                             reflect.ValueOf(i126.IsMark),
		"IsNumber":                           reflect.ValueOf(i126.IsNumber),
		"IsOneOf":                            reflect.ValueOf(i126.IsOneOf),
		"IsPrint":                            reflect.ValueOf(i126.IsPrint),
		"IsPunct":                            reflect.ValueOf(i126.IsPunct),
		"IsSpace":                            reflect.ValueOf(i126.IsSpace),
		"IsSymbol":                           reflect.ValueOf(i126.IsSymbol),
		"IsTitle":                            reflect.ValueOf(i126.IsTitle),
		"IsUpper":                            reflect.ValueOf(i126.IsUpper),
		"Javanese":                           reflect.ValueOf(i126.Javanese),
		"Join_Control":                       reflect.ValueOf(i126.Join_Control),
		"Kaithi":                             reflect.ValueOf(i126.Kaithi),
		"Kannada":                            reflect.ValueOf(i126.Kannada),
		"Katakana":                           reflect.ValueOf(i126.Katakana),
		"Kawi":                               reflect.ValueOf(i126.Kawi),
		"Kayah_Li":                           reflect.ValueOf(i126.Kayah_Li),
		"Kharoshthi":                         reflect.ValueOf(i126.Kharoshthi),
		"Khitan_Small_Script":                reflect.ValueOf(i126.Khitan_Small_Script),
		"Khmer":                              reflect.ValueOf(i126.Khmer),
		"Khojki":                             reflect.ValueOf(i126.Khojki),
		"Khudawadi":                          reflect.ValueOf(i126.Khudawadi),
		"L":                                  reflect.ValueOf(i126.L),
		"LC":                                 reflect.ValueOf(i126.LC),
		"Lao":                                reflect.ValueOf(i126.Lao),
		"Latin":                              reflect.ValueOf(i126.Latin),
		"Lepcha":                             reflect.ValueOf(i126.Lepcha),
		"Letter":                             reflect.ValueOf(i126.Letter),
		"Limbu":                              reflect.ValueOf(i126.Limbu),
		"Linear_A":                           reflect.ValueOf(i126.Linear_A),
		"Linear_B":                           reflect.ValueOf(i126.Linear_B),
		"Lisu":                               reflect.ValueOf(i126.Lisu),
		"Ll":                                 reflect.ValueOf(i126.Ll),
		"Lm":                                 reflect.ValueOf(i126.Lm),
		"Lo":                                 reflect.ValueOf(i126.Lo),
		"Logical_Order_Exception":            reflect.ValueOf(i126.Logical_Order_Exception),
		"Lower":                              reflect.ValueOf(i126.Lower),
		"LowerCase":                          reflect.ValueOf(i126.LowerCase),
		"Lt":                                 reflect.ValueOf(i126.Lt),
		"Lu":                                 reflect.ValueOf(i126.Lu),
		"Lycian":                             reflect.ValueOf(i126.Lycian),
		"Lydian":                             reflect.ValueOf(i126.Lydian),
		"M":                                  reflect.ValueOf(i126.M),
		"Mahajani":                           reflect.ValueOf(i126.Mahajani),
		"Makasar":                            reflect.ValueOf(i126.Makasar),
		"Malayalam":                          reflect.ValueOf(i126.Malayalam),
		"Mandaic":                            reflect.ValueOf(i126.Mandaic),
		"Manichaean":                         reflect.ValueOf(i126.Manichaean),
		"Marchen":                            reflect.ValueOf(i126.Marchen),
		"Mark":                               reflect.ValueOf(i126.Mark),
		"Masaram_Gondi":                      reflect.ValueOf(i126.Masaram_Gondi),
		"MaxASCII":                           reflect.ValueOf(i126.MaxASCII),
		"MaxCase":                            reflect.ValueOf(i126.MaxCase),
		"MaxLatin1":                          reflect.ValueOf(i126.MaxLatin1),
		"MaxRune":                            reflect.ValueOf(i126.MaxRune),
		"Mc":                                 reflect.ValueOf(i126.Mc),
		"Me":                                 reflect.ValueOf(i126.Me),
		"Medefaidrin":                        reflect.ValueOf(i126.Medefaidrin),
		"Meetei_Mayek":                       reflect.ValueOf(i126.Meetei_Mayek),
		"Mende_Kikakui":                      reflect.ValueOf(i126.Mende_Kikakui),
		"Meroitic_Cursive":                   reflect.ValueOf(i126.Meroitic_Cursive),
		"Meroitic_Hieroglyphs":               reflect.ValueOf(i126.Meroitic_Hieroglyphs),
		"Miao":                               reflect.ValueOf(i126.Miao),
		"Mn":                                 reflect.ValueOf(i126.Mn),
		"Modi":                               reflect.ValueOf(i126.Modi),
		"Mongolian":                          reflect.ValueOf(i126.Mongolian),
		"Mro":                                reflect.ValueOf(i126.Mro),
		"Multani":                            reflect.ValueOf(i126.Multani),
		"Myanmar":                            reflect.ValueOf(i126.Myanmar),
		"N":                                  reflect.ValueOf(i126.N),
		"Nabataean":                          reflect.ValueOf(i126.Nabataean),
		"Nag_Mundari":                        reflect.ValueOf(i126.Nag_Mundari),
		"Nandinagari":                        reflect.ValueOf(i126.Nandinagari),
		"Nd":                                 reflect.ValueOf(i126.Nd),
		"New_Tai_Lue":                        reflect.ValueOf(i126.New_Tai_Lue),
		"Newa":                               reflect.ValueOf(i126.Newa),
		"Nko":                                reflect.ValueOf(i126.Nko),
		"Nl":                                 reflect.ValueOf(i126.Nl),
		"No":                                 reflect.ValueOf(i126.No),
		"Noncharacter_Code_Point":            reflect.ValueOf(i126.Noncharacter_Code_Point),
		"Number":                             reflect.ValueOf(i126.Number),
		"Nushu":                              reflect.ValueOf(i126.Nushu),
		"Nyiakeng_Puachue_Hmong":             reflect.ValueOf(i126.Nyiakeng_Puachue_Hmong),
		"Ogham":                              reflect.ValueOf(i126.Ogham),
		"Ol_Chiki":                           reflect.ValueOf(i126.Ol_Chiki),
		"Old_Hungarian":                      reflect.ValueOf(i126.Old_Hungarian),
		"Old_Italic":                         reflect.ValueOf(i126.Old_Italic),
		"Old_North_Arabian":                  reflect.ValueOf(i126.Old_North_Arabian),
		"Old_Permic":                         reflect.ValueOf(i126.Old_Permic),
		"Old_Persian":                        reflect.ValueOf(i126.Old_Persian),
		"Old_Sogdian":                        reflect.ValueOf(i126.Old_Sogdian),
		"Old_South_Arabian":                  reflect.ValueOf(i126.Old_South_Arabian),
		"Old_Turkic":                         reflect.ValueOf(i126.Old_Turkic),
		"Old_Uyghur":                         reflect.ValueOf(i126.Old_Uyghur),
		"Oriya":                              reflect.ValueOf(i126.Oriya),
		"Osage":                              reflect.ValueOf(i126.Osage),
		"Osmanya":                            reflect.ValueOf(i126.Osmanya),
		"Other":                              reflect.ValueOf(i126.Other),
		"Other_Alphabetic":                   reflect.ValueOf(i126.Other_Alphabetic),
		"Other_Default_Ignorable_Code_Point": reflect.ValueOf(i126.Other_Default_Ignorable_Code_Point),
		"Other_Grapheme_Extend":              reflect.ValueOf(i126.Other_Grapheme_Extend),
		"Other_ID_Continue":                  reflect.ValueOf(i126.Other_ID_Continue),
		"Other_ID_Start":                     reflect.ValueOf(i126.Other_ID_Start),
		"Other_Lowercase":                    reflect.ValueOf(i126.Other_Lowercase),
		"Other_Math":                         reflect.ValueOf(i126.Other_Math),
		"Other_Uppercase":                    reflect.ValueOf(i126.Other_Uppercase),
		"P":                                  reflect.ValueOf(i126.P),
		"Pahawh_Hmong":                       reflect.ValueOf(i126.Pahawh_Hmong),
		"Palmyrene":                          reflect.ValueOf(i126.Palmyrene),
		"Pattern_Syntax":                     reflect.ValueOf(i126.Pattern_Syntax),
		"Pattern_White_Space":                reflect.ValueOf(i126.Pattern_White_Space),
		"Pau_Cin_Hau":                        reflect.ValueOf(i126.Pau_Cin_Hau),
		"Pc":                                 reflect.ValueOf(i126.Pc),
		"Pd":                                 reflect.ValueOf(i126.Pd),
		"Pe":                                 reflect.ValueOf(i126.Pe),
		"Pf":                                 reflect.ValueOf(i126.Pf),
		"Phags_Pa":                           reflect.ValueOf(i126.Phags_Pa),
		"Phoenician":                         reflect.ValueOf(i126.Phoenician),
		"Pi":                                 reflect.ValueOf(i126.Pi),
		"Po":                                 reflect.ValueOf(i126.Po),
		"Prepended_Concatenation_Mark":       reflect.ValueOf(i126.Prepended_Concatenation_Mark),
		"PrintRanges":                        reflect.ValueOf(i126.PrintRanges),
		"Properties":                         reflect.ValueOf(i126.Properties),
		"Ps":                                 reflect.ValueOf(i126.Ps),
		"Psalter_Pahlavi":                    reflect.ValueOf(i126.Psalter_Pahlavi),
		"Punct":                              reflect.ValueOf(i126.Punct),
		"Quotation_Mark":                     reflect.ValueOf(i126.Quotation_Mark),
		"Radical":                            reflect.ValueOf(i126.Radical),
		"Regional_Indicator":                 reflect.ValueOf(i126.Regional_Indicator),
		"Rejang":                             reflect.ValueOf(i126.Rejang),
		"ReplacementChar":                    reflect.ValueOf(i126.ReplacementChar),
		"Runic":                              reflect.ValueOf(i126.Runic),
		"S":                                  reflect.ValueOf(i126.S),
		"STerm":                              reflect.ValueOf(i126.STerm),
		"Samaritan":                          reflect.ValueOf(i126.Samaritan),
		"Saurashtra":                         reflect.ValueOf(i126.Saurashtra),
		"Sc":                                 reflect.ValueOf(i126.Sc),
		"Scripts":                            reflect.ValueOf(i126.Scripts),
		"Sentence_Terminal":                  reflect.ValueOf(i126.Sentence_Terminal),
		"Sharada":                            reflect.ValueOf(i126.Sharada),
		"Shavian":                            reflect.ValueOf(i126.Shavian),
		"Siddham":                            reflect.ValueOf(i126.Siddham),
		"SignWriting":                        reflect.ValueOf(i126.SignWriting),
		"SimpleFold":                         reflect.ValueOf(i126.SimpleFold),
		"Sinhala":                            reflect.ValueOf(i126.Sinhala),
		"Sk":                                 reflect.ValueOf(i126.Sk),
		"Sm":                                 reflect.ValueOf(i126.Sm),
		"So":                                 reflect.ValueOf(i126.So),
		"Soft_Dotted":                        reflect.ValueOf(i126.Soft_Dotted),
		"Sogdian":                            reflect.ValueOf(i126.Sogdian),
		"Sora_Sompeng":                       reflect.ValueOf(i126.Sora_Sompeng),
		"Soyombo":                            reflect.ValueOf(i126.Soyombo),
		"Space":                              reflect.ValueOf(i126.Space),
		"Sundanese":                          reflect.ValueOf(i126.Sundanese),
		"Syloti_Nagri":                       reflect.ValueOf(i126.Syloti_Nagri),
		"Symbol":                             reflect.ValueOf(i126.Symbol),
		"Syriac":                             reflect.ValueOf(i126.Syriac),
		"Tagalog":                            reflect.ValueOf(i126.Tagalog),
		"Tagbanwa":                           reflect.ValueOf(i126.Tagbanwa),
		"Tai_Le":                             reflect.ValueOf(i126.Tai_Le),
		"Tai_Tham":                           reflect.ValueOf(i126.Tai_Tham),
		"Tai_Viet":                           reflect.ValueOf(i126.Tai_Viet),
		"Takri":                              reflect.ValueOf(i126.Takri),
		"Tamil":                              reflect.ValueOf(i126.Tamil),
		"Tangsa":                             reflect.ValueOf(i126.Tangsa),
		"Tangut":                             reflect.ValueOf(i126.Tangut),
		"Telugu":                             reflect.ValueOf(i126.Telugu),
		"Terminal_Punctuation":               reflect.ValueOf(i126.Terminal_Punctuation),
		"Thaana":                             reflect.ValueOf(i126.Thaana),
		"Thai":                               reflect.ValueOf(i126.Thai),
		"Tibetan":                            reflect.ValueOf(i126.Tibetan),
		"Tifinagh":                           reflect.ValueOf(i126.Tifinagh),
		"Tirhuta":                            reflect.ValueOf(i126.Tirhuta),
		"Title":                              reflect.ValueOf(i126.Title),
		"TitleCase":                          reflect.ValueOf(i126.TitleCase),
		"To":                                 reflect.ValueOf(i126.To),
		"ToLower":                            reflect.ValueOf(i126.ToLower),
		"ToTitle":                            reflect.ValueOf(i126.ToTitle),
		"ToUpper":                            reflect.ValueOf(i126.ToUpper),
		"Toto":                               reflect.ValueOf(i126.Toto),
		"TurkishCase":                        reflect.ValueOf(i126.TurkishCase),
		"Ugaritic":                           reflect.ValueOf(i126.Ugaritic),
		"Unified_Ideograph":                  reflect.ValueOf(i126.Unified_Ideograph),
		"Upper":                              reflect.ValueOf(i126.Upper),
		"UpperCase":                          reflect.ValueOf(i126.UpperCase),
		"UpperLower":                         reflect.ValueOf(i126.UpperLower),
		"Vai":                                reflect.ValueOf(i126.Vai),
		"Variation_Selector":                 reflect.ValueOf(i126.Variation_Selector),
		"Version":                            reflect.ValueOf(i126.Version),
		"Vithkuqi":                           reflect.ValueOf(i126.Vithkuqi),
		"Wancho":                             reflect.ValueOf(i126.Wancho),
		"Warang_Citi":                        reflect.ValueOf(i126.Warang_Citi),
		"White_Space":                        reflect.ValueOf(i126.White_Space),
		"Yezidi":                             reflect.ValueOf(i126.Yezidi),
		"Yi":                                 reflect.ValueOf(i126.Yi),
		"Z":                                  reflect.ValueOf(i126.Z),
		"Zanabazar_Square":                   reflect.ValueOf(i126.Zanabazar_Square),
		"Zl":                                 reflect.ValueOf(i126.Zl),
		"Zp":                                 reflect.ValueOf(i126.Zp),
		"Zs":                                 reflect.ValueOf(i126.Zs),
	}
	stdpkg["unicode/utf16"] = map[string]reflect.Value{
		"AppendRune":  reflect.ValueOf(i127.AppendRune),
		"Decode":      reflect.ValueOf(i127.Decode),
		"DecodeRune":  reflect.ValueOf(i127.DecodeRune),
		"Encode":      reflect.ValueOf(i127.Encode),
		"EncodeRune":  reflect.ValueOf(i127.EncodeRune),
		"IsSurrogate": reflect.ValueOf(i127.IsSurrogate),
		"RuneLen":     reflect.ValueOf(i127.RuneLen),
	}
	stdpkg["unicode/utf8"] = map[string]reflect.Value{
		"AppendRune":             reflect.ValueOf(i128.AppendRune),
		"DecodeLastRune":         reflect.ValueOf(i128.DecodeLastRune),
		"DecodeLastRuneInString": reflect.ValueOf(i128.DecodeLastRuneInString),
		"DecodeRune":             reflect.ValueOf(i128.DecodeRune),
		"DecodeRuneInString":     reflect.ValueOf(i128.DecodeRuneInString),
		"EncodeRune":             reflect.ValueOf(i128.EncodeRune),
		"FullRune":               reflect.ValueOf(i128.FullRune),
		"FullRuneInString":       reflect.ValueOf(i128.FullRuneInString),
		"MaxRune":                reflect.ValueOf(i128.MaxRune),
		"RuneCount":              reflect.ValueOf(i128.RuneCount),
		"RuneCountInString":      reflect.ValueOf(i128.RuneCountInString),
		"RuneError":              reflect.ValueOf(i128.RuneError),
		"RuneLen":                reflect.ValueOf(i128.RuneLen),
		"RuneSelf":               reflect.ValueOf(i128.RuneSelf),
		"RuneStart":              reflect.ValueOf(i128.RuneStart),
		"UTFMax":                 reflect.ValueOf(i128.UTFMax),
		"Valid":                  reflect.ValueOf(i128.Valid),
		"ValidRune":              reflect.ValueOf(i128.ValidRune),
		"ValidString":            reflect.ValueOf(i128.ValidString),
	}
}
